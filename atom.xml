<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://annecoding.github.io/"/>
  <updated>2019-08-24T01:38:04.551Z</updated>
  <id>https://annecoding.github.io/</id>
  
  <author>
    <name>Annecoding&#39;s</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos使用mailx告警邮件配置</title>
    <link href="https://annecoding.github.io/2019/08/22/Centos%E4%BD%BF%E7%94%A8mailx%E5%91%8A%E8%AD%A6%E9%82%AE%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <id>https://annecoding.github.io/2019/08/22/Centos使用mailx告警邮件配置/</id>
    <published>2019-08-22T01:09:19.000Z</published>
    <updated>2019-08-24T01:38:04.551Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p>今天为大家介绍一个可以直接在 Linux 上使用 SMTP 发送邮件的程序：Mailx，这个程序可以帮助我们让服务器直接支持邮件发送，不用再在每个站点上都设置了。</p><a id="more"></a><p><strong>centos配置自带邮件服务器mailx发件配置</strong></p><h4 id="安装mailx程序"><a href="#安装mailx程序" class="headerlink" title="安装mailx程序"></a>安装mailx程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mailx</span><br></pre></td></tr></table></figure><p>🌟 安装之前，建议移除不再需要且可能会引起冲突的 postfix 或 sendmail 程序。</p><h4 id="修改发件人设置"><a href="#修改发件人设置" class="headerlink" title="修改发件人设置"></a>修改发件人设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vim + /etc/mail.rc </span><br><span class="line"><span class="built_in">set</span> nss-config-dir=/root/.certs</span><br><span class="line"><span class="built_in">set</span> smtp=<span class="string">"smtps://smtp.163.com:465"</span></span><br><span class="line"><span class="comment"># set smtp=smtp.163.com  默认25端口不放开</span></span><br><span class="line"><span class="built_in">set</span> from=<span class="string">"annecoding@163.com"</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login</span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=<span class="string">"annecoding@163.com"</span></span><br><span class="line"><span class="comment"># 不是密码，不是密码！！！获取网易163设置的客户端授权密码。</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=<span class="string">"xxxxxx"</span></span><br><span class="line"><span class="built_in">set</span> ssl-verify=ignore</span><br></pre></td></tr></table></figure><p>💡 一般邮件服务器会提供 smtp、smtps 和 smtp starttls 服务来发送邮件。smtp 最简单的，也最不安全的，不建议使用，最好使用 smtps 或者 smtp starttls 来发送邮件。</p><h4 id="测试发送"><a href="#测试发送" class="headerlink" title="测试发送"></a>测试发送</h4><p>可以发送出邮件，但是会报错，如下面这种情况。需要生成证书来解决此问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"TEST"</span> | mail -s <span class="string">"Title"</span> <span class="string">"annecoding@163.com"</span></span><br><span class="line">$ Error <span class="keyword">in</span> certificate: Peer<span class="string">'s certificate issuer is not recognized.</span></span><br></pre></td></tr></table></figure></p><h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><p>在本地新建目录生成证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /root/.certs/</span><br><span class="line">$ <span class="built_in">echo</span> -n | openssl s_client -connect smtp.163.com:465 | sed -ne <span class="string">'/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'</span> &gt; ~/.certs/163.crt</span><br><span class="line">$ certutil -A -n <span class="string">"GeoTrust SSL CA"</span> -t <span class="string">"C,,"</span> -d ~/.certs -i ~/.certs/163.crt</span><br><span class="line">$ certutil -A -n <span class="string">"GeoTrust Global CA"</span> -t <span class="string">"C,,"</span> -d ~/.certs -i ~/.certs/163.crt</span><br><span class="line">$ certutil -L -d /root/.certs</span><br><span class="line"><span class="comment"># 信任证书</span></span><br><span class="line">$ <span class="built_in">cd</span> .certs</span><br><span class="line">$ certutil -A -n <span class="string">"GeoTrust SSL CA - G3"</span> -t <span class="string">"Pu,Pu,Pu"</span>  -d ./ -i 163.crt</span><br></pre></td></tr></table></figure></p><p>💡 参考上面的设置（如果要用qq邮箱，可以把所有的生成证书的163改为qq），同样可以使用 126，163 等邮箱在服务器上通过 SMTP 发送邮件。设置成功以后，服务器上的所有站点，或者其他程序、其他语言开发的站点，都可以直接发送邮件了，是不是很方便？</p><h4 id="再次修改mail-rc"><a href="#再次修改mail-rc" class="headerlink" title="再次修改mail.rc"></a>再次修改mail.rc</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/mail.rc</span><br><span class="line">$ <span class="built_in">set</span> nss-config-dir=/root/.certs/</span><br></pre></td></tr></table></figure><h4 id="测试发送-1"><a href="#测试发送-1" class="headerlink" title="测试发送"></a>测试发送</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mail -s发送邮件 -v可以显示发件的详细信息</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"邮件正文"</span> | mail -s <span class="string">"标题"</span> <span class="string">"annecoding@163.com"</span> </span><br><span class="line">$ mail -s <span class="string">"xxxx"</span> annecoding@163.com &lt; /root/cpu.sh</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：</p><p><a href="https://www.wpzhiku.com/shi-yong-mailx-tong-guo-smtp-zai-centos-shang-fa-song-you-jian/" target="_blank" rel="noopener">使用 Mailx 通过 SMTP 在 Centos 上发送邮件，解决 WordPress 发送邮件问题</a></p><p> <a href="https://www.cnblogs.com/hqqq/p/6261419.html" target="_blank" rel="noopener">mialx配置qq邮箱发送邮件</a></p><p> <a href="https://help.mail.163.com/faqDetail.do?code=d7a5dc8471cd0c0e8b4b8f4f8e49998b374173cfe9171305fa1ce630d7f67ac2cda80145a1742516" target="_blank" rel="noopener">如何开启客户端授权码？</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;今天为大家介绍一个可以直接在 Linux 上使用 SMTP 发送邮件的程序：Mailx，这个程序可以帮助我们让服务器直接支持邮件发送，不用再在每个站点上都设置了。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Centos" scheme="https://annecoding.github.io/tags/Centos/"/>
    
      <category term="mailx" scheme="https://annecoding.github.io/tags/mailx/"/>
    
  </entry>
  
  <entry>
    <title>shell中切分文件名和扩展名</title>
    <link href="https://annecoding.github.io/2019/08/13/shell%E4%B8%AD%E5%88%87%E5%88%86%E6%96%87%E4%BB%B6%E5%90%8D%E5%92%8C%E6%89%A9%E5%B1%95%E5%90%8D/"/>
    <id>https://annecoding.github.io/2019/08/13/shell中切分文件名和扩展名/</id>
    <published>2019-08-13T08:22:49.000Z</published>
    <updated>2019-08-13T08:50:59.385Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p>对于shell涉及的修改文件名的操作，我们可能需要提取某个文件名，或者提取某个文件的扩展名。get✔</p><a id="more"></a><h3 id="根据扩展名切分文件名"><a href="#根据扩展名切分文件名" class="headerlink" title="根据扩展名切分文件名"></a>根据扩展名切分文件名</h3><p>截取文件名称示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat file.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">file_jpg=<span class="string">"sample.jpg"</span></span><br><span class="line">name=<span class="variable">$&#123;file_jpg%.*&#125;</span></span><br><span class="line"><span class="built_in">echo</span> File name is:<span class="variable">$name</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./file.sh </span><br><span class="line">File name is:sample</span><br></pre></td></tr></table></figure><p>截取文件扩展名示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat file1.sh</span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">file_jpg=<span class="string">"sample.jpg"</span></span><br><span class="line">extension=<span class="variable">$&#123;file_jpg#*.&#125;</span></span><br><span class="line"><span class="built_in">echo</span> Extension is:<span class="variable">$extension</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./file1.sh</span><br><span class="line">Extension is:jpg</span><br></pre></td></tr></table></figure><p><code>${VAR%.*}</code>工作原理：</p><ul><li>从<code>$VAR</code>中删除位于<code>%</code>右侧的通配符（在上例中式<code>.*</code>），通配符从右向左进行匹配。</li><li>给<code>VAR</code>赋值，即<code>VAR=sample.jpg</code>，通配符从右向左匹配得到的内容是<code>.jpg</code>，因此从<code>$VAR</code>中删除匹配结果，得到输出结果sample。</li></ul><p>💡 那么，有没有考虑过，要是文件名有很多后缀呢<code>cute.a.b.c.d.txt</code>？要是提取的变量为域名<code>www.google.com</code>呢？有的是办法，往下看~</p><p><strong>%属于非贪婪匹配，它从右向左找出匹配通配符的最短结果。还有另一个操作符%%，它于%相似，但行为模式确是贪婪的，它会匹配符合通配符的最长结果。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明变量var</span></span><br><span class="line">$ var=hack.fun.book.txt</span><br><span class="line"><span class="comment"># 执行从右向左非贪婪匹配，得到的匹配结果为.txt,删除了.txt之后文件名，可以得到具体的文件名</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;var%.*&#125;</span></span><br><span class="line">hack.fun.book</span><br><span class="line"><span class="comment"># 执行从右向左贪婪匹配，得到结果.fun.book.txt,删除了.fun.book.txt</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;var%%.*&#125;</span></span><br><span class="line">hack</span><br></pre></td></tr></table></figure><p><code>${VAR#*.}</code>工作原理：</p><ul><li>从<code>$VAR</code>中删除位于<code>#</code>右侧的通配符（上个栗子中使用的<code>*.</code>），从左到右匹配字符串。</li><li>和<code>#</code>对应的贪婪操作是<code>##</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从右到左进行非贪婪匹配，得到匹配结果hack，从指定变量中删除匹配结果</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;var#*.&#125;</span></span><br><span class="line">fun.book.txt</span><br><span class="line"><span class="comment"># 从右到左进行非贪婪匹配，得到匹配结果hack.fun.book，删除匹配结果后得到扩展名</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;var##*.&#125;</span></span><br><span class="line">txt</span><br></pre></td></tr></table></figure><p>💡总结</p><p><strong>文件名中可能包含多个.字符，所以呢</strong></p><p><strong>对于文件名：相较于%%，%更适合于提取文件名。%执行的是非贪婪匹配，只会删除扩展名。</strong></p><p><strong>对于扩展名：相较于#，##更适合于从中提取扩展名。##执行的是贪婪匹配，因此能准确的提取扩展名。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;对于shell涉及的修改文件名的操作，我们可能需要提取某个文件名，或者提取某个文件的扩展名。get✔&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="shell" scheme="https://annecoding.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>mtr网络分析工具安装</title>
    <link href="https://annecoding.github.io/2019/07/24/mtr%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
    <id>https://annecoding.github.io/2019/07/24/mtr网络分析工具安装/</id>
    <published>2019-07-24T08:00:54.000Z</published>
    <updated>2019-08-03T01:19:07.801Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p>遇到了安装完成mtr以后命令不能使用的情况，因为环境变量的配置问题！！！</p><a id="more"></a><p>mtr网络分析工具安装</p><p>1.首先保证安装brew工具</p><p>2.执行<code>brew cask mtr</code>进行软件安装</p><p>3.配置PATH变量 <code>vim ~/.bash_profile</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/sbin</span><br></pre></td></tr></table></figure><p>4.配置文件生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>5.安装完以后在<code>usr/local/sbin</code>目录下，第一次执行可以执行，再打开窗口就不行，环境变量只生效了一次。</p><p>再次打开新的窗口就发现不能使用了，输入<code>mtr</code>命令发现不能运行，提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtr: mtr should not run suid</span><br></pre></td></tr></table></figure><p>再次查看环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 内容如下</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin:/usr/bin:/bin:/usr/sbin:/sbin</span><br></pre></td></tr></table></figure><p>果然，没有<code>usr/local/sbin</code></p><p>6.此时有两种解决方案： </p><p>第一种解决方案，建立软链接，将所安装的mtr指令软链接到系统找得到的目录下，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/sbin/mtr* /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><p>第二种解决方案，修改/etc/paths的path文件，添加。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/paths </span><br><span class="line">在最后一行添加：/usr/<span class="built_in">local</span>/sbin，此修改重新启动程序便会生效。</span><br></pre></td></tr></table></figure><p>7.使用mtr命令必须是root权限，当然也可以修改目录权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mtr www.baidu.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;遇到了安装完成mtr以后命令不能使用的情况，因为环境变量的配置问题！！！&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="mtr" scheme="https://annecoding.github.io/tags/mtr/"/>
    
  </entry>
  
  <entry>
    <title>mac下如何修改环境变量</title>
    <link href="https://annecoding.github.io/2019/07/24/mac%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://annecoding.github.io/2019/07/24/mac下如何修改环境变量/</id>
    <published>2019-07-24T08:00:33.000Z</published>
    <updated>2019-07-28T01:39:28.265Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p>mac下环境变量到底该修改哪个文件呢？？？黑人问号脸，所以，一起来揭穿它神秘的面纱吧。<br><a id="more"></a></p><p>mac下一般使用bash作为默认shell</p><p>mac系统的环境变量，加载顺序为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc</span><br></pre></td></tr></table></figure><p>当然<code>/etc/profile</code>和<code>/etc/paths</code>是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。</p><p>后面3个按照从前往后的顺序读取，如果<code>/.bash_profile</code>文件存在，则后面的几个文件就会被忽略不读了，如果<code>~/.bash_profile</code>文件不存在，才会以此类推读取后面的文件。</p><p><code>~/.bashrc</code>没有上述规则，它是<code>bash shell</code>打开的时候载入的。</p><p>如果没特殊说明,设置PATH的语法都为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#中间用冒号隔开 </span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;</span><br></pre></td></tr></table></figure><h3 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h3><p>下面的几个文件设置是全局的,修改时需要root权限</p><p>1、<code>/etc/paths</code> （全局建议修改这个文件 ）</p><p>编辑 <code>/etc/paths</code>，将环境变量添加到<code>/etc/paths</code>文件中 ，一行一个路径</p><p>Hint：输入环境变量时，不用一个一个地输入，只要拖动文件夹到 Terminal 里就可以了。</p><p>2、<code>/etc/profile</code>（建议不修改这个文件 ）全局（公有）配置，不管是哪个用户，登录时都会读取该文件。</p><p>3、<code>/etc/bashrc</code>（一般在这个文件中添加系统级环境变量）全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件。</p><p>4、这条是什么鬼，先放着hhh~~~~👻</p><p>1.创建一个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/paths.d/mysql</span><br></pre></td></tr></table></figure><p>2.用 vim 打开这个文件（如果是以 open -t 的方式打开，则不允许编辑）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/paths.d/mysql</span><br></pre></td></tr></table></figure><p>3.编辑该文件，键入路径并保存（关闭该 Terminal 窗口并重新打开一个，就能使用 mysql 命令了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mysql/bin</span><br></pre></td></tr></table></figure><p>据说，这样可以自己生成新的文件，不用把变量全都放到 paths 一个文件里，方便管理。</p><h3 id="单个用户设置"><a href="#单个用户设置" class="headerlink" title="单个用户设置"></a>单个用户设置</h3><p>1、<code>~/.bash_profile</code> （任意一个文件中添加用户级环境变量）</p><p>（注：Linux 里面是<code>.bashrc</code> 而 Mac 是 <code>.bash_profile</code>）</p><p>若<code>bash shell</code>是以login方式执行时，才会读取此文件。该文件仅仅执行一次!默认情况下,他设置一些环境变量</p><p>设置命令别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=’ls -la’</span><br></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/opt/<span class="built_in">local</span>/bin:/opt/<span class="built_in">local</span>/sbin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>2、<code>~/.bashrc</code>同上</p><p>如果想立刻生效，则可执行下面的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source 相应的文件</span><br></pre></td></tr></table></figure><p>一般环境变量更改后，重启程序后生效。</p><blockquote><p>参考：</p><p><a href="https://segmentfault.com/q/1010000008484965/a-1020000008485621" target="_blank" rel="noopener">MAC OS中修改环境变量到底应该修改哪个文件</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;mac下环境变量到底该修改哪个文件呢？？？黑人问号脸，所以，一起来揭穿它神秘的面纱吧。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="https://annecoding.github.io/categories/Mac/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Mac" scheme="https://annecoding.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>linux安装hping添加环境变量</title>
    <link href="https://annecoding.github.io/2019/07/20/linux%E5%AE%89%E8%A3%85hping%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://annecoding.github.io/2019/07/20/linux安装hping添加环境变量/</id>
    <published>2019-07-20T11:06:59.000Z</published>
    <updated>2019-07-24T09:03:16.493Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p>当我试图去安装hping的时候，出现了一些些问题，明明已经安装，但是却不能使用，后来发现是环境变量没有配置上。<br><a id="more"></a></p><p>在mac下通过brew安装hping<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install hping</span><br></pre></td></tr></table></figure></p><p>查看已安装列表…找到如下一列<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew list</span><br><span class="line">.... ... .... hping ... .... ...</span><br></pre></td></tr></table></figure></p><p>然而,当我运行hping时…<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hping</span><br><span class="line">zsh: <span class="built_in">command</span> not found: hping</span><br></pre></td></tr></table></figure></p><p>再次查看安装信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew info hping</span><br><span class="line">hping: stable 3.20051105</span><br><span class="line">http://www.hping.org/</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/hping/3.20051105 (9 files, 196K) *</span><br><span class="line">  Built from <span class="built_in">source</span></span><br><span class="line">From: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/hping.rb</span><br></pre></td></tr></table></figure></p><p>emmm…得出结论，安装了hping却不能使用<br>将<code>/usr/local/sbin</code>添加到<code>$PATH</code>,<br>因为hping二进制文件安装在<code>/usr/local/sbin</code>中,而不是安装在<code>/usr/local/bin</code>中。</p><p><strong>解决方案</strong></p><p>在终端中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/sbin</span><br></pre></td></tr></table></figure></p><p>哦对了 等号之间不能有空格</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;当我试图去安装hping的时候，出现了一些些问题，明明已经安装，但是却不能使用，后来发现是环境变量没有配置上。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="https://annecoding.github.io/categories/Mac/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="hping" scheme="https://annecoding.github.io/tags/hping/"/>
    
      <category term="Mac" scheme="https://annecoding.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu修改IP地址</title>
    <link href="https://annecoding.github.io/2019/07/20/ubuntu%E4%BF%AE%E6%94%B9IP%E5%9C%B0%E5%9D%80/"/>
    <id>https://annecoding.github.io/2019/07/20/ubuntu修改IP地址/</id>
    <published>2019-07-20T10:59:03.000Z</published>
    <updated>2019-07-28T01:42:55.801Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p>ubuntu修改静态ip地址需要单独设置DNS，这个要注意一下哦。<br><a id="more"></a></p><h3 id="ubuntu修改ip地址"><a href="#ubuntu修改ip地址" class="headerlink" title="ubuntu修改ip地址"></a>ubuntu修改ip地址</h3><h4 id="ubuntu16-04修改IP地址"><a href="#ubuntu16-04修改IP地址" class="headerlink" title="ubuntu16.04修改IP地址"></a>ubuntu16.04修改IP地址</h4><p>1、修改网卡配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sudo  vi /etc/network/interfaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到其中以下几行进行修改</span></span><br><span class="line">auto ens123</span><br><span class="line">iface ens123 inet static</span><br><span class="line">        address 10.10.133.233</span><br><span class="line">        netmask 255.255.255.0</span><br><span class="line">        network 10.10.133.0</span><br><span class="line">        broadcast 10.10.133.255</span><br><span class="line">        gateway 10.10.133.254</span><br><span class="line">        <span class="comment"># dns-* options are implemented by the resolvconf package, if installed</span></span><br><span class="line">        dns-nameservers 8.8.8.8</span><br></pre></td></tr></table></figure><p>2、修改DNS配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi + /etc/resolvconf/resolv.conf.d/head</span><br><span class="line"><span class="comment"># 在文件最后添加一句话</span></span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>3、重启网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><h4 id="ubuntu18-04修改ip地址"><a href="#ubuntu18-04修改ip地址" class="headerlink" title="ubuntu18.04修改ip地址"></a>ubuntu18.04修改ip地址</h4><p>1、修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/netplan/50-cloud-init.yaml</span><br><span class="line"><span class="comment"># 修改以下内容</span></span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        eth0:</span><br><span class="line">            addresses:</span><br><span class="line">            - 192.168.15.72/20</span><br><span class="line">            gateway4: 192.168.12.2</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses:</span><br><span class="line">                - 223.5.5.5</span><br><span class="line">                search: []</span><br><span class="line">            optional: <span class="literal">true</span></span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p>2、使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netplan apply</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;ubuntu修改静态ip地址需要单独设置DNS，这个要注意一下哦。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://annecoding.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>linux系统扫描命令和安全防范笔记</title>
    <link href="https://annecoding.github.io/2019/07/20/linux%E7%B3%BB%E7%BB%9F%E6%89%AB%E6%8F%8F%E5%91%BD%E4%BB%A4%E5%92%8C%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83%E7%AC%94%E8%AE%B0/"/>
    <id>https://annecoding.github.io/2019/07/20/linux系统扫描命令和安全防范笔记/</id>
    <published>2019-07-20T09:21:31.000Z</published>
    <updated>2019-07-28T01:40:42.649Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>本文主要介绍了一些常用的网络扫描工具以及安全防范，了解更多命令的使用。<br><a id="more"></a></p><h3 id="linux系统扫描命令和安全防范笔记"><a href="#linux系统扫描命令和安全防范笔记" class="headerlink" title="linux系统扫描命令和安全防范笔记"></a><strong>linux系统扫描命令和安全防范笔记</strong></h3><p>通过网络入侵来窃取敏感信息</p><p>通过网络扫描获取运营商核心设备的管理权限</p><h3 id="网络入侵方式"><a href="#网络入侵方式" class="headerlink" title="网络入侵方式"></a><strong>网络入侵方式</strong></h3><p>踩点-网络扫描-差点-提权</p><p><strong>常用命令</strong></p><p>tracert/traceroute、namp、nc</p><h3 id="主机扫描命令fping"><a href="#主机扫描命令fping" class="headerlink" title="主机扫描命令fping"></a><strong>主机扫描命令fping</strong></h3><p>批量的给目标主机发送ping请求，测试主机的存活情况。</p><p>特点：并行发送，结果易读</p><p><strong>源码包编译过程</strong></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g54yozizhcj30yg0lign8.jpg" alt="image-20190719105646797"></p><p>fping编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget https://fping.org/dist/fping-4.2.tar.gz</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -xvf fping-4.2.tar.gz </span></span><br><span class="line">[root@localhost fping-4.2]<span class="comment"># ./configure &amp; make &amp; make install</span></span><br><span class="line">[root@localhost fping-4.2]<span class="comment"># fping -h  #查看帮助命令</span></span><br><span class="line">[root@localhost fping-4.2]<span class="comment"># fping -v</span></span><br><span class="line">fping: Version 4.2</span><br><span class="line">fping: comments to david@schweikert.ch</span><br></pre></td></tr></table></figure><h4 id="fping参数介绍"><a href="#fping参数介绍" class="headerlink" title="fping参数介绍"></a><strong>fping参数介绍</strong></h4><p>命令参数man、-h方式</p><p>常用参数：</p><p>-a 只显示出存活的主机(相反参数-u)</p><p>-l 循环ping</p><p>1、通过标准输入方式fping+IP1+IP2</p><p>-g 支持主机段的方式 192.168.1.1 192.168.1.255 192.168.1.0/24</p><p>2、通过读取一个文件中的IP内容</p><p>方式：fping -f filename</p><p>3、fping使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找存货的主机</span></span><br><span class="line">fping -a 10.10.163.233</span><br><span class="line"><span class="comment"># 可以查找某个网段内存活的主机</span></span><br><span class="line">fping  -g -a 10.10.163.1 10.10.163.254</span><br><span class="line"><span class="comment"># 查找某个网段内存活主机第二种写法</span></span><br><span class="line">fping -a -g 10.10.163.233/24</span><br></pre></td></tr></table></figure><h3 id="主机扫描命令hping"><a href="#主机扫描命令hping" class="headerlink" title="主机扫描命令hping"></a><strong>主机扫描命令hping</strong></h3><p>支持使用tcp/ip数据包组装、分析工具</p><p>linux下编译安装</p><p>如果遇到如下错误</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g556megt3vj30oi04et9c.jpg" alt="image-20190719153110732"></p><p>可通过安装下面库解决</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g556sceynmj30ji09274q.jpg" alt="image-20190719153652881"></p><p><a href="http://rpmfind.net/" target="_blank" rel="noopener">http://rpmfind.net/</a></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g556pk21f9j30xy082do7.jpg" alt="image-20190719153414670"></p><h4 id="hping常用参数"><a href="#hping常用参数" class="headerlink" title="hping常用参数"></a><strong>hping常用参数</strong></h4><p>1、对特定的目标发起tcp探测（规避运营商防火墙、主机等对icmp包屏蔽）</p><p>-p 端口tcp</p><p>-S 设置TCP模式SYN包</p><p>2、伪造来源IP，模拟Ddos攻击</p><p>-a 伪造IP地址</p><p>3、hping使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hping -p 22 -S 10.10.163.233</span><br><span class="line"></span><br><span class="line">sudo hping -p 22 -S 10.10.163.233 -a 10.10.163.235</span><br></pre></td></tr></table></figure><p> centos拒绝掉icmp包设置</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g56489gypsj30kg01mwei.jpg" alt="image-20190720105353473"></p><h3 id="路由扫描"><a href="#路由扫描" class="headerlink" title="路由扫描"></a><strong>路由扫描</strong></h3><p>作用：查询一个主机经过的路由的跳数、及数据延迟情况</p><p>常用工具：traceroute、mtr</p><p>mtr特点：能测出主机到每一个路由间的联通性。</p><p>traceroute连接原理。</p><p>linux下发送udp包（&gt;30000端口），windows发送icmp包。</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g564xl90vhj30pk0i23zb.jpg" alt="image-20190720111813791"></p><p>TTL，生存时间的值。发给第一跳，ttl-1=0，返回udp数据包。</p><p>扫描到几个路由器，发送几个ttl数据包。</p><h4 id="traceroute参数的使用"><a href="#traceroute参数的使用" class="headerlink" title="traceroute参数的使用"></a><strong>traceroute参数的使用</strong></h4><p> linux一般默认有，如果没有安装方式</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5657hwwdpj30mi03gjru.jpg" alt="image-20190720112746947"></p><p>1、默认使用的是udp协议(30000以上的端口)</p><p>2、支持使用TCP协议 -T(发送tcp协议) -p(基于tcp什么端口)</p><p>3、使用ICMP协议介绍 -I </p><p>4、traceroute使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">traceroute www.baidu.com</span><br><span class="line"><span class="comment"># -n 去掉解析</span></span><br><span class="line">traceroute -n www.baidu.com </span><br><span class="line"><span class="comment"># 使用icmp，window默认使用</span></span><br><span class="line">traceroute -In  www.imooc.com</span><br><span class="line"><span class="comment"># 使用tcp才能检测到最终跳数(一般会屏蔽icmp协议)</span></span><br><span class="line">traceroute -T -p 80 -n www.imooc.com</span><br></pre></td></tr></table></figure><h4 id="mtr使用"><a href="#mtr使用" class="headerlink" title="mtr使用"></a>mtr使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install mtr -y</span><br><span class="line"><span class="comment"># 使用，原理和traceroute一样，可以看到到哪一跳丢包率更为严重</span></span><br><span class="line">mtr www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="批量主机扫描"><a href="#批量主机扫描" class="headerlink" title="批量主机扫描"></a><strong>批量主机扫描</strong></h3><p>目的：</p><p>1、批量主机存活扫描</p><p>2、针对主机服务扫描</p><p>作用：</p><p>1、能快捷的获取主机的存活状态</p><p>2、能更加细致、只能获取主机服务侦查情况</p><p><strong>典型命令</strong></p><p>1、nmap 基于端口扫描，特别强大</p><p>2、ncat 瑞士军刀</p><h4 id="nmap使用"><a href="#nmap使用" class="headerlink" title="nmap使用"></a><strong>nmap使用</strong></h4><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56dmqgtktj30v60f8dhb.jpg" alt="image-20190720161913675"></p><p>tcp半开放，不建立完整的tcp，未建立完整的三次握手。</p><p>1、主机存活扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫描主机存活状态,s检测用什么协议做侦测</span></span><br><span class="line">namp -sP 10.10.140.0/24</span><br></pre></td></tr></table></figure><p>2、主机端口开放扫描，默认扫描范围1-1024，以及一些常用的服务端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namp -sS 10.10.10.163.233</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56dzj5o2kj30mq0ae400.jpg" alt="image-20190720163117782"></p><p>3、半开放指定端口扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namp -sS -p 0-30000 10.10.163.233</span><br></pre></td></tr></table></figure><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g56e6peru2j30nw0a0t9w.jpg" alt="image-20190720163823202"></p><p>4、全开放连接参数，建立一次全握手，时间长</p><p>建立全握手，可以模拟用户的真实操作请求，需要服务端能检测到相关的日志，打印出相关记录信息。</p><p>建议日常使用半扫描模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -p 0-30000 10.10.163.233</span><br></pre></td></tr></table></figure><p> 5、udp协议扫描方式</p><p>扫描udp，响应比较慢、可能特别慢。会限制icmp不可达返回的次数。不建议使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sU 10.10.163.233</span><br></pre></td></tr></table></figure><h4 id="ncat使用"><a href="#ncat使用" class="headerlink" title="ncat使用"></a><strong>ncat使用</strong></h4><p>查看某个路由开放哪些端口80 23</p><p>通过shell交互更改数据 ，可进行任意操作</p><p>nc -lvp 2005 监听端口</p><p><strong>nc好处</strong></p><p>1、不会频繁通过界面登录留下痕迹</p><p>2、登录非常方便</p><p>3、不会被侦测设备侦测到</p><p>-w 设置的超市时间</p><p>-z 一个输入输出模式</p><p>-v 显示命令执行过程</p><p>1、基于tcp协议(默认)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看22端口开放情况</span></span><br><span class="line">nc -zv 10.10.163.233 22</span><br><span class="line"><span class="comment"># 查看一些端口开放 超时2s</span></span><br><span class="line">nc -zv -w2 10.10.163.233 1-50</span><br></pre></td></tr></table></figure><p>2、基于udp协议 -u  </p><p>回应时间长，不建议使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看一些端口开放 超时2s</span></span><br><span class="line">nc -zv -u -w2 10.10.163.233 1-50</span><br></pre></td></tr></table></figure><h3 id="预防策略"><a href="#预防策略" class="headerlink" title="预防策略"></a><strong>预防策略</strong></h3><p>在linux进行防御。</p><p>常见攻击方法：</p><p>1、SYN攻击</p><p>2、DDoS攻击</p><p>3、恶意扫描</p><p>什么是SYN攻击？</p><p>利用TCP协议缺陷进行，导致系统服务停止响应，网络带宽跑满或者响应缓慢。</p><p>什么是DDoS攻击？</p><p>分布式拒绝访问服务攻击。</p><p>正常服务在同一时间接到了很多个类似于正常服务的请求，也有可能是完全正常的请求，导致服务响应不过来。</p><p>SYN攻击一般会伴随着DDoS攻击进行</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g56eutfdydj30qq0ikgmc.jpg" alt="image-20190720170129641"></p><p>SYN攻击原理，eg可以利用hping伪造源ip，发送给假的主机，得不到第三次请求。目标机器不断发送重试，不停回应包，就会导致网络带宽占满。</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56f1z4xe1j30og0iuq3m.jpg" alt="image-20190720170357218"></p><ul><li><p>减少重试次数</p></li><li><p>可以增加backlog</p></li><li><p>禁止三次握手，SYN cookies技术</p></li></ul><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56f1r9lamj30m40c40x8.jpg" alt="image-20190720170816652"></p><p>linux下其他预防策略</p><p>1、防火墙上面做相关设置</p><p>2、linux下面可以关闭icmp协议请求</p><p>3、通过iptables防止扫描</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56f53ibkej30xc0bqmyd.jpg" alt="image-20190720171122849"></p><blockquote><p>学习笔记整理自慕课网以下课程:<br>linux系统扫描命令和安全防范笔记</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;本文主要介绍了一些常用的网络扫描工具以及安全防范，了解更多命令的使用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="hping" scheme="https://annecoding.github.io/tags/hping/"/>
    
      <category term="traceroute" scheme="https://annecoding.github.io/tags/traceroute/"/>
    
      <category term="Nmap" scheme="https://annecoding.github.io/tags/Nmap/"/>
    
      <category term="Ncap" scheme="https://annecoding.github.io/tags/Ncap/"/>
    
      <category term="fping" scheme="https://annecoding.github.io/tags/fping/"/>
    
  </entry>
  
  <entry>
    <title>linux中玩转sed</title>
    <link href="https://annecoding.github.io/2019/06/11/linux%E4%B8%AD%E7%8E%A9%E8%BD%ACsed/"/>
    <id>https://annecoding.github.io/2019/06/11/linux中玩转sed/</id>
    <published>2019-06-11T10:51:19.000Z</published>
    <updated>2019-08-04T04:52:39.649Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p><code>sed</code>命令应用广泛，使用简单，是快速文本处理的利器。它其实没多少技巧，背诵、使用是最合适的学习渠道，属于硬技能。但它又很复杂，因为高级功能太多。本篇不去关注sed的高级功能，仅对常用的一些操作，进行说明。<br><a id="more"></a></p><h3 id="sed使用"><a href="#sed使用" class="headerlink" title="sed使用"></a>sed使用</h3><p>sed编辑器被称作流编辑器，它和vim这种的交互式文本编辑器不同，是根据命令来处理数据流中的数据。会执行下列操作：</p><ul><li>一次从输入中读取一行数据（重复该操作直到全部行被读取完）</li><li>根据编辑器命令匹配数据</li><li>按照命令修改数据流中的数据</li><li>将新数据输出到STDOUT(标准输出)</li></ul><p>其中sed命令的可以从命令行中输入，也可以从一个命令文件中读取。</p><p><strong>sed</strong>命令的格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用格式</span></span><br><span class="line">$ sed options script file</span><br><span class="line"><span class="comment"># 添加script中指定的命令</span></span><br><span class="line">$ sed -e script </span><br><span class="line"><span class="comment"># 添加file中指定的命令</span></span><br><span class="line">$ sed -f file </span><br><span class="line"><span class="comment"># 不产生命令输出，使用print命令来完成输出</span></span><br><span class="line"><span class="comment"># -n 这个参数是--quiet或者--silent的意思。表明忽略执行过程的输出，只输出我们的结果即可。</span></span><br><span class="line">$ sed -n</span><br></pre></td></tr></table></figure><h3 id="替换命令s"><a href="#替换命令s" class="headerlink" title="替换命令s"></a>替换命令s</h3><p><code>s</code>命令会用斜线间指定的<strong>第二个</strong>文本字符串来<strong>替换第一个</strong>文本字符串模式。</p><p>1.用big test替换了test。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"This is a test"</span> | sed <span class="string">'s/test/big test/'</span></span><br><span class="line">This is a big <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>2.用<strong>cat</strong>替换整个文件中的<strong>dog</strong></p><p>示例文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat data1.txt</span><br><span class="line">The quick brown fox jumps over the lazy dog.</span><br><span class="line">The quick brown fox jumps over the lazy dog.</span><br><span class="line">The quick brown fox jumps over the lazy dog.</span><br><span class="line">The quick brown fox jumps over the lazy dog.</span><br></pre></td></tr></table></figure><p>使用sed命令进行替换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">'s/dog/cat/'</span> data1.txt</span><br><span class="line">The quick brown fox jumps over the lazy cat.</span><br><span class="line">The quick brown fox jumps over the lazy cat.</span><br><span class="line">The quick brown fox jumps over the lazy cat.</span><br><span class="line">The quick brown fox jumps over the lazy cat.</span><br></pre></td></tr></table></figure><p>🌟 重要的是，要记住，<strong>sed编辑器并不会修改文本文件的数据</strong>。它只会将修改后的数据发送到STDOUT。<strong>如果你查看原来的文本文件，它仍然保留着原始数据。</strong></p><p>3.在命令行使用多个编辑器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed -e <span class="string">'s/brown/green/; s/dog/cat/'</span> data1.txt</span><br><span class="line">The quick green fox jumps over the lazy cat.</span><br><span class="line">The quick green fox jumps over the lazy cat.</span><br><span class="line">The quick green fox jumps over the lazy cat.</span><br><span class="line">The quick green fox jumps over the lazy cat.</span><br></pre></td></tr></table></figure><p>4.从文件中读取编辑器命令</p><p>如果有大量要处理的sed命令，那么将它们放进一个单独的文件中通常会更方便一些。<br>可以在sed命令中用<code>-f</code>选项来指定文件。</p><p>示例sed编辑器脚本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat script1.sed</span><br><span class="line">s/brown/green/</span><br><span class="line">s/fox/elephant/</span><br><span class="line">s/dog/cat/</span><br></pre></td></tr></table></figure><p>执行sed编辑器脚本文件，按照脚本文件替换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed -f script1.sed data1.txt</span><br><span class="line">The quick green elephant jumps over the lazy cat.</span><br><span class="line">The quick green elephant jumps over the lazy cat.</span><br><span class="line">The quick green elephant jumps over the lazy cat.</span><br><span class="line">The quick green elephant jumps over the lazy cat.</span><br></pre></td></tr></table></figure><h3 id="更多替换选项"><a href="#更多替换选项" class="headerlink" title="更多替换选项"></a>更多替换选项</h3><h4 id="替换标记"><a href="#替换标记" class="headerlink" title="替换标记"></a>替换标记</h4><p>替换命令在替换多行中的文本时能正常工作，但默认情况下它只替换每行中出现的第一处。要让替换命令能够替换一行中不同地方出现的文本必须使用替换标记（substitution flag）。</p><p>替换标记会在替换命令字符串之后设置。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s/pattern/replacement/flags</span><br></pre></td></tr></table></figure><p>有4种可用的替换标记：</p><ul><li>数字，表明新文本将替换第几处模式匹配的地方；</li><li>g，表明新文本将会替换所有匹配的文本；</li><li>p，表明原先行的内容要打印出来；</li><li>w file，将替换的结果写到文件中。</li></ul><p>示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed编辑器只替换每行中第二次出现的匹配模式</span></span><br><span class="line">$ sed <span class="string">'s/test/trial/2'</span> data4.txt</span><br><span class="line">This is a <span class="built_in">test</span> of the trial script.</span><br><span class="line">This is the second <span class="built_in">test</span> of the trial script. </span><br><span class="line"><span class="comment"># g替换标记使你能替换文本中匹配模式所匹配的每处地方</span></span><br><span class="line">$ sed <span class="string">'s/test/trial/g'</span> data4.txt</span><br><span class="line">This is a trial of the trial script.</span><br><span class="line">This is the second trial of the trial script. </span><br><span class="line"><span class="comment"># p替换标记会打印与替换命令中指定的模式匹配的行。-n选项将禁止sed编辑器输出。</span></span><br><span class="line"><span class="comment"># p -n只输出被替换命令修改过的行。</span></span><br><span class="line">$ cat data5.txt</span><br><span class="line">This is a <span class="built_in">test</span> line.</span><br><span class="line">This is a different line.</span><br><span class="line">$ sed -n <span class="string">'s/test/trial/p'</span> data5.txt</span><br><span class="line">This is a trial line. </span><br><span class="line"><span class="comment"># w替换标记会产生同样的输出，不过会将输出保存到指定文件中。</span></span><br><span class="line">$ sed <span class="string">'s/test/trial/w test.txt'</span> data5.txt</span><br><span class="line">This is a trial line.</span><br><span class="line">This is a different line.</span><br><span class="line">$ cat test.txt</span><br><span class="line">This is a trial line.</span><br></pre></td></tr></table></figure><p>🌟  sed并没有对文件内容进行改变，因此如果要写回文件，可以使用重定向。</p><p>1.通过重定向写入新文件，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">"s/dog/cat/g"</span> data1.txt &gt; data1new.txt</span><br></pre></td></tr></table></figure><p>或者使用<code>-i</code>参数直接修改文件内容，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">"s/dog/cat/g"</span> data1.txt</span><br></pre></td></tr></table></figure><p>2.在每一行前面添加内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">'s/^/#/g'</span> data1.txt</span><br><span class="line"><span class="comment">#the quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment">#the quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment">#the quick brown fox jumps over the lazy dog.</span></span><br><span class="line"><span class="comment">#the quick brown fox jumps over the lazy dog.</span></span><br></pre></td></tr></table></figure><p>3.在每一行最后添加内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">'s/$/---/g'</span> data1.txt</span><br><span class="line">the quick brown fox jumps over the lazy dog.---</span><br><span class="line">the quick brown fox jumps over the lazy dog.---</span><br><span class="line">the quick brown fox jumps over the lazy dog.---</span><br><span class="line">the quick brown fox jumps over the lazy dog.---</span><br></pre></td></tr></table></figure><p>顺便介绍一下正则表达式的一些最基本的东西：</p><ul><li><code>^</code> 表示一行的开头。如：<code>/^#/</code> 以#开头的匹配。</li><li><code>$</code> 表示一行的结尾。如：<code>/}$/</code> 以}结尾的匹配。</li><li><code>\&lt;</code> 表示词首。 如：<code>\&lt;abc</code> 表示以 abc 为首的詞。</li><li><code>\&gt;</code> 表示词尾。 如：<code>abc\&gt;</code> 表示以 abc 結尾的詞。</li><li><code>.</code> 通配符，表示几乎任意字符，除了换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号 … 中的每个点，此处省略了无数个字（什么情况都可能发生）。</li><li><code>?</code>表示某个字符出现了0次或1次。</li><li><code>*</code>表示某个字符出现了0次或多次。</li><li><code>+</code>表示某个字符出现了1次或多次。</li><li><code>[ ]</code> 字符集合。 如：<code>[abc]</code> 表示匹配a或b或c，还有 <code>[a-zA-Z]</code> 表示匹配所有的26个字符。如果其中有^表示反，如 <code>[^a]</code> 表示非a的字符。还有<code>[0-9]</code> 匹配括号中的任何一个字符。</li><li><code>{m}</code>前面的匹配重复m次，<code>{m,n}</code> 前面的匹配重复m到n次</li></ul><p>💡 强大到无往不利的正则表达式简单示例，比如去除下面html中的tags:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;This&lt;/b&gt; is what &lt;span style=<span class="string">"text-decoration: underline;"</span>&gt;I&lt;/span&gt; meant. Understand?</span><br></pre></td></tr></table></figure></p><p>sed命令实现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你这样搞的话，就会有问题，贪婪模式，匹配(&lt;)到(&gt;)之间的所有内容</span></span><br><span class="line">$ sed <span class="string">'s/&lt;.*&gt;//g'</span> html.txt</span><br><span class="line"> meant. Understand</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 要解决上面的那个问题，就得像下面这样。</span></span><br><span class="line"><span class="comment"># 其中的'[^&gt;]' 指定了除了&gt;的字符重复0次或多次。</span></span><br><span class="line">$ sed <span class="string">'s/&lt;[^&gt;]*&gt;//g'</span> html.txt</span><br><span class="line">This is what I meant. Understand?</span><br></pre></td></tr></table></figure></p><p>💡 <strong>其他有趣示例</strong></p><p>1.输出长度不小于50个字符的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">'/^.&#123;50&#125;/p'</span></span><br></pre></td></tr></table></figure><p>2.统计文件中有每个单词出现了多少次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">'s/ /\n/g'</span> file | sort | uniq -c</span><br></pre></td></tr></table></figure><p>3.查找目录中的py文件，删掉所有行级注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find ./ -name <span class="string">"*.py"</span> | xargs sed  -i.bak <span class="string">'/^[ ]*#/d'</span></span><br></pre></td></tr></table></figure><p>4.查看第5-7行和10-13行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n -e <span class="string">'5,7p'</span> -e <span class="string">'10,13p'</span> file</span><br></pre></td></tr></table></figure><p>5.仅输出ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip route show | sed -n <span class="string">'/src/p'</span> | sed -e <span class="string">'s/  */ /g'</span> | cut -d<span class="string">' '</span> -f9</span><br></pre></td></tr></table></figure><h3 id="使用地址"><a href="#使用地址" class="headerlink" title="使用地址"></a>使用地址</h3><p>默认情况下，在sed编辑器中使用的命令会作用于文本数据的所有行。如果只想将命令作用于特定行或某些行，则必须用行寻址（line addressing）。</p><h4 id="数字方式寻址"><a href="#数字方式寻址" class="headerlink" title="数字方式寻址"></a>数字方式寻址</h4><p>sed编辑器会将文本流中的第一行编号为1，然后继续按顺序为接下来的行分配行号。</p><p>1.只修改第二行的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">'2s/dog/cat/'</span> data1.txt</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line">The quick brown fox jumps over the lazy cat</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure><p>2.修改第二行和第三行，使用行地址区间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">'2,3s/dog/cat/'</span> data1.txt</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line">The quick brown fox jumps over the lazy cat</span><br><span class="line">The quick brown fox jumps over the lazy cat</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure><p>3.也可以匹配从文本中某行开始到结束的所有行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">'2,$s/dog/cat/'</span> data1.txt</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line">The quick brown fox jumps over the lazy cat</span><br><span class="line">The quick brown fox jumps over the lazy cat</span><br><span class="line">The quick brown fox jumps over the lazy cat</span><br></pre></td></tr></table></figure><h4 id="使用文本过滤器"><a href="#使用文本过滤器" class="headerlink" title="使用文本过滤器"></a>使用文本过滤器</h4><p>sed编辑器允许指定文本模式来过滤出命令要作用的行。格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/pattern/<span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>必须用正斜线将要指定的pattern封起来。sed编辑器会将该命令作用到包含指定文本模式的行上。</p><p>举个栗子🌰来说明一下吧，在<code>/etc/passwd</code>中只修改用户Samantha的默认shell，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ grep Samantha /etc/passwd</span><br><span class="line">Samantha:x:502:502::/home/Samantha:/bin/bash</span><br><span class="line">$ sed <span class="string">'/Samantha/s/bash/csh/'</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">[...]</span><br><span class="line">Christine:x:501:501:Christine B:/home/Christine:/bin/bash</span><br><span class="line">Samantha:x:502:502::/home/Samantha:/bin/csh</span><br><span class="line">Timothy:x:503:503::/home/Timothy:/bin/bash</span><br></pre></td></tr></table></figure><h3 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h3><p>使用删除命令d对文本进行删除操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有文本</span></span><br><span class="line">sed <span class="string">'d'</span> data1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除单行</span></span><br><span class="line">sed <span class="string">'2d'</span> data1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除行区间[2,3]</span></span><br><span class="line">sed <span class="string">'2,3d'</span> data1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除行区间[2,endline]</span></span><br><span class="line">sed <span class="string">'2,$d'</span> data1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除匹配文本aa的行</span></span><br><span class="line">sed <span class="string">'/aa/d'</span> data1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除两个匹配文本之间的文本 匹配到1和3的行之间的文本全部被删除</span></span><br><span class="line">sed <span class="string">'/1/,/3/d'</span> data1.txt</span><br></pre></td></tr></table></figure><h3 id="插入、附加文本"><a href="#插入、附加文本" class="headerlink" title="插入、附加文本"></a>插入、附加文本</h3><p>1.插入命令<code>i</code>在指定行前增加新行</p><p>2.附加命令<code>a</code>在指定行后增加新行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追加</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"Test Line 2"</span> | sed <span class="string">'a\Test Line 1'</span></span><br><span class="line">Test Line 2</span><br><span class="line">Test Line 1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"Test Line 2"</span> | sed <span class="string">'i\Test Line 1'</span></span><br><span class="line">Test Line 1</span><br><span class="line">Test Line 2</span><br></pre></td></tr></table></figure><h3 id="修改行"><a href="#修改行" class="headerlink" title="修改行"></a>修改行</h3><p>使用<code>c</code>命令来修改一行数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改第三行文本</span></span><br><span class="line">$ sed <span class="string">'3c\</span></span><br><span class="line"><span class="string">This is a changed line of text.'</span> data1.txt</span><br><span class="line">the quick brown fox jumps over the lazy dog.</span><br><span class="line">the quick brown fox jumps over the lazy dog.</span><br><span class="line">This is a changed line of text.</span><br><span class="line">the quick brown fox jumps over the lazy dog.</span><br></pre></td></tr></table></figure><h3 id="转换命令"><a href="#转换命令" class="headerlink" title="转换命令"></a>转换命令</h3><p>命令格式<code>sed &#39;y/inchar/outchar&#39;</code></p><p>将inchar中的字符一一对应地转换成outchar的字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"This 1 is a test of 1 try."</span> | sed <span class="string">'y/123/456/'</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">This 4 is a <span class="built_in">test</span> of 4 try.</span><br></pre></td></tr></table></figure><p>💡 如你在输出中看到的，inchars模式中指定字符的<strong>每个实例都会被替换成outchars模式中</strong><br><strong>相同位置的那个字符。</strong></p><h3 id="打印命令"><a href="#打印命令" class="headerlink" title="打印命令"></a>打印命令</h3><p>1.打印数据文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"this is a test"</span> | sed <span class="string">'p'</span></span><br><span class="line">this is a <span class="built_in">test</span></span><br><span class="line">this is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>2.打印包含匹配文本模式的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat data6.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br><span class="line">This is line number 4.</span><br><span class="line"><span class="comment"># 模式匹配</span></span><br><span class="line">$ sed -n <span class="string">'/number 3/p'</span> data6.txt</span><br><span class="line">This is line number 3. </span><br><span class="line"><span class="comment"># 从一个模式到另一个模式</span></span><br><span class="line">$ sed -n <span class="string">'/number 2/,/number 3/p'</span> data6.txt</span><br><span class="line">this is line number 2.</span><br><span class="line">this is line number 3.</span><br></pre></td></tr></table></figure><p>3.快速打印数据流中的某些行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">'2,3p'</span> data6.txt</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br></pre></td></tr></table></figure><p>4.从第一行打印匹配3成功的那一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">'1,/3/p'</span> data6.txt</span><br><span class="line">this is line number 1.</span><br><span class="line">this is line number 2.</span><br><span class="line">this is line number 3.</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：<br><a href="https://coolshell.cn/articles/9104.html" target="_blank" rel="noopener">SED 简明教程</a><br><a href="https://juejin.im/post/5ce5190b5188252dbb08baa8" target="_blank" rel="noopener">Linux生产环境上，最常用的一套“Sed“技巧</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;&lt;code&gt;sed&lt;/code&gt;命令应用广泛，使用简单，是快速文本处理的利器。它其实没多少技巧，背诵、使用是最合适的学习渠道，属于硬技能。但它又很复杂，因为高级功能太多。本篇不去关注sed的高级功能，仅对常用的一些操作，进行说明。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="sed" scheme="https://annecoding.github.io/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title>linux中玩转awk</title>
    <link href="https://annecoding.github.io/2019/06/10/linux%E4%B8%AD%E7%8E%A9%E8%BD%ACawk/"/>
    <id>https://annecoding.github.io/2019/06/10/linux中玩转awk/</id>
    <published>2019-06-10T01:22:36.000Z</published>
    <updated>2019-08-03T01:14:51.732Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p><strong>awk</strong>其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。</p><a id="more"></a><h3 id="awk简明教程"><a href="#awk简明教程" class="headerlink" title="awk简明教程"></a>awk简明教程</h3><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h3><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑（擅长取行），awk（擅长取列）在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p><p><strong>awk</strong>简单来讲：<strong>取文件中的某列数据</strong>。</p><p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line">awk <span class="string">'&#123;pattern + action&#125;'</span> &#123;filenames&#125;</span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line">awk [可选的命令行选项] <span class="string">'BEGIN&#123;命令 &#125; pattern&#123; 命令 &#125; END&#123; 命令 &#125;'</span>  文件名</span><br></pre></td></tr></table></figure><p>关于第二种方式，解释如下：</p><p>1.<strong>BEGIN 开头部分</strong>，可选的。用来设置一些参数，输出一些表头，定义一些变量等。上面的命令仅打印了一行信息而已。</p><p>2.<strong>END 结尾部分</strong>，可选的。用来计算一些汇总逻辑，或者输出这些内容。上面的命令，使用简单的for循环，输出了数组rt中的内容。</p><p>3.<strong>Pattern 匹配部分</strong>，依然可选。用来匹配一些需要处理的行。上面的命令，只匹配tcp开头的行，其他的不进入处理。</p><p>4.<strong>Action 模块</strong>。主要逻辑体，按行处理，统计打印，都可以。</p><h3 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h3><p>1.首先保存一个示例文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat netstat </span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2036/sshd           </span><br><span class="line">tcp6       0      0 :::7500                 :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::7000                 :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::443                  :::*                    LISTEN      17767/./frps</span><br></pre></td></tr></table></figure><p>2.输出第一列和第四列</p><ul><li>其中<strong>单引号</strong>中被大括号括着的就是<strong>awk语句</strong>，<strong>只能被单引号包含</strong>。</li><li><code>$1..$n</code>表示<strong>第几列</strong>，<code>$0</code>表示<strong>整行</strong>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'&#123;print $1,$4&#125;'</span> netstat </span><br><span class="line">Active (only</span><br><span class="line">Proto Local</span><br><span class="line">tcp 0.0.0.0:22</span><br><span class="line">tcp6 :::7500</span><br><span class="line">tcp6 :::80</span><br><span class="line">tcp6 :::7000</span><br><span class="line">tcp6 :::443</span><br><span class="line"></span><br><span class="line">$ cat /etc/passwd |awk  -F <span class="string">':'</span>  <span class="string">'&#123;print $1&#125;'</span>  </span><br><span class="line">root</span><br><span class="line">daemon</span><br><span class="line">bin</span><br><span class="line">sys</span><br></pre></td></tr></table></figure><h3 id="过滤记录"><a href="#过滤记录" class="headerlink" title="过滤记录"></a>过滤记录</h3><p>1.awk可以对其中的某些字段进行判断，通过与或非连接。awk 中的比较运算符用于比较字符串和或者数值，包括以下类型：</p><ul><li><code>&gt;</code> – 大于</li><li><code>&lt;</code> – 小于</li><li><code>&gt;=</code> – 大于等于</li><li><code>&lt;=</code> – 小于等于</li><li><code>==</code> – 等于</li><li><code>!=</code> – 不等于</li><li><code>some_value ~ / pattern/</code> – 如果 some_value 匹配模式 pattern，则返回 true</li><li><code>some_value !~ / pattern/</code> – 如果 some_value 不匹配模式 pattern，则返回 true</li></ul><p>如以下常用示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'$1=="tcp" &amp;&amp; $6=="LISTEN" '</span> netstat  </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2036/sshd   </span><br><span class="line"><span class="comment"># 需要表头的话，可以引入内建变量NR</span></span><br><span class="line">$ awk <span class="string">'$1=="tcp" &amp;&amp; $6=="LISTEN" || NR==2 '</span> netstat  </span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2036/sshd </span><br><span class="line"><span class="comment"># NR也可以用来打印行号</span></span><br><span class="line">$ awk <span class="string">'$1=="tcp6" &#123; print NR,$0 &#125;'</span> netstat  </span><br><span class="line">4 tcp6       0      0 :::7500                 :::*                    LISTEN      17767/./frps        </span><br><span class="line">5 tcp6       0      0 :::80                   :::*                    LISTEN      17767/./frps        </span><br><span class="line">6 tcp6       0      0 :::7000                 :::*                    LISTEN      17767/./frps        </span><br><span class="line">7 tcp6       0      0 :::443                  :::*                    LISTEN      17767/./frps</span><br></pre></td></tr></table></figure><h3 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h3><p>程序已经定义好的变量，可以直接来使用，以下常见的变量。</p><table><thead><tr><th style="text-align:left">变量</th><th>释义</th></tr></thead><tbody><tr><td style="text-align:left"><code>$0</code></td><td>当前记录（这个变量中存放着整个行的内容）</td></tr><tr><td style="text-align:left"><code>$1~$n</code></td><td>当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td style="text-align:left"><code>FS</code></td><td>输入字段分隔符 默认是空格或Tab</td></tr><tr><td style="text-align:left"><code>NF</code></td><td>当前记录中的字段个数，就是有多少列</td></tr><tr><td style="text-align:left"><code>NR</code></td><td>已经读出的记录数，就是行号，从1开始，如果有多个文件话，不断累加。</td></tr><tr><td style="text-align:left"><code>FNR</code></td><td>当前记录数，与NR不同的是，这个值会是各个文件自己的行号</td></tr><tr><td style="text-align:left"><code>RS</code></td><td>输入的记录分隔符， 默认为换行符</td></tr><tr><td style="text-align:left"><code>OFS</code></td><td>输出字段分隔符， 默认也是空格</td></tr><tr><td style="text-align:left"><code>ORS</code></td><td>输出的记录分隔符，默认为换行符</td></tr><tr><td style="text-align:left"><code>FILENAME</code></td><td>当前输入文件的名字</td></tr></tbody></table><p>❈ ❈ ❈   <strong>一般的开发语言，数组下标是以0开始的，但awk的列$是以1开始的，而0指的是原始字符串。</strong></p><p>1.输出表头、行号及特定列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用内建变量NR、FNR输出行号以及表头</span></span><br><span class="line">$ awk <span class="string">'$3==0 &amp;&amp; $6=="LISTEN" || NR==2 &#123;print NR,FNR,$1,$3,$6&#125;'</span> netstat</span><br><span class="line">2 2 Proto Send-Q Foreign</span><br><span class="line">3 3 tcp 0 LISTEN</span><br><span class="line">4 4 tcp6 0 LISTEN</span><br><span class="line">5 5 tcp6 0 LISTEN</span><br><span class="line">6 6 tcp6 0 LISTEN</span><br><span class="line">7 7 tcp6 0 LISTEN</span><br></pre></td></tr></table></figure><p>2.使用分隔符来输出特定的行或者列，下面👇两个命令等价：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'BEGIN&#123;FS=":"&#125; &#123;print $1, $7&#125;'</span> /etc/passwd | head -n 4</span><br><span class="line">root /bin/bash</span><br><span class="line">bin /sbin/nologin</span><br><span class="line">daemon /sbin/nologin</span><br><span class="line">adm /sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># -F指定域分隔符为':'</span></span><br><span class="line">$ cat /etc/passwd |awk  -F <span class="string">':'</span>  <span class="string">'&#123;print $1"\t"$7&#125;'</span> | head -n 4</span><br><span class="line">root    /bin/bash</span><br><span class="line">bin     /sbin/nologin</span><br><span class="line">daemon  /sbin/nologin</span><br><span class="line">adm     /sbin/nologin</span><br></pre></td></tr></table></figure><p>❈ ❈ ❈  如果要是用多个分隔符，可以使用下面方式来指定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">'[;:]'</span></span><br></pre></td></tr></table></figure><p>3.自定义以<code>\t</code>作为分隔符输出的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F: <span class="string">'&#123;print $1,$7&#125;'</span> OFS=<span class="string">"\t"</span> /etc/passwd | head -n 4</span><br><span class="line">root    /bin/bash</span><br><span class="line">bin     /sbin/nologin</span><br><span class="line">daemon  /sbin/nologin</span><br><span class="line">adm     /sbin/nologin</span><br></pre></td></tr></table></figure><h3 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h3><p>1.像<strong>grep</strong>一样匹配相关字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只匹配80的字符</span></span><br><span class="line">$ awk <span class="string">'/80/'</span> netstat</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      17767/./frps  </span><br><span class="line"><span class="comment"># 匹配80、或者7000、或者tcp6的相关字符</span></span><br><span class="line">$ awk <span class="string">'/80|7000|tcp6/'</span> netstat  </span><br><span class="line">tcp6       0      0 :::7500                 :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::7000                 :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::443                  :::*                    LISTEN      17767/./frps</span><br></pre></td></tr></table></figure><p>2.精确的匹配某个字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $4匹配第四列的数据</span></span><br><span class="line">$ awk <span class="string">'$4 ~/80|7000/ &#123;print $0&#125;'</span> netstat </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::7000                 :::*                    LISTEN      17767/./frps   </span><br><span class="line"><span class="comment"># 搜索包含System关键字的行并输出</span></span><br><span class="line">$ cat -n /etc/passwd | gawk -F: <span class="string">'/System/&#123;print $1" "$5&#125;'</span></span><br><span class="line">    17  dbus System message bus</span><br></pre></td></tr></table></figure><p> ❈ ❈ ❈  <strong>其实 <code>~</code>表示模式开始。<code>/ /</code>中是模式。这就是一个正则表达式的匹配。</strong></p><p>对此模式取反的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串匹配取反</span></span><br><span class="line">$ awk <span class="string">'!/80/'</span> netstat                      </span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2036/sshd           </span><br><span class="line">tcp6       0      0 :::7500                 :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::7000                 :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::443                  :::*                    LISTEN      17767/./frps </span><br><span class="line"><span class="comment"># 精确匹配取反</span></span><br><span class="line">$ awk <span class="string">'$4 !~/80|7000/ &#123;print $0&#125;'</span> netstat    </span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2036/sshd           </span><br><span class="line">tcp6       0      0 :::7500                 :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::443                  :::*                    LISTEN      17767/./frps</span><br></pre></td></tr></table></figure><h3 id="拆分文件"><a href="#拆分文件" class="headerlink" title="拆分文件"></a>拆分文件</h3><p>1.指定某列为分类符，使用<strong>重定向</strong>就可以导出到不同的文件中，例如下列语句通过第1列进行分割：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照第1列拆分文件，第一列有tcp、tcp6两种类型</span></span><br><span class="line"><span class="comment"># 所以按照类型命名，当前目录下会多两个文件</span></span><br><span class="line">$ awk <span class="string">'NR!=2&#123;print &gt; $1&#125;'</span> netstat  </span><br><span class="line">$ cat tcp</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2036/sshd           </span><br><span class="line">$ ls</span><br><span class="line">netstat  tcp  tcp6</span><br></pre></td></tr></table></figure><p>2.也可以把<strong>指定的列</strong>追加<code>&gt;&gt;</code>到文件，追加不会覆盖源文件，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'NR!=1&#123;print $4,$7 &gt;&gt; $1&#125;'</span> netstat</span><br><span class="line">$ cat tcp</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2036/sshd           </span><br><span class="line">0.0.0.0:22 2036/sshd</span><br></pre></td></tr></table></figure><p>3.也可以使用复杂的表达式（例如if-else-if语句，awk是个脚本解释器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'NR!=1&#123;if($4 ~ /80|443/) print &gt; "1.txt";         </span></span><br><span class="line"><span class="string">else if($4 ~/7000/) print &gt; "2.txt";</span></span><br><span class="line"><span class="string">else print &gt; "3.txt" &#125;'</span> netstat</span><br><span class="line">$ ls ?.txt</span><br><span class="line">1.txt  2.txt  3.txt    </span><br><span class="line">$ cat 1.txt</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      17767/./frps        </span><br><span class="line">tcp6       0      0 :::443                  :::*                    LISTEN      17767/./frps </span><br><span class="line">$ cat 2.txt</span><br><span class="line">tcp6       0      0 :::7000                 :::*                    LISTEN      17767/./frps </span><br><span class="line"><span class="comment"># 其中NR!=1，不取第一行数据</span></span><br><span class="line"><span class="comment"># 这是第一行数据Active Internet connections (only servers)</span></span><br><span class="line"><span class="comment"># else print &gt; "3.txt" 匹配的是非前两列匹配到的其他内容，注意if和else if要对相同列数据进行操作，不然可能输出内容有问题</span></span><br><span class="line">$ cat 3.txt</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2036/sshd           </span><br><span class="line">tcp6       0      0 :::7500                 :::*                    LISTEN      17767/./frps</span><br></pre></td></tr></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>1.统计某个文件夹下的文件占用的字节数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l |awk <span class="string">'BEGIN &#123;size=0;&#125; &#123;size=size+$5;&#125; END&#123;print "[end]size is ", size&#125;'</span></span><br><span class="line">[end]size is  8657198</span><br></pre></td></tr></table></figure><p> 如果以M为单位显示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l |awk <span class="string">'BEGIN &#123;size=0;&#125; &#123;size=size+$5;&#125; END&#123;print "[end]size is ", size/1024/1024,"M"&#125;'</span> </span><br><span class="line">[end]size is  8.25889 M</span><br></pre></td></tr></table></figure><p>注意，统计不包括文件夹的子目录。</p><p>2.统计以.txt为后缀的文件总大小：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ll *.txt | awk <span class="string">'&#123;sum+=$5&#125; END &#123;print sum&#125;'</span></span><br><span class="line">769.9</span><br></pre></td></tr></table></figure><p>3.统计文件夹下的文件数目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -lha | gawk <span class="string">'BEGIN &#123;count=0&#125; &#123;count++&#125; END &#123; print "File Count:"count&#125;'</span> </span><br><span class="line">File Count:41</span><br></pre></td></tr></table></figure><p>4.统计外网连接数，根据ip分组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ant | awk <span class="string">'/^tcp/&#123;print $5&#125;'</span> | awk -F: <span class="string">'!/^:/&#123;print $1&#125;'</span> | sort | uniq -c</span><br><span class="line"><span class="comment"># sort 将重复的行集中在一起</span></span><br><span class="line"><span class="comment"># uniq 对文本行进行去重 -c 统计重复次数</span></span><br><span class="line"><span class="comment"># 可实现对文本行按重复次数进行排序 默认是升序  -r 降序</span></span><br><span class="line">$ sort 1.txt | uniq -c | sort -rn</span><br></pre></td></tr></table></figure><p>5.统计第6列连接状态总共出现了几次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'NR!=1&#123;a[$6]++;&#125; END &#123;for (i in a) print i ", " a[i];&#125;'</span> netstat </span><br><span class="line">LISTEN, 5</span><br><span class="line">Foreign, 1</span><br></pre></td></tr></table></figure><p>6.统计每个用户的进程占用了多少内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps aux | awk <span class="string">'NR!=1&#123;a[$1]+=$6;&#125; END &#123;for(i in a) print i "," a[i]"KB"; &#125;'</span></span></span><br><span class="line">dbus,1492KB</span><br><span class="line">polkitd,10972KB</span><br><span class="line">ntp,2104KB</span><br><span class="line">root,138580KB</span><br></pre></td></tr></table></figure><h3 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h3><p>在上面我们可以看到一个<strong>END</strong>关键字。<strong>END</strong>的意思是“处理完所有的行的标识”，即然说到了<strong>END</strong>就有必要介绍一下BEGIN，这两个关键字意味着<strong>执行前</strong>和<strong>执行后</strong>的意思，语法如下：</p><ul><li><strong>BEGIN</strong>{ 这里面放的是执行前的语句 }</li><li><strong>END</strong> { 这里面放的是处理完所有的行后要执行的语句 }</li><li>{ 这里面放的是处理每一行时要执行的语句 }</li></ul><p>so，举个栗子🌰</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat score </span><br><span class="line">Marry   2143 78 84 77</span><br><span class="line">Jack    2321 66 78 45</span><br><span class="line">Tom     2122 48 77 71</span><br><span class="line">Mike    2537 87 97 95</span><br><span class="line">Bob     2415 40 57 62</span><br></pre></td></tr></table></figure><p>awk脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ cat cal.awk </span><br><span class="line"><span class="comment">#!/bin/awk -f</span></span><br><span class="line"><span class="comment">#运行前</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">    math = 0</span><br><span class="line">    english = 0</span><br><span class="line">    computer = 0</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n"</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"---------------------------------------------\n"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行中</span></span><br><span class="line">&#123;</span><br><span class="line">    math+=<span class="variable">$3</span></span><br><span class="line">    english+=<span class="variable">$4</span></span><br><span class="line">    computer+=<span class="variable">$5</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"%-6s %-6s %4d %8d %8d %8d\n"</span>, <span class="variable">$1</span>, <span class="variable">$2</span>, <span class="variable">$3</span>,<span class="variable">$4</span>,<span class="variable">$5</span>, <span class="variable">$3</span>+<span class="variable">$4</span>+<span class="variable">$5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行后</span></span><br><span class="line">END &#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"---------------------------------------------\n"</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"  TOTAL:%10d %8d %8d \n"</span>, math, english, computer</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"AVERAGE:%10.2f %8.2f %8.2f\n"</span>, math/NR, english/NR, computer/NR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -f调用脚本</span></span><br><span class="line">$ awk -f cal.awk score     </span><br><span class="line">NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL</span><br><span class="line">---------------------------------------------</span><br><span class="line">Marry  2143     78       84       77      239</span><br><span class="line">Jack   2321     66       78       45      189</span><br><span class="line">Tom    2122     48       77       71      196</span><br><span class="line">Mike   2537     87       97       95      279</span><br><span class="line">Bob    2415     40       57       62      159</span><br><span class="line">---------------------------------------------</span><br><span class="line">  TOTAL:       319      393      350 </span><br><span class="line">AVERAGE:     63.80    78.60    70.00</span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>awk脚本与环境变量的交互，使用-v参数（定义变量）和ENVIRON，使用ENVIRON的环境变量需要export。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ x=5</span><br><span class="line">$ y=10</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$x</span></span><br><span class="line">5</span><br><span class="line">$ <span class="built_in">export</span> y</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$x</span> <span class="variable">$y</span></span><br><span class="line">5 10</span><br><span class="line">$ awk -v val=<span class="variable">$x</span> <span class="string">'&#123;print $1,$2,$3,$4+val,$5+ENVIRON["y"]&#125;'</span> OFS=<span class="string">"\t"</span> score </span><br><span class="line">Marry   2143    78      89      87</span><br><span class="line">Jack    2321    66      83      55</span><br><span class="line">Tom     2122    48      82      81</span><br><span class="line">Mike    2537    87      102     105</span><br><span class="line">Bob     2415    40      62      72</span><br></pre></td></tr></table></figure><h3 id="有趣示例"><a href="#有趣示例" class="headerlink" title="有趣示例"></a>有趣示例</h3><p>1.从file文件中找出长度大于20的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'length&gt;=21'</span> score </span><br><span class="line">Marry   2143 78 84 77</span><br><span class="line">Jack    2321 66 78 45</span><br><span class="line">Tom     2122 48 77 71</span><br><span class="line">Mike    2537 87 97 95</span><br><span class="line">Bob     2415 40 57 62</span><br></pre></td></tr></table></figure><p>2.按连接数查看客户端ip，根据ip分组计数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ntu | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d: -f1 | sort | uniq -c</span><br><span class="line">      1 100.100.30.25</span><br><span class="line">      2 112.213.179.149</span><br><span class="line">      1 173.255.234.138</span><br><span class="line">      1 47.52.207.198</span><br><span class="line">      1 47.93.222.200</span><br><span class="line">      1 60.247.88.82</span><br><span class="line">      1 77.247.110.219</span><br><span class="line">      1 80.1.15.172</span><br><span class="line">      7 80.82.70.187</span><br><span class="line">      1 89.248.174.198</span><br><span class="line">      1 Address</span><br><span class="line">      1 servers)</span><br><span class="line"><span class="comment"># cut用法</span></span><br><span class="line"><span class="comment"># -d ：自定义分隔符，默认为制表符。</span></span><br><span class="line"><span class="comment"># -f ：与-d一起使用，指定显示哪个区域。</span></span><br></pre></td></tr></table></figure><p>3.打印九九乘法表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ seq 9 | sed <span class="string">'H;g'</span> | awk -v RS=<span class="string">''</span> <span class="string">'&#123;for(i=1;i&lt;=NF;i++)printf("%dx%d=%d%s", i, NR, i*NR, i==NR?"\n":"\t")&#125;'</span></span><br><span class="line">1x1=1</span><br><span class="line">1x2=2   2x2=4</span><br><span class="line">1x3=3   2x3=6   3x3=9</span><br><span class="line">1x4=4   2x4=8   3x4=12  4x4=16</span><br><span class="line">1x5=5   2x5=10  3x5=15  4x5=20  5x5=25</span><br><span class="line">1x6=6   2x6=12  3x6=18  4x6=24  5x6=30  6x6=36</span><br><span class="line">1x7=7   2x7=14  3x7=21  4x7=28  5x7=35  6x7=42  7x7=49</span><br><span class="line">1x8=8   2x8=16  3x8=24  4x8=32  5x8=40  6x8=48  7x8=56  8x8=64</span><br><span class="line">1x9=9   2x9=18  3x9=27  4x9=36  5x9=45  6x9=54  7x9=63  8x9=72  9x9=81</span><br></pre></td></tr></table></figure><blockquote><p>参考链接:<br><a href="https://coolshell.cn/articles/9070.html" target="_blank" rel="noopener">AWK 简明教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;&lt;strong&gt;awk&lt;/strong&gt;其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="awk" scheme="https://annecoding.github.io/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>hexo图片显示问题</title>
    <link href="https://annecoding.github.io/2019/05/20/hexo%20img%20403/"/>
    <id>https://annecoding.github.io/2019/05/20/hexo img 403/</id>
    <published>2019-05-20T03:19:37.000Z</published>
    <updated>2019-07-25T00:08:26.530Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>解决markdown图片不显示，返回403 forbidden。</p><a id="more"></a><p>在文章中引用外链图片时不显示，但是本身外链（图床）图片又是可以打开的，错误如下图所示：<br><img src="http://images2015.cnblogs.com/blog/415042/201604/415042-20160419175110210-69232656.png" alt></p><p><img src="http://www.manongjc.com/images/cnblogs/153579233815357B3A9v2338.png" alt><br>只需要在文件头部添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>关于meta referrer，有如下可设置的值：<br><img src="https://images2017.cnblogs.com/blog/985078/201802/985078-20180208084932873-358057556.png" alt></p><blockquote><p>参考链接如下：<br><a href="https://github.com/xcodebuild/hexo-asset-image" target="_blank" rel="noopener">关于hexo-asset-image</a><br><a href="http://www.manongjc.com/article/9294.html" target="_blank" rel="noopener">hexo图片不显示</a><br><a href="https://www.cnblogs.com/awzf/p/9811386.html" target="_blank" rel="noopener">img标签forbidden问题</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;解决markdown图片不显示，返回403 forbidden。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://annecoding.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://annecoding.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>linux下项目上线流程</title>
    <link href="https://annecoding.github.io/2019/05/15/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/"/>
    <id>https://annecoding.github.io/2019/05/15/项目上线流程/</id>
    <published>2019-05-15T07:48:23.317Z</published>
    <updated>2019-07-28T01:43:11.512Z</updated>
    
    <content type="html"><![CDATA[<p>项目上线流程</p><p>1.选择服务器，比如CentOS、ubuntu等。</p><p>2.选择Web服务器，比如Nginx、Apache、Tomcat等。</p><p>3.独立域名购买，比如阿里云、腾讯云等。<br><a id="more"></a></p><h3 id="web服务器构建"><a href="#web服务器构建" class="headerlink" title="web服务器构建"></a>web服务器构建</h3><p>linux下安装nginx，yum下没有nginx源，在epel-release下有<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装epel-release源</span></span><br><span class="line">yum install epel-release</span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></p><p>可输入下面命令查看是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure></p><p>安装编辑器vim<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim</span><br></pre></td></tr></table></figure></p><p>安装scp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssh-client</span><br></pre></td></tr></table></figure></p><h3 id="网站上传到服务器"><a href="#网站上传到服务器" class="headerlink" title="网站上传到服务器"></a>网站上传到服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local_dir为本地目录数据</span></span><br><span class="line">scp -r local_dir user@ip:/remote_dir</span><br><span class="line"><span class="comment"># 示例如下  当下目录所有数据上传到远程目录/root/www</span></span><br><span class="line">scp -r ./* root@ip:/root/www</span><br></pre></td></tr></table></figure><h3 id="域名购买及解析-阿里云直接用新手引导"><a href="#域名购买及解析-阿里云直接用新手引导" class="headerlink" title="域名购买及解析(阿里云直接用新手引导)"></a>域名购买及解析(阿里云直接用新手引导)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加www和@记录</span><br><span class="line"></span><br><span class="line">记录值：公网IP地址</span><br></pre></td></tr></table></figure><p>如以上操作步骤无误，便可根据购买的域名访问相关网站。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目上线流程&lt;/p&gt;
&lt;p&gt;1.选择服务器，比如CentOS、ubuntu等。&lt;/p&gt;
&lt;p&gt;2.选择Web服务器，比如Nginx、Apache、Tomcat等。&lt;/p&gt;
&lt;p&gt;3.独立域名购买，比如阿里云、腾讯云等。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Centos" scheme="https://annecoding.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本实例</title>
    <link href="https://annecoding.github.io/2019/05/15/shell%E8%84%9A%E6%9C%AC%E7%BB%83%E4%B9%A0/"/>
    <id>https://annecoding.github.io/2019/05/15/shell脚本练习/</id>
    <published>2019-05-15T01:23:41.000Z</published>
    <updated>2019-08-24T06:26:30.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="读取有效的电话号码"><a href="#读取有效的电话号码" class="headerlink" title="读取有效的电话号码"></a>读取有效的电话号码</h3><p>给定一个包含电话号码列表（一行一个电话号码）的文本文件 <code>file.txt</code>，写一个 bash 脚本输出所有有效的电话号码。<br><a id="more"></a><br>你可以假设一个有效的电话号码必须满足以下两种格式： (xxx) xxx-xxxx 或 xxx-xxx-xxxx。（x 表示一个数字）</p><p>你也可以假设每行前后没有多余的空格字符。</p><p><strong>示例:</strong></p><p>假设 <code>file.txt</code> 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">987-123-4567</span><br><span class="line">123 456 7890</span><br><span class="line">(123) 456-7890</span><br></pre></td></tr></table></figure><p>你的脚本应当输出下列有效的电话号码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">987-123-4567</span><br><span class="line">(123) 456-7890</span><br></pre></td></tr></table></figure><p>实现脚本如下：</p><p>方法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n -r <span class="string">'/^([0-9]&#123;3&#125;-|\([0-9]&#123;3&#125;\) )[0-9]&#123;3&#125;-[0-9]&#123;4&#125;$/p'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -P <span class="string">'^(\d&#123;3&#125;-|\(\d&#123;3&#125;\) )\d&#123;3&#125;-\d&#123;4&#125;$'</span> file.txt</span><br><span class="line"><span class="comment"># \d 等价于 [0-9]  试验结果[0-9]更快</span></span><br><span class="line">grep -P <span class="string">'^([0-9]&#123;3&#125;-|\([0-9]&#123;3&#125;\) )[0-9]&#123;3&#125;-[0-9]&#123;4&#125;$'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法三<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/^([0-9]&#123;3&#125;-|\([0-9]&#123;3&#125;\) )[0-9]&#123;3&#125;-[0-9]&#123;4&#125;$/'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>关于正则其他参考：<a href="https://blog.csdn.net/yufenghyc/article/details/51078107" target="_blank" rel="noopener">https://blog.csdn.net/yufenghyc/article/details/51078107</a></p><h3 id="打印文件第十行"><a href="#打印文件第十行" class="headerlink" title="打印文件第十行"></a>打印文件第十行</h3><p>给定一个文本文件 <code>file.txt</code>，请只打印这个文件中的第十行。</p><p><strong>示例:</strong></p><p>假设 <code>file.txt</code> 有如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Line 1</span><br><span class="line">Line 2</span><br><span class="line">Line 3</span><br><span class="line">Line 4</span><br><span class="line">Line 5</span><br><span class="line">Line 6</span><br><span class="line">Line 7</span><br><span class="line">Line 8</span><br><span class="line">Line 9</span><br><span class="line">Line 10</span><br></pre></td></tr></table></figure><p>你的脚本应当显示第十行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Line 10</span><br></pre></td></tr></table></figure><p>实现脚本如下：<br>方法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read from the file file.txt and output the tenth line to stdout.</span></span><br><span class="line">sed -n <span class="string">'10p'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'10&#123;p;q&#125;'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法三：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">"NR==10"</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法四：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt | awk <span class="string">'NR==10'</span></span><br></pre></td></tr></table></figure></p><p>方法五:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt | head -10 | tail -1</span><br></pre></td></tr></table></figure></p><h3 id="centos下常用参数"><a href="#centos下常用参数" class="headerlink" title="centos下常用参数"></a>centos下常用参数</h3><p>1.提取IP地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig  | grep inet | grep -v 127.0.0.1 | grep -v inet6| awk -F <span class="string">' '</span> <span class="string">'&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure></p><p>2.格式化日期<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATE=$(date +%F<span class="string">" "</span>%H:%M)</span><br></pre></td></tr></table></figure></p><p>3.内存空闲情况查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TOTAL=$(free -m | awk <span class="string">'/Mem/&#123;print $2&#125;'</span>)</span><br><span class="line">USE=$(free -m | awk <span class="string">'/Mem/&#123;print $3+$6&#125;'</span>)</span><br><span class="line">FREE=$((<span class="variable">$TOTAL</span>-<span class="variable">$USE</span>))</span><br></pre></td></tr></table></figure></p><p>4.磁盘参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TOTAL=$(fdisk -l | grep Disk | awk -F <span class="string">'[ ,]'</span> <span class="string">'NR==1&#123;print $2,$3,$4,$5&#125;'</span>)</span><br><span class="line">PART_USE=$(df -h | grep <span class="string">"/dev/vda1"</span> | awk -F <span class="string">'[ %]+'</span> <span class="string">'&#123;print $1,$5,$6&#125;'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="检测服务是否启动成功"><a href="#检测服务是否启动成功" class="headerlink" title="检测服务是否启动成功"></a>检测服务是否启动成功</h3><p><strong>示例</strong>：检测ssh服务是否启动成功，有多种方法，这里只列举一种。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat service.sh </span><br><span class="line"><span class="comment"># 检查服务状态的脚本</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># ss -anu 查看所有udp连接</span></span><br><span class="line">PORT_C=$(ss -anu | grep -c 123)</span><br><span class="line">PS_C=$(ps -ef | grep sshd | grep -vc grep)</span><br><span class="line"><span class="comment"># if中-o  布尔运算中的或运算  只要一个为true则都为true</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$PORT_C</span> -eq 0 -o <span class="variable">$PS_C</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"sshd启动失败"</span> | mail -s <span class="string">"ssh服务"</span> annecoding@163.com</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"ssh启动成功"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./service.sh </span><br><span class="line">ssh启动成功</span><br></pre></td></tr></table></figure></p><h3 id="检查主机存活状态"><a href="#检查主机存活状态" class="headerlink" title="检查主机存活状态"></a>检查主机存活状态</h3><p>1.将错误次数存放在数组里面,以此来判断主机存活状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查主机存活状态</span></span><br><span class="line">$ cat hostacting.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IP_LIST=<span class="string">"114.112.114.114 1.2.4.8"</span></span><br><span class="line"><span class="keyword">for</span> IP <span class="keyword">in</span> <span class="variable">$IP_LIST</span>;<span class="keyword">do</span></span><br><span class="line">        NUM=1</span><br><span class="line">        <span class="keyword">while</span> [ <span class="variable">$NUM</span> -le 3 ]</span><br><span class="line">        <span class="keyword">do</span> </span><br><span class="line">                <span class="keyword">if</span> ping -c 1 <span class="variable">$IP</span> &gt; /dev/null;<span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">"<span class="variable">$IP</span> Ping is successful."</span></span><br><span class="line">                        <span class="built_in">break</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="comment"># ping三次，统计失败的次数</span></span><br><span class="line">                        FAIL_COUNT[<span class="variable">$NUM</span>]=<span class="variable">$IP</span></span><br><span class="line">                        <span class="built_in">let</span> NUM++</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"fail_count（数组元素个数为//3）: <span class="variable">$&#123;#FAIL_COUNT[*]&#125;</span>"</span></span><br><span class="line">        <span class="comment"># echo "failcount1（数组元素为//IP地址）: $&#123;FAIL_COUNT[1]&#125;"</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;#FAIL_COUNT[*]&#125;</span> -eq 3 ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;FAIL_COUNT[1]&#125;</span> Ping is failure!!!"</span></span><br><span class="line">                <span class="comment"># 清空数组</span></span><br><span class="line">                <span class="built_in">unset</span> FAIL_COUNT[*]</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./hostacting.sh   </span><br><span class="line"><span class="comment"># fail_count（数组元素个数为//3）: 3</span></span><br><span class="line">114.112.114.114 Ping is failure!!!</span><br><span class="line">1.2.4.8 Ping is successful. </span><br><span class="line"><span class="comment"># fail_count（数组元素个数为//3）: 0</span></span><br></pre></td></tr></table></figure></p><p>2.通过计数判断主机存活状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat hostacting1.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IP_LIST=<span class="string">"114.114.114.114 124.123.12.134"</span></span><br><span class="line"><span class="keyword">for</span> IP <span class="keyword">in</span> <span class="variable">$IP_LIST</span>;<span class="keyword">do</span></span><br><span class="line">        FAIL_COUNT=0</span><br><span class="line">        <span class="keyword">for</span>((i=1;i&lt;=3;i++));<span class="keyword">do</span></span><br><span class="line">                <span class="keyword">if</span> ping -c 1 <span class="variable">$IP</span> &gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">"<span class="variable">$IP</span> Ping is successful."</span></span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                        <span class="built_in">let</span> FAIL_COUNT++</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$FAIL_COUNT</span> -eq 3 ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$IP</span> Ping is failure!!!"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./hostacting1.sh </span><br><span class="line">114.114.114.114 Ping is successful.</span><br><span class="line">124.123.12.134 Ping is failure!!!</span><br></pre></td></tr></table></figure></p><p>3.通过跳出循环的方式来判断主机存活状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat hostacting2.sh </span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="function"><span class="title">ping_success_status</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ping -c 1 <span class="variable">$IP</span> &gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$IP</span> Ping is successful."</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">IP_LIST=<span class="string">"114.114.114.114 123.13.13.23"</span></span><br><span class="line"><span class="keyword">for</span> IP <span class="keyword">in</span> <span class="variable">$IP_LIST</span>;<span class="keyword">do</span></span><br><span class="line">        ping_success_status</span><br><span class="line">        ping_success_status</span><br><span class="line">        ping_success_status</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$IP</span> Ping is failure!!!"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./hostacting2.sh   </span><br><span class="line">114.114.114.114 Ping is successful.</span><br><span class="line">123.13.13.23 Ping is successful.</span><br></pre></td></tr></table></figure></p><h3 id="使用vmstat工具来分析CPU的统计信息"><a href="#使用vmstat工具来分析CPU的统计信息" class="headerlink" title="使用vmstat工具来分析CPU的统计信息"></a>使用vmstat工具来分析CPU的统计信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ cat cpu.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=$(date +%F<span class="string">" "</span>%H:%M)</span><br><span class="line">IP=$(ifconfig | grep inet | grep -v 127.0.0.1 | grep -v inet6 | awk -F <span class="string">" "</span> <span class="string">'&#123;print $2&#125;'</span> )</span><br><span class="line">MAIL=<span class="string">"annecoding@163.com"</span></span><br><span class="line"><span class="comment"># 如果vmstat不存在</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">which</span> vmstat &amp;&gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"vmstat command no found,Please install procps package."</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># NR==3 取第三行</span></span><br><span class="line">US=$(vmstat | awk <span class="string">'NR==3&#123;print $13&#125;'</span>)</span><br><span class="line">SY=$(vmstat | awk <span class="string">'NR==3&#123;print $14&#125;'</span>)</span><br><span class="line">IDLE=$(vmstat | awk <span class="string">'NR==3&#123;print $15&#125;'</span>)</span><br><span class="line">WAIT=$(vmstat | awk <span class="string">'NR==3&#123;print $16&#125;'</span>)</span><br><span class="line">USE=$((<span class="variable">$US</span>+<span class="variable">$SY</span>))</span><br><span class="line"><span class="comment"># echo "use:$USE"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$USE</span> -ge 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">        Date: <span class="variable">$DATE</span></span></span><br><span class="line"><span class="string">        Host: <span class="variable">$IP</span></span></span><br><span class="line"><span class="string">        Problem: CPU utilization <span class="variable">$USE</span></span></span><br><span class="line"><span class="string">        "</span> | mail -s <span class="string">"CPU Monitor"</span> <span class="variable">$MAIL</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./cpu.sh </span><br><span class="line"></span><br><span class="line">        Date: 2019-08-20 09:01</span><br><span class="line">        Host: 172.17.104.191</span><br><span class="line">        Problem: CPU utilization 0</span><br></pre></td></tr></table></figure></p><h3 id="使用free分析内存信息"><a href="#使用free分析内存信息" class="headerlink" title="使用free分析内存信息"></a>使用free分析内存信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat memory.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 格式化日期 后面不能有空格</span></span><br><span class="line">DATE=$(date +%F<span class="string">" "</span>%H:%M)</span><br><span class="line">MAIL=<span class="string">"annecoding@163.com"</span></span><br><span class="line"><span class="comment"># 获取IP地址</span></span><br><span class="line">IP=$(ifconfig | grep inet | grep -v 127.0.0.1 | grep -v inet6 | awk -F <span class="string">' '</span> <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line"><span class="comment"># awk '/Mem/' 模式匹配  匹配包含Mem的一行</span></span><br><span class="line">TOTAL=$(free -m | awk <span class="string">'/Mem/&#123;print $2&#125;'</span>)</span><br><span class="line">USE=$(free -m | awk <span class="string">'/Mem/&#123;print $3+$6&#125;'</span>)</span><br><span class="line">FREE=$((<span class="variable">$TOTAL</span>-<span class="variable">$USE</span>))</span><br><span class="line"><span class="comment"># 内存小于1.0G输出信息</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$FREE</span> -lt 1024 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">Date: <span class="variable">$DATE</span></span></span><br><span class="line"><span class="string">Host: <span class="variable">$IP</span></span></span><br><span class="line"><span class="string">Problem:Total=<span class="variable">$TOTAL</span>,Use=<span class="variable">$USE</span>,Free=<span class="variable">$FREE</span></span></span><br><span class="line"><span class="string">"</span> | mail -s <span class="string">"Memory Monitor"</span> <span class="variable">$MAIL</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./memory.sh </span><br><span class="line">Date: 2019-08-20 09:02</span><br><span class="line">Host: 172.17.104.191</span><br><span class="line">Problem:Total=1839,Use=890,Free=949</span><br></pre></td></tr></table></figure></p><h3 id="监控磁盘利用"><a href="#监控磁盘利用" class="headerlink" title="监控磁盘利用"></a>监控磁盘利用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat fdisk.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=$(date +%F<span class="string">" "</span>%H:%M)</span><br><span class="line"><span class="comment"># grep -v 表示取反匹配</span></span><br><span class="line">IP=$(ifconfig | grep inet | grep -v 127.0.0.1 | grep -v inet6 | awk -F <span class="string">' '</span> <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line"><span class="comment"># MAIL="example@email.com"</span></span><br><span class="line">TOTAL=$(fdisk -l | grep Disk | awk -F <span class="string">'[ ,]'</span> <span class="string">'NR==1&#123;print $2,$3,$4,$5&#125;'</span>)</span><br><span class="line">PART_USE=$(df -h | grep <span class="string">"/dev/vda1"</span> | awk -F <span class="string">'[ %]+'</span> <span class="string">'&#123;print $1,$5,$6&#125;'</span>)</span><br><span class="line">PART=$(<span class="built_in">echo</span> <span class="variable">$PART_USE</span> | cut -d <span class="string">" "</span> -f1)</span><br><span class="line">USE=$(<span class="built_in">echo</span> <span class="variable">$PART_USE</span> | cut -d <span class="string">" "</span> -f2)</span><br><span class="line">MOUNT=$(<span class="built_in">echo</span> <span class="variable">$PART_USE</span> | cut -d <span class="string">" "</span> -f3)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$USE</span> -gt 3 ];<span class="keyword">then</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">        Date: <span class="variable">$DATE</span></span></span><br><span class="line"><span class="string">        Host: <span class="variable">$IP</span></span></span><br><span class="line"><span class="string">        Total: <span class="variable">$TOTAL</span></span></span><br><span class="line"><span class="string">        Problem: <span class="variable">$PART</span>'已使用:'<span class="variable">$USE</span>%</span></span><br><span class="line"><span class="string">        "</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./fdisk.sh </span><br><span class="line"></span><br><span class="line">        Date: 2019-08-20 11:20</span><br><span class="line">        Host: 172.17.104.191</span><br><span class="line">        Total: /dev/vda: 42.9 GB </span><br><span class="line">        Problem: /dev/vda1<span class="string">'已使用:'</span>5%</span><br></pre></td></tr></table></figure></p><h3 id="判断url可用性"><a href="#判断url可用性" class="headerlink" title="判断url可用性"></a>判断url可用性</h3><p>1.判断三次URL可用性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ cat check_url.sh </span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="function"><span class="title">check_url</span></span>()&#123;</span><br><span class="line">        <span class="comment"># curl</span></span><br><span class="line">        <span class="comment"># -o 把输出写到文件中 </span></span><br><span class="line">        <span class="comment"># --connect-timeout 设置最大请求时间</span></span><br><span class="line">        <span class="comment"># -s 静默模式，不输出任何东西</span></span><br><span class="line">        <span class="comment"># -w 什么输出完成后</span></span><br><span class="line">        <span class="comment"># $1 函数取第一个参数，这里取$URL</span></span><br><span class="line">        HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w <span class="string">"%&#123;http_code&#125;"</span>  <span class="variable">$1</span>)</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$HTTP_CODE</span> -eq 200 ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Suprise:<span class="variable">$URL</span> Access success."</span></span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">URL_LIST=<span class="string">"www.baidu.com  www.google.com www.1211111111111.com"</span></span><br><span class="line"><span class="keyword">for</span> URL <span class="keyword">in</span> <span class="variable">$URL_LIST</span> ;<span class="keyword">do</span></span><br><span class="line">        check_url <span class="variable">$URL</span></span><br><span class="line">        check_url <span class="variable">$URL</span></span><br><span class="line">        check_url <span class="variable">$URL</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Warning: <span class="variable">$URL</span> Access failure!"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./check_url.sh </span><br><span class="line">Suprise:www.baidu.com Access success.</span><br><span class="line">Warning: www.google.com Access failure!</span><br><span class="line">Warning: www.1211111111111.com Access failure!</span><br></pre></td></tr></table></figure></p><p>2.通过将错误保存在数组判断url存活<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cat check_url1.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">URL_LIST=<span class="string">"www.baidu.com www.1233333311111.com  www.sougou.com"</span></span><br><span class="line"><span class="keyword">for</span> URL <span class="keyword">in</span> <span class="variable">$URL_LIST</span></span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">        FAIL_COUNT=0</span><br><span class="line">        <span class="keyword">for</span>((i=1;i&lt;=3;i++))</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w <span class="string">"%&#123;http_code&#125;"</span> <span class="variable">$URL</span>)</span><br><span class="line">                <span class="keyword">if</span> [ <span class="variable">$HTTP_CODE</span> -ne 200 ];<span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">let</span> FAIL_COUNT++</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">"Suprise: <span class="variable">$URL</span> access successful."</span></span><br><span class="line">                        <span class="built_in">break</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$FAIL_COUNT</span> -eq 3 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Warning: <span class="variable">$URL</span> access failure!"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./check_url1.sh</span><br><span class="line">Suprise: www.baidu.com access successful.</span><br><span class="line">Warning: www.1233333311111.com access failure!</span><br><span class="line">Suprise: www.sougou.com access successful.</span><br></pre></td></tr></table></figure></p><p>3.通过将错误保存到变量来判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cat check_url2.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">URL_LIST=<span class="string">"www.sougou.com www.anne1111111.com www.baidu.com"</span></span><br><span class="line"><span class="keyword">for</span> URL <span class="keyword">in</span> <span class="variable">$URL_LIST</span>;<span class="keyword">do</span> </span><br><span class="line">        NUM=1</span><br><span class="line">        <span class="keyword">while</span> [ <span class="variable">$NUM</span> -le 3 ];<span class="keyword">do</span></span><br><span class="line">                HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w <span class="string">"%&#123;http_code&#125;"</span> <span class="variable">$URL</span>)</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$HTTP_CODE</span> -ne 200 ];<span class="keyword">then</span></span><br><span class="line">                <span class="comment"># 创建数组，以$NUM为下标,$URL为传入数组的元素</span></span><br><span class="line">                FAIL_COUNT[<span class="variable">$NUM</span>]=<span class="variable">$URL</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"array_value:<span class="variable">$&#123;FAIL_COUNT[*]&#125;</span>"</span></span><br><span class="line">                <span class="built_in">let</span> NUM++</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Suprise: <span class="variable">$URL</span> access success."</span></span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;#FAIL_COUNT[*]&#125;</span> -eq 3 ];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Warning: <span class="variable">$URL</span> access failure!"</span></span><br><span class="line">                <span class="comment"># 清空数组</span></span><br><span class="line">                <span class="built_in">unset</span> FAIL_COUNT[*] </span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行脚本，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./check_url2.sh  </span><br><span class="line">Suprise: www.sougou.com access success.</span><br><span class="line"><span class="comment"># array_value:www.anne1111111.com</span></span><br><span class="line"><span class="comment"># array_value:www.anne1111111.com www.anne1111111.com</span></span><br><span class="line"><span class="comment"># array_value:www.anne1111111.com www.anne1111111.com www.anne1111111.com</span></span><br><span class="line">Warning: www.anne1111111.com access failure!</span><br><span class="line">Suprise: www.baidu.com access success.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;读取有效的电话号码&quot;&gt;&lt;a href=&quot;#读取有效的电话号码&quot; class=&quot;headerlink&quot; title=&quot;读取有效的电话号码&quot;&gt;&lt;/a&gt;读取有效的电话号码&lt;/h3&gt;&lt;p&gt;给定一个包含电话号码列表（一行一个电话号码）的文本文件 &lt;code&gt;file.txt&lt;/code&gt;，写一个 bash 脚本输出所有有效的电话号码。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="shell" scheme="https://annecoding.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>带你入门的linux基础知识</title>
    <link href="https://annecoding.github.io/2019/05/10/linux%E5%9F%BA%E7%A1%80/"/>
    <id>https://annecoding.github.io/2019/05/10/linux基础/</id>
    <published>2019-05-10T01:26:39.000Z</published>
    <updated>2019-08-25T09:23:28.353Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>本篇文章主要是一些关于linux操作系统、linux诞生等一些背景知识及简单介绍。以及一些linux基础操作命令。</p><a id="more"></a><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><h3 id="操作系统简介"><a href="#操作系统简介" class="headerlink" title="操作系统简介"></a>操作系统简介</h3><p>我通过以下四点介绍什么操作系统：</p><ul><li>操作系统（Operation System，简称OS）是管理计算机硬件与软件资源的程序，是计算机系统的内核与基石；</li><li>操作系统本质上是运行在计算机上的软件程序 ；</li><li>为用户提供一个与系统交互的操作界面 ；</li><li>操作系统分内核与外壳（我们可以把外壳理解成围绕着内核的应用程序，而内核就是能操作硬件的程序）。</li></ul><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5cei5yjfoj30hs0d5jrf.jpg" alt="img"></p><h3 id="操作系统简单分类"><a href="#操作系统简单分类" class="headerlink" title="操作系统简单分类"></a>操作系统简单分类</h3><ul><li><strong>Windows:</strong> 目前最流行的个人桌面操作系统 ，不做多的介绍，大家都清楚。 </li><li><strong>Unix：</strong> 最早的多用户、多任务操作系统 .按照操作系统的分类，属于分时操作系统。Unix 大多被用在服务器、工作站，现在也有用在个人计算机上。它在创建互联网、计算机网络或客户端/服务器模型方面发挥着非常重要的作用。</li><li><strong>Linux:</strong> Linux是一套免费使用和自由传播的类Unix操作系统.Linux存在着许多不同的Linux版本，但它们都使用了 <strong>Linux内核</strong> 。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、视频游戏控制台、台式计算机、大型机和超级计算机。严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU 工程各种工具和数据库的操作系统。</li></ul><h3 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h3><p>我们上面已经介绍到了Linux，我们这里只强调三点。</p><ul><li><strong>类Unix系统：</strong> Linux是一种自由、开放源码的类似Unix的操作系统 </li><li><strong>Linux内核：</strong> 严格来说，Linux这个词本身只表示Linux内核 </li><li><strong>Linux之父：</strong> 一个编程领域的传奇式人物。他是Linux内核的最早作者，随后发起了这个开源项目，担任Linux内核的首要架构师与项目协调者，是当今世界最著名的电脑程序员、黑客之一。他还发起了Git这个开源项目，并为主要的开发者。 </li></ul><h3 id="Linux诞生简介"><a href="#Linux诞生简介" class="headerlink" title="Linux诞生简介"></a>Linux诞生简介</h3><ul><li>1991年，芬兰的业余计算机爱好者Linus Torvalds编写了一款类似Minix的系统（基于微内核架构的类Unix操作系统）被ftp管理员命名为Linux 加入到自由软件基金的GNU计划中;</li><li>Linux以一只可爱的企鹅作为标志，象征着敢作敢为、热爱生活。</li></ul><h3 id="Linux的分类"><a href="#Linux的分类" class="headerlink" title="Linux的分类"></a>Linux的分类</h3><p><strong>Linux根据原生程度，分为两种：</strong></p><p><strong>内核版本：</strong> Linux不是一个操作系统，严格来讲，Linux只是一个操作系统中的内核。内核是什么？内核建立了计算机软件与硬件之间通讯的平台，内核提供系统服务，比如文件管理、虚拟内存、设备I/O等；</p><p><strong>发行版本：</strong> 一些组织或公司在内核版基础上进行二次开发而重新发行的版本。Linux发行版本有很多种（ubuntu和CentOS用的都很多，初学建议选择CentOS），如下图所示：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5cen2ffghj30r60d0400.jpg" alt="image-20190725212731888"></p><h3 id="Linux文件系统简介"><a href="#Linux文件系统简介" class="headerlink" title="Linux文件系统简介"></a>Linux文件系统简介</h3><p><strong>在Linux操作系统中，所有被操作系统管理的资源，例如网络接口卡、磁盘驱动器、打印机、输入输出设备、普通文件或是目录都被看作是一个文件。</strong></p><p>也就是说在LINUX系统中有一个重要的概念：<strong>一切都是文件</strong>。其实这是UNIX哲学的一个体现，而Linux是重写UNIX而来，所以这个概念也就传承了下来。在UNIX系统中，把一切资源都看作是文件，包括硬件设备。UNIX系统把每个硬件都看成是一个文件，通常称为设备文件，这样用户就可以用读写文件的方式实现对硬件的访问。</p><h3 id="文件类型与目录结构"><a href="#文件类型与目录结构" class="headerlink" title="文件类型与目录结构"></a>文件类型与目录结构</h3><p><strong>Linux支持5种文件类型 ：</strong></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5ceo6d7hsj30w40jiwq8.jpg" alt="image-20190725212839830"></p><p><strong>Linux的目录结构如下：</strong></p><p>Linux文件系统的结构层次鲜明，就像一棵倒立的树，最顶层是其根目录：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5ceowfanjj30wy0cwjv9.jpg" alt="image-20190725212921239"></p><p><strong>常见目录说明：</strong></p><ul><li><strong>/bin：</strong> 存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里；</li><li><strong>/etc：</strong>  存放系统管理和配置文件；</li><li><strong>/home：</strong>  存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示；</li><li><strong>/usr ：</strong> 用于存放系统应用程序；</li><li><strong>/opt：</strong> 额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里；</li><li><strong>/proc：</strong>  虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息；</li><li><strong>/root：</strong>    超级用户（系统管理员）的主目录（特权阶级^o^）；</li><li><strong>/sbin:</strong>    存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等；</li><li><strong>/dev：</strong>    用于存放设备文件；</li><li><strong>/mnt：</strong>    系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统；</li><li><strong>/boot：</strong>    存放用于系统引导时使用的各种文件；</li><li><strong>/lib ：</strong>      存放着和系统运行相关的库文件 ；</li><li><strong>/tmp：</strong>    用于存放各种临时文件，是公用的临时文件存储点；</li><li><strong>/var：</strong>    用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等；</li><li><strong>/lost+found：</strong>    这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里。</li></ul><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>下面将主要介绍Linux基本命令。</p><p>推荐一个Linux命令快查网站，非常不错，大家如果遗忘某些命令或者对某些命令不理解都可以在这里得到解决。</p><p>Linux命令大全：<a href="http://man.linuxde.net/" target="_blank" rel="noopener">http://man.linuxde.net/</a><br>linux命令速查：<a href="https://wangchujiang.com/linux-command/" target="_blank" rel="noopener">https://wangchujiang.com/linux-command/</a></p><h3 id="命令切换命令"><a href="#命令切换命令" class="headerlink" title="命令切换命令"></a>命令切换命令</h3><ul><li><strong>cd usr：</strong> 切换到该目录下usr目录 </li><li><strong>cd ..（或cd../）：</strong> 切换到上一层目录 </li><li><strong>cd /：</strong> 切换到系统根目录 </li><li><strong>cd ~：</strong> 切换到用户主目录 </li><li><strong>cd -：</strong> 切换到上一个所在目录 </li></ul><h3 id="命令的操作命令（增删改查）"><a href="#命令的操作命令（增删改查）" class="headerlink" title="命令的操作命令（增删改查）"></a>命令的操作命令（增删改查）</h3><p>1.<strong>mkdir 目录名称</strong>：增加目录</p><p>2.<strong>ls或者ll</strong>（<code>ll</code>是<code>ls -l</code>的缩写，<code>ll</code>命令以看到该目录下的所有目录和文件的详细信息）：查看目录信息</p><p>3.<strong>find 目录 参数</strong>：寻找目录（查）</p><p>示例： </p><ul><li><p>列出当前目录及子目录下所有文件和文件夹: <code>find .</code></p></li><li><p>在/home目录下查找以.txt结尾的文件名:<code>find /home -name &quot;*.txt&quot;</code></p></li><li><p>同上，但忽略大小写:<code>find /home -iname &quot;*.txt&quot;</code></p></li><li><p>当前目录及子目录下查找所有以<code>.txt</code>和<code>.pdf</code>结尾的文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . \( -name <span class="string">"*.txt"</span> -o -name <span class="string">"*.pdf"</span> \)或find . -name <span class="string">"*.txt"</span> -o -name <span class="string">"*.pdf"</span></span><br></pre></td></tr></table></figure></li></ul><p>4.<strong>mv 目录名称 新目录名称</strong>：修改目录的名称（改） </p><p>注意：<code>mv</code>的语法不仅可以对目录进行重命名而且也可以对各种文件，压缩包等进行 重命名的操作。</p><p><code>mv</code>命令用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。后面会介绍到<code>mv</code>命令的另一个用法。</p><p>5.<strong>mv 目录名称 目录的新位置</strong>：移动目录的位置—剪切（改） </p><p>注意：<code>mv</code>语法不仅可以对目录进行剪切操作，对文件和压缩包等都可执行剪切操作。另外<code>mv</code>与<code>cp</code>的结果不同，<code>mv</code>好像文件“搬家”，文件个数并未增加。而<code>cp</code>对文件进行复制，文件个数增加了。</p><p>6.<strong>cp -r 目录名称 目录拷贝的目标位置</strong>：拷贝目录（改），-r代表递归拷贝 </p><p>注意：<code>cp</code>命令不仅可以拷贝目录还可以拷贝文件，压缩包等，拷贝文件和压缩包时不 用写<code>-r</code>递归</p><p>7.<strong>rm [-rf] 目录</strong>: 删除目录（删） </p><p>注意：<code>rm</code>不仅可以删除目录，也可以删除其他文件或压缩包，为了增强大家的记忆， 无论删除任何目录或文件，都直接使用<code>rm -rf</code>目录/文件/压缩包</p><h3 id="文件的操作命令（增删改查）"><a href="#文件的操作命令（增删改查）" class="headerlink" title="文件的操作命令（增删改查）"></a>文件的操作命令（增删改查）</h3><p>1.<strong>touch 文件名称</strong>: 文件的创建（增）</p><p>2.<strong>cat/more/less/tail文件名称</strong>  文件的查看（查）</p><ul><li><strong>cat</strong>：只能显示最后一屏内容</li><li><strong>more</strong>：可以显示百分比，回车可以向下一行， 空格可以向下一页，<code>q</code>可以退出查看</li><li><strong>less</strong>：可以使用键盘上的<code>PgUp</code>和<code>PgDn</code>向上 和向下翻页，<code>q</code>结束查看</li><li><strong>tail-10</strong> ：查看文件的后<code>10</code>行，<code>Ctrl+C</code>结束</li></ul><p>注意：命令 <code>tail -f</code>文件 可以对某个文件进行动态监控，例如<code>tomcat</code>的日志文件， 会随着程序的运行，日志会变化，可以使用<code>tail -f catalina-2016-11-11.log</code>监控 文 件的变化</p><p>3.<strong>vim 文件</strong>：修改文件的内容（改）</p><p>vim编辑器是Linux中的强大组件，是vi编辑器的加强版，vim编辑器的命令和快捷方式有很多，但此处不一一阐述，大家也无需研究的很透彻，使用vim编辑修改文件的方式基本会使用就可以了。 </p><p><strong>在实际开发中，使用vim编辑器主要作用就是修改配置文件，下面是一般步骤：</strong> </p><p>vim 文件——&gt;进入文件—–&gt;命令模式——&gt;按<code>i</code>进入编辑模式—–&gt;编辑文件 ——-&gt;按<code>Esc</code>进入底行模式—–&gt;输入<code>:wq/q!</code>（输入<code>wq</code>代表写入内容并退出，即保存；输入<code>q!</code>代表强制退出不保存。）</p><p>其他常用模式：</p><ul><li><code>G</code>用于直接跳转到文件尾</li><li><code>ZZ</code>用于存盘退出Vi</li><li><code>ZQ</code>用于不存盘退出Vi</li><li><code>/和？</code>用于查找字符串</li><li><code>n</code>继续查找下一个</li><li><code>yy</code>复制一行</li><li><code>p</code>粘帖在下一行，P粘贴在前一行</li><li><code>dd</code>删除一行文本</li><li><code>x</code>删除光标所在的字符</li><li><code>u</code>取消上一次编辑操作（undo）</li></ul><p>4.<strong>rm -rf 文件</strong>：删除文件（删） 同目录删除：熟记 rm -rf文件 即可</p><h3 id="压缩文件的操作命令"><a href="#压缩文件的操作命令" class="headerlink" title="压缩文件的操作命令"></a>压缩文件的操作命令</h3><p><strong>1）打包并压缩文件：</strong></p><p>Linux中的打包文件一般是以<code>.tar</code>结尾的，压缩的命令一般是以<code>.gz</code>结尾的。</p><p>而一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般<code>.tar.gz</code>。命令：<code>tar -zcvf</code>打包压缩后的文件名 要打包压缩的文件,其中：</p><ul><li><p><code>z</code>：调用<code>gzip</code>压缩命令进行压缩</p></li><li><p><code>c</code>：打包文件</p></li><li><p><code>v</code>：显示运行过程</p></li><li><p><code>f</code>：指定文件名</p></li></ul><p>比如：加入test目录下有三个文件分别是 :<code>aaa.txt bbb.txt ccc.txt</code>,如果我们要打包test目录并指定压缩后的压缩包名称为test.tar.gz可以使用命令：<code>tar -zcvf test.tar.gz aaa.txt bbb.txt ccc.txt</code>或：<code>tar -zcvf test.tar.gz /test/</code></p><p><strong>2）解压压缩包：</strong></p><p>命令：<code>tar [-xvf] 压缩文件</code></p><p>其中：<code>x</code>：代表解压</p><p>示例：</p><p>1.将/test下的test.tar.gz解压到当前目录下可以使用命令：<code>tar -xvf test.tar.gz</code></p><p>2.将/test下的test.tar.gz解压到根目录/usr下:<code>tar -xvf xxx.tar.gz -C /usr</code>(-C代表指定解压的位置）</p><h3 id="Linux的权限命令"><a href="#Linux的权限命令" class="headerlink" title="Linux的权限命令"></a>Linux的权限命令</h3><p>操作系统中每个文件都拥有特定的权限、所属用户和所属组。权限是操作系统用来限制资源访问的机制，在Linux中权限一般分为读(readable)、写(writable)和执行(excutable)，分为三组。</p><p>分别对应文件的属主(owner)，属组(group)和其他用户(other)，通过这样的机制来限制哪些用户、哪些组可以对特定的文件进行什么样的操作。通过 <code>ls -l</code> 命令我们可以 查看某个目录下的文件或目录的权限</p><p>示例：在随意某个目录下<code>ls -l</code></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5cx60784uj30tg0bak0v.jpg" alt="image-20190726080834499"></p><p>第一列的内容的解释信息如下：</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5cx6tgachj30ou09oq6f.jpg" alt="image-20190726080921780"></p><p>下面将详细讲解文件的类型、Linux中权限以及文件有所有者、所在组、其它组具体是什么？</p><p>文件的类型：</p><ul><li><strong>d</strong>：代表目录</li><li><strong>-</strong>：代表文件</li><li><strong>l</strong>：代表链接（可以认为是window中的快捷方式）</li></ul><p>Linux中权限分为以下几种：</p><ul><li><strong>r</strong>：代表权限是可读，r也可以用数字4表示</li><li><strong>w</strong>：代表权限是可写，w也可以用数字2表示</li><li><strong>x</strong>：代表权限是可执行，x也可以用数字1表示</li></ul><p>文件和目录权限的区别：</p><p>对文件和目录而言，读写执行表示不同的意义。</p><p>对于文件：</p><table><thead><tr><th>权限名称</th><th>可执行操作</th></tr></thead><tbody><tr><td>r</td><td>可以使用cat查看文件的内容</td></tr><tr><td>w</td><td>可以修改文件的内容</td></tr><tr><td>x</td><td>可以将其运行为二进制文件</td></tr></tbody></table><p>对于目录：</p><table><thead><tr><th>权限名称</th><th>可执行操作</th></tr></thead><tbody><tr><td>r</td><td>可以查看目录下列表</td></tr><tr><td>w</td><td>可以创建和删除目录下文件</td></tr><tr><td>x</td><td>可以使用cd进入目录</td></tr></tbody></table><p><strong>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其它组的概念。</strong></p><ul><li><p><strong>所有者</strong><br>一般为文件的创建者，谁创建了该文件，就天然的成为该文件的所有者，用ls ‐ahl命令可以看到文件的所有者 也可以使用chown 用户名 文件名来修改文件的所有者 。</p></li><li><p><strong>文件所在组</strong><br>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组 用ls ‐ahl命令可以看到文件的所有组 也可以使用chgrp 组名 文件名来修改文件所在的组。</p></li><li><p><strong>其它组</strong><br>除开文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组<br>我们再来看看如何修改文件/目录的权限。<br><strong>修改文件/目录的权限的命令：chmod</strong><br>示例：修改/test下的aaa.txt的权限为属主有全部权限，属主所在的组有读写权限， 其他用户只有读的权限<br><strong>chmod u=rwx,g=rw,o=r aaa.txt</strong><br><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5d76hd4jlj30h607wq7v.jpg" alt="image-20190726135501237"><br>上述示例还可以使用数字表示：<code>chmod 764 aaa.txt</code></p></li></ul><p><strong>补充一个比较常用的东西:</strong></p><p>假如我们装了一个zookeeper，我们每次开机到要求其自动启动该怎么办？</p><p>1.新建一个脚本zookeeper</p><p>2.为新建的脚本zookeeper添加可执行权限，命令是:<code>chmod +x zookeeper</code></p><p>3.把zookeeper这个脚本添加到开机启动项里面，命令是：<code>chkconfig --add zookeeper</code></p><p>4.如果想看看是否添加成功，命令是：<code>chkconfig --list</code></p><h3 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h3><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><h3 id="Linux用户管理相关命令"><a href="#Linux用户管理相关命令" class="headerlink" title="Linux用户管理相关命令"></a>Linux用户管理相关命令</h3><ul><li><p><code>useradd 选项 用户名</code>:添加用户账号</p></li><li><p><code>userdel 选项 用户名</code>:删除用户帐号</p></li><li><p><code>usermod 选项 用户名</code>:修改帐号</p></li><li><p><code>passwd 用户名</code>:更改或创建用户的密码</p></li><li><p><code>passwd -S 用户名</code>:显示用户账号密码信息</p></li><li><p><code>passwd -d 用户名</code>: 清除用户密码</p></li></ul><p><strong>useradd</strong>命令用于Linux中创建的新的系统用户。<strong>useradd</strong>可用来建立用户帐号。帐号建好之后，再用<strong>passwd</strong>设定帐号的密码．而可用<strong>userdel</strong>删除帐号。使用<strong>useradd</strong>指令所建立的帐号，实际上是保存在<code>/etc/passwd</code>文本文件中。</p><p><strong>passwd</strong>命令用于设置用户的认证信息，包括用户密码、密码过期时间等。系统管理者则能用它管理系统用户的密码。只有管理者可以指定用户名称，一般用户只能变更自己的密码。</p><h4 id="Linux系统用户组的管理"><a href="#Linux系统用户组的管理" class="headerlink" title="Linux系统用户组的管理"></a>Linux系统用户组的管理</h4><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对<code>/etc/group</code>文件的更新。</p><p>Linux系统用户组的管理相关命令:</p><ul><li><p><code>groupadd 选项 用户组</code> :增加一个新的用户组 </p></li><li><p><code>groupdel 用户组</code>:要删除一个已有的用户组 </p></li><li><p><code>groupmod 选项 用户组</code>: 修改用户组的属性</p></li></ul><p>其他常用命令</p><ul><li><code>pwd</code>：显示当前所在位置</li><li><code>grep</code> 要搜索的字符串 要搜索的文件 <code>--color</code>：搜索命令，–color代表高亮显示</li><li><p><code>ps -ef/ps aux</code>：这两个命令都是查看当前系统正在运行进程，两者的区别是展示格式不同。如果想要查看特定的进程可以使用这样的格式：<code>ps aux|grep redis</code>（查看包括redis字符串的进程）<br>注意：如果直接用 <strong>ps</strong>（（Process Status））命令，会显示所有进程的状态，通常结合grep命令查看某进程的状态。</p></li><li><p><code>kill -9 进程的pid</code>：杀死进程（-9 表示强制终止。）<br>先用ps查找进程，然后用kill杀掉</p></li></ul><p><strong>网络通信命令：</strong></p><ul><li>查看当前系统的网卡信息：<code>ifconfig</code></li><li>查看与某台机器的连接情况：<code>ping</code></li><li>查看当前系统的端口使用：<code>netstat -ntlp</code>或者<code>ss -ntlp</code></li><li><p><strong>reboot：</strong>重开机。<br> <code>reboot -w</code>：做个重开机的模拟（只有纪录并不会真的重开机）。</p></li><li><p><strong>shutdown</strong> 关机命令</p></li><li><p><code>shutdown -h now</code>：指定现在立即关机；<br><code>shutdown +5 &quot;System will shutdown after 5 minutes&quot;</code>:指定5分钟后关机，同时送出警告信息给登入用户。</p><ul><li>-c 取消前一个关机命令</li><li>-h 关机</li><li>-r 重启<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r 06:00</span><br><span class="line">shutdown -c</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>init</strong>命令</p><ul><li>关机：<code>init 0</code></li><li>重启：<code>init 6</code></li></ul></li><li><p><strong>init</strong>系统的运行级别</p><ul><li>0 关机</li><li>1 但用户</li><li>2 不完全多用户，不包含NFS服务</li><li>3 完全多用户</li><li>4 未分配</li><li>5 图形界面</li><li>6 重启</li></ul></li></ul><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h4><p>1.BIOS</p><ul><li>计算机通电后，第一件事就是读取刷入ROM芯片的开机程序，这个程序叫做 <strong>(Basic Input/Output System)</strong></li></ul><p>2.硬件自检</p><ul><li>BIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做 <strong>“硬件自检”</strong>（Power-On Self-Test)</li><li>如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。</li><li>如果没有问题，屏幕就会显示出CPU、内存、硬盘等信息。</li></ul><p>3.启动顺序</p><ul><li>硬件自检完成后，BIOS把控制权转交给下一阶段的启动程序。</li><li>这时，BIOS需要知道，<strong>“下一阶段的启动程序”</strong>具体存放在哪一个设备</li><li>BIOS需要有一个外部储存设备的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做 <strong>“启动顺序”</strong>（Boot Sequence）</li><li>BIOS按照 <strong>“启动顺序”</strong>，把控制权转交给排在第一位的储存设备。</li><li>这时，计算机读取该设备的第一个扇区，也就是读取最前面的512个字节。如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给 <strong>“启动顺序”</strong>中的下一个设备。</li><li>这最前面的512个字节，就叫做 <strong>“主引导记录”</strong>（Master boot record，缩写为MBR）</li></ul><p>4.主引导记录的结构</p><ul><li><strong>主引导记录</strong>只有512个字节，放不了太多东西。它的主要作用是，告诉计算机到硬盘的哪一个位置去找操作系统。<ul><li>第1-446字节：是用来记录系统的启动信息的,调用操作系统的机器码</li><li>第447-510字节(64个字节)：分区表（Partition table），分区表的作用，是将硬盘分成若干个区</li><li>第511-512字节：主引导记录签名（0x55和0xAA）</li></ul></li></ul><p>5.分区表</p><ul><li><strong>磁盘分区</strong>是使用分区编辑器在磁盘上划分几个逻辑部分</li><li>磁盘一旦划分成多个分区，不同类的目录与文件可以存储进不同的分区内</li><li><strong>主引导记录</strong> 因此必须知道将控制权转交给哪个区</li><li>分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，一个硬盘最多只能分四个一级分区，又叫做”主分区”<ul><li>第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。</li><li>第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</li><li>第5个字节：主分区类型，比如FAT32、NTFS等。</li><li>第6-8个字节：主分区最后一个扇区的物理位置。</li><li>第9-12字节：该主分区第一个扇区的逻辑地址。</li><li>第13-16字节：主分区的扇区总数。</li></ul></li></ul><p>6.硬盘启动</p><ul><li>计算机的控制权就要转交给硬盘的某个分区了</li><li>四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做 <strong>“卷引导记录”</strong>（Volume boot record，缩写为VBR）</li></ul><p>7.操作系统</p><ul><li>控制权转交给操作系统后，操作系统的内核首先被载入内存。</li><li>以Linux系统为例，先载入<code>/boot</code>目录下面的<code>kernel</code>。内核加载成功后，第一个运行的程序是<code>/sbin/init</code>。它根据配置文件（Debian系统是/etc/initab）产生init进程。这是Linux启动后的第一个进程，pid进程编号为1，其他进程都是它的后代</li><li>然后，<code>init</code>线程加载系统的各个模块，比如窗口程序和网络程序，直至执行<code>/bin/login</code>程序，跳出登录界面，等待用户输入用户名和密码。</li></ul><blockquote><p>转载自：<br><a href="https://mp.weixin.qq.com/s/-eANH2n_IDo6ojyP3RdeDA" target="_blank" rel="noopener">linux基础（一）</a><br><a href="https://mp.weixin.qq.com/s/C8kv8itPU1wHYGaH3tG9z" target="_blank" rel="noopener">linux基础（二）</a><br><a href="https://juejin.im/post/5c9319c2e51d450d597ea3ff" target="_blank" rel="noopener">前端linux基础，这一篇就够了</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;本篇文章主要是一些关于linux操作系统、linux诞生等一些背景知识及简单介绍。以及一些linux基础操作命令。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vue后台用户管理系统</title>
    <link href="https://annecoding.github.io/2019/04/25/vcustomers_demo/"/>
    <id>https://annecoding.github.io/2019/04/25/vcustomers_demo/</id>
    <published>2019-04-25T05:35:18.000Z</published>
    <updated>2019-05-20T03:21:06.180Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>本系统为一个简单的后台用户管理系统，主要是进一步掌握vue的指令和熟练使用。本系统结合vue语法实现对数据的增删改查和全局搜索功能。并实现在本地搭建json服务器，对数据操作等。<a href="https://github.com/Annecoding/vcustomers/" target="_blank" rel="noopener">github传送门</a><br><a id="more"></a></p><h3 id="Vue实战二-用户管理系统"><a href="#Vue实战二-用户管理系统" class="headerlink" title="Vue实战二  用户管理系统"></a>Vue实战二  用户管理系统</h3><h4 id="json-server本地搭建"><a href="#json-server本地搭建" class="headerlink" title="json-server本地搭建"></a>json-server本地搭建</h4><p>全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure><p>进入项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Projects/JSONSERVER</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm init --yes //也可以这样</span><br></pre></td></tr></table></figure><p>安装到本地项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install json-server --save</span><br></pre></td></tr></table></figure><p>修改package.json文件，设置启动项，并在目录下新建db.json文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "json:server": "json-server --watch db.json",</span><br><span class="line">    "json:server:remote": "json-server http://jsonplaceholder.typicode.com/db"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run json:server</span><br></pre></td></tr></table></figure><p>json-server传送门：<a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">https://github.com/typicode/json-server</a></p><h4 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="comment"># 本人在使用过程中，安装路由以后都是no</span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── About.vue    //关于</span><br><span class="line">│   │   ├── Add.vue            //添加用户</span><br><span class="line">│   │   ├── Alert.vue        //警告⚠️弹框</span><br><span class="line">│   │   ├── CustomerDetails.vue //用户详情信息</span><br><span class="line">│   │   ├── Customers.vue    //用户主页</span><br><span class="line">│   │   ├── Edit.vue    //编辑用户</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   └── main.js</span><br><span class="line">└── static</span><br></pre></td></tr></table></figure><h4 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h4><p>本项目是一个简单的基于vue.js学习而所做的个人博客的简单实现，已实现的功能如下：</p><ul><li>用户列表 😇</li><li>添加用户 😀</li><li>用户详情 🤗</li><li>编辑用户😊</li><li>删除用户 😏</li><li>全局搜索 🔍 用户</li><li>相应信息未添加完全弹窗  ⚠️</li></ul><h4 id="项目技术分析"><a href="#项目技术分析" class="headerlink" title="项目技术分析"></a>项目技术分析</h4><h5 id="用户列表"><a href="#用户列表" class="headerlink" title="用户列表"></a>用户列表</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- filterInput 应该遍历搜索的方法  根据名字匹配 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;tr v-for="customer in customers"&gt; --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"customer in filterBy(customers,filterInput)"</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;customer.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;customer.phone&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;customer.email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">v-bind:to</span>=<span class="string">"'/customer/'+customer.id"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  fetchCustmoers()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="string">"http://localhost:3000/users"</span>)</span><br><span class="line">                  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                      <span class="comment">//  console.log(response);</span></span><br><span class="line">                      <span class="keyword">this</span>.customers = response.body;</span><br><span class="line">                  &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line">updated () &#123;<span class="comment">//更新的时候也刷新列表</span></span><br><span class="line">    <span class="keyword">this</span>.fetchCustmoers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2ewzbeyvij31sa0u0n1l.jpg" alt></p><h5 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 触发自己所写的submit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit</span>=<span class="string">"addCustomer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span> <span class="attr">v-model</span>=<span class="string">"customer.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"phone"</span> <span class="attr">v-model</span>=<span class="string">"customer.phone"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"email"</span> <span class="attr">v-model</span>=<span class="string">"customer.email"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>学历<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"education"</span> <span class="attr">v-model</span>=<span class="string">"customer.education"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>毕业学校<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"graduationschool"</span> <span class="attr">v-model</span>=<span class="string">"customer.graduationschool"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"profession"</span> <span class="attr">v-model</span>=<span class="string">"customer.profession"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>个人简介<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input type="text" class="form-control" placeholder="profile" v-model="customer.profile"&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">v-model</span>=<span class="string">"customer.profile"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">      addCustomer(e)&#123;</span><br><span class="line">        <span class="comment">// console.log(123);</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.customer.name || !<span class="keyword">this</span>.customer.phone || !<span class="keyword">this</span>.customer.email ) &#123;</span><br><span class="line">            <span class="comment">// console.log("请添加相应的信息");</span></span><br><span class="line">            <span class="keyword">this</span>.alert = <span class="string">"请添加相应的信息!"</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> newCustomer = &#123;</span><br><span class="line">                name:<span class="keyword">this</span>.customer.name,</span><br><span class="line">                phone:<span class="keyword">this</span>.customer.phone,</span><br><span class="line">                email:<span class="keyword">this</span>.customer.email,</span><br><span class="line">                education:<span class="keyword">this</span>.customer.education,</span><br><span class="line">                graduationschool:<span class="keyword">this</span>.customer.graduationschool,</span><br><span class="line">                profession:<span class="keyword">this</span>.customer.profession,</span><br><span class="line">                profile:<span class="keyword">this</span>.customer.phone,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.$http.post(<span class="string">"http://localhost:3000/users"</span>,newCustomer)</span><br><span class="line">                      .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;<span class="comment">//回调事件</span></span><br><span class="line">                        <span class="comment">// console.log(response); response.body为所填写的信息</span></span><br><span class="line">                       <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"/"</span>,</span><br><span class="line">                                          query:&#123;</span><br><span class="line">                                                    alert:<span class="string">"用户信息添加成功!"</span><span class="comment">//添加成功后显示在主页面</span></span><br><span class="line">                                                &#125;</span><br><span class="line">                                          &#125;)<span class="comment">// 添加成功之后  跳转到主页面展示所有信息</span></span><br><span class="line">            &#125;)</span><br><span class="line">            e.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">        &#125;</span><br><span class="line">        e.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2ex11omh9j31cj0u078u.jpg" alt></p><h5 id="用户详情"><a href="#用户详情" class="headerlink" title="用户详情"></a>用户详情</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">v-bind:to</span>=<span class="string">"'/customer/'+customer.id"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  fetchCustmoers(id)&#123;<span class="comment">//根据id查询详情</span></span><br><span class="line">    <span class="keyword">this</span>.$http.get(<span class="string">"http://localhost:3000/users/"</span> + id)</span><br><span class="line">              .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(response);</span><br><span class="line">                  <span class="keyword">this</span>.customer = response.body;</span><br><span class="line">              &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2ex08kjqnj32au0qgad6.jpg" alt></p><h5 id="编辑用户"><a href="#编辑用户" class="headerlink" title="编辑用户"></a>编辑用户</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 触发自己所写的submit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit</span>=<span class="string">"updateCustomer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span> <span class="attr">v-model</span>=<span class="string">"customer.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"phone"</span> <span class="attr">v-model</span>=<span class="string">"customer.phone"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"email"</span> <span class="attr">v-model</span>=<span class="string">"customer.email"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>学历<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"education"</span> <span class="attr">v-model</span>=<span class="string">"customer.education"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>毕业学校<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"graduationschool"</span> <span class="attr">v-model</span>=<span class="string">"customer.graduationschool"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"profession"</span> <span class="attr">v-model</span>=<span class="string">"customer.profession"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>个人简介<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input type="text" class="form-control" placeholder="profile" v-model="customer.profile"&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">v-model</span>=<span class="string">"customer.profile"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  <span class="comment">// 来到这个页面根据id 获取到数据回显 fetchCustomer()  </span></span><br><span class="line">    fetchCustomer(id)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="string">"http://localhost:3000/users/"</span>+id)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response); </span><br><span class="line">            <span class="keyword">this</span>.customer = response.body;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    updateCustomer(e)&#123;</span><br><span class="line">      <span class="comment">// console.log(123);</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.customer.name || !<span class="keyword">this</span>.customer.phone || !<span class="keyword">this</span>.customer.email ) &#123;</span><br><span class="line">          <span class="comment">// console.log("请添加相应的信息");</span></span><br><span class="line">          <span class="keyword">this</span>.alert = <span class="string">"请添加对应的信息!"</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">let</span> updateCustomer = &#123;</span><br><span class="line">              name:<span class="keyword">this</span>.customer.name,</span><br><span class="line">              phone:<span class="keyword">this</span>.customer.phone,</span><br><span class="line">              email:<span class="keyword">this</span>.customer.email,</span><br><span class="line">              education:<span class="keyword">this</span>.customer.education,</span><br><span class="line">              graduationschool:<span class="keyword">this</span>.customer.graduationschool,</span><br><span class="line">              profession:<span class="keyword">this</span>.customer.profession,</span><br><span class="line">              profile:<span class="keyword">this</span>.customer.phone,</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//根据所传的id来更新  点击编辑的时候  触发此方法</span></span><br><span class="line">          <span class="keyword">this</span>.$http.put(<span class="string">"http://localhost:3000/users/"</span>+<span class="keyword">this</span>.$route.params.id,updateCustomer)</span><br><span class="line">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;<span class="comment">//回调事件</span></span><br><span class="line">                      <span class="comment">// console.log(response); response.body为所填写的信息</span></span><br><span class="line">                     <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"/"</span>,</span><br><span class="line">                                        query:&#123;</span><br><span class="line">                                                  alert:<span class="string">"用户信息更新成功!"</span><span class="comment">//添加成功后显示在主页面</span></span><br><span class="line">                                              &#125;</span><br><span class="line">                                        &#125;)<span class="comment">// 添加成功之后  跳转到主页面展示所有信息</span></span><br><span class="line">          &#125;)</span><br><span class="line">          e.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">      &#125;</span><br><span class="line">      e.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g2ex1kc8lvj31cg0u0q7g.jpg" alt></p><h5 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"搜索 🔍 "</span> <span class="attr">v-model</span>=<span class="string">"filterInput"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        customers:[],</span><br><span class="line">        alert:<span class="string">""</span>,</span><br><span class="line">        filterInput:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    filterBy(customers,value)&#123;<span class="comment">//value为input的值  filter会遍历数组的所有内容  根据匹配的名称返回整个对象</span></span><br><span class="line">      <span class="keyword">return</span> customers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">customer</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer.name.match(value);<span class="comment">//match方法匹配</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g2ex2jgkw0j32ao0isaca.jpg" alt></p><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">v-on:click</span>=<span class="string">"deleteCustomer(customer.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  deleteCustomer(id) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$http.delete(<span class="string">"http://localhost:3000/users/"</span> + id)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.$router.push(&#123;<span class="comment">//删除成功跳转到主页面</span></span><br><span class="line">              path:<span class="string">"/"</span>,</span><br><span class="line">              query:&#123;</span><br><span class="line">                  alert:<span class="string">"用户删除成功！"</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2ex3528zuj31sk0u0jw4.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;本系统为一个简单的后台用户管理系统，主要是进一步掌握vue的指令和熟练使用。本系统结合vue语法实现对数据的增删改查和全局搜索功能。并实现在本地搭建json服务器，对数据操作等。&lt;a href=&quot;https://github.com/Annecoding/vcustomers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github传送门&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://annecoding.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://annecoding.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-myblog项目实现</title>
    <link href="https://annecoding.github.io/2019/04/17/vue-blog%E9%A1%B9%E7%9B%AE/"/>
    <id>https://annecoding.github.io/2019/04/17/vue-blog项目/</id>
    <published>2019-04-17T01:34:10.000Z</published>
    <updated>2019-04-25T09:20:32.822Z</updated>
    
    <content type="html"><![CDATA[<p>本次项目实现是由vue脚手架构建的，并且vue已升级为3.5.5版本。完整项目可参见github源码展示，项目结构在代码中均有详细说明，<a href="https://github.com/Annecoding/vue-myblog" target="_blank" rel="noopener">vue-myblog传送门</a><br><a id="more"></a></p><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="comment"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">vue init webpack my-project</span><br><span class="line"><span class="comment"># 本人在使用过程中，安装路由以后都是no</span></span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── build                          //项目构建webpack相关代码</span><br><span class="line">│   ├── build.js//生产环境构建代码</span><br><span class="line">│   ├── check-versions.js        //检查node、npm等版本</span><br><span class="line">│   ├── logo.png</span><br><span class="line">│   ├── utils.js//构建工具相关</span><br><span class="line">│   ├── vue-loader.conf.js</span><br><span class="line">│   ├── webpack.base.conf.js//webpack基础配置</span><br><span class="line">│   ├── webpack.dev.conf.js        //webpack开发环境配置</span><br><span class="line">│   └── webpack.prod.conf.js//webpack生产环境配置</span><br><span class="line">├── config        //构建配置目录</span><br><span class="line">│   ├── dev.env.js//开发环境变量</span><br><span class="line">│   ├── index.js            //项目一些配置变量，比如路径和端口的修改</span><br><span class="line">│   └── prod.env.js//生产环境变量</span><br><span class="line">├── index.html               //项目入口文件</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json   //项目基本信息</span><br><span class="line">├── src                                      //源码目录</span><br><span class="line">│   ├── App.vue     //页面级vue组件，页面入口文件</span><br><span class="line">│   ├── assets        //资源目录</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── axios-auth.js //axios.auth自定义url请求头配置</span><br><span class="line">│   ├── components    //组件目录</span><br><span class="line">│   │   ├── AddBlog.vue//添加博客</span><br><span class="line">│   │   ├── BlogHeader.vue//博客header</span><br><span class="line">│   │   ├── EditBlog.vue//编辑博客</span><br><span class="line">│   │   ├── Hello.vue    //hello基础组件  暂未使用</span><br><span class="line">│   │   ├── ShowBlogs.vue//主页的博客列表</span><br><span class="line">│   │   └── SingleBlog.vue//点击标题进入某个博客的页面展示</span><br><span class="line">│   ├── main.js     //程序入口文件，加载各种公共组件，页面入口js文件</span><br><span class="line">│   └── routes.js    //路由模块</span><br><span class="line">└── static//静态文件目录，一些图片，json数据等</span><br><span class="line">    └── posts.json//请求本地的json文件</span><br></pre></td></tr></table></figure><p>关于项目具体结构分析可参见：<a href="https://segmentfault.com/a/1190000007880723" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007880723</a></p><h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>本项目是一个简单的基于vue.js学习而所做的个人博客的简单实现，已实现的功能如下：</p><ul><li>博客列表 😇</li><li>添加博客 😀</li><li>全局搜索 🔍博客</li><li>编辑博客 😊</li><li>删除博客 😏</li></ul><p>使用到的技术栈如下：</p><ul><li>vue-router</li><li>vue-resource，官方已停止更新</li><li>使用axios替换vue-resource，实现异步请求处理等~</li><li>本地存储postes.json数据，在static项目下面</li><li>firebase数据库(基于google，需要翻墙)</li><li>野狗数据(注册账号未成功，国内的平台，使用和firebase无异)</li></ul><h3 id="项目部分技术分析"><a href="#项目部分技术分析" class="headerlink" title="项目部分技术分析"></a>项目部分技术分析</h3><h4 id="vue自定义指令"><a href="#vue自定义指令" class="headerlink" title="vue自定义指令"></a>vue自定义指令</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//ShowBlogs.vue </span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-rainbow</span>&gt;</span>&#123;&#123;blog.title | to-uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指令私有化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ShowBlogs.vue</span></span><br><span class="line"><span class="comment">//指令私有化方式 local Api 改变h2标签颜色</span></span><br><span class="line">  directives: &#123;</span><br><span class="line">      <span class="string">'rainbow'</span>:&#123;<span class="comment">//对象</span></span><br><span class="line">        bind (el,binding,vnode)&#123;</span><br><span class="line">            el.style.color = <span class="string">"#"</span> + <span class="built_in">Math</span>.random().toString(<span class="number">16</span>).slice(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>全局指令API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//全局API</span></span><br><span class="line"><span class="comment">//v-rainbow  自定义指令使用  改变h2标题标签颜色</span></span><br><span class="line">Vue.directive(<span class="string">'rainbow'</span>, &#123;</span><br><span class="line">  bind(el,binding,vnode)&#123;</span><br><span class="line">    <span class="comment">//彩虹色 #+六位数字</span></span><br><span class="line">    el.style.color = <span class="string">"#"</span> + <span class="built_in">Math</span>.random().toString().slice(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>全局指令API + 参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//ShowBlogs.vue</span><br><span class="line"><span class="comment">&lt;!-- 双引号传值应该是字符串  字符串是要用引号引起来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-theme:column</span>=<span class="string">"'wide'"</span> <span class="attr">id</span>=<span class="string">"show-blogs"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//v-theme 自定义参数使用  改变宽度</span></span><br><span class="line">Vue.directive(<span class="string">'theme'</span>,&#123;</span><br><span class="line">  bind(el,binding,vnode)&#123;</span><br><span class="line">    <span class="keyword">if</span> (binding.value == <span class="string">'wide'</span>) &#123;<span class="comment">//所传值为wide</span></span><br><span class="line">      el.style.maxWidth = <span class="string">"1260px"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(binding.value == <span class="string">"narrow"</span>)&#123;<span class="comment">//所传值为narrow</span></span><br><span class="line">      el.style.minWidth == <span class="string">"560px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(binding.arg == <span class="string">'column'</span>)&#123;<span class="comment">//v-theme自定义参数传值，如果为column,则给其一个背景和padding</span></span><br><span class="line">      el.style.background = <span class="string">"cornflowerblue"</span>;</span><br><span class="line">      el.style.padding = <span class="string">'20px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vue过滤器"><a href="#vue过滤器" class="headerlink" title="vue过滤器"></a>vue过滤器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//ShowBlogs.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"blog in filteredBlogs"</span> <span class="attr">class</span>=<span class="string">"single-blog"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义指令v-rainbow使用  让标题改变颜色 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据值都变成大写  过滤器实现 左边为拿到的值 用value接收--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 点击标跳转（router-link -- a标签），路由跳转--router.js--到单个的blog，顺便传过去id   v-bind绑定数据为变量 showblog:id--singleblog:id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'/blog/' + blog.id"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-rainbow</span>&gt;</span>&#123;&#123;blog.title | to-uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文章内容太长  点击详情再全部展示内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &#123;&#123;blog.body | snippet&#125;&#125; --&gt;</span></span><br><span class="line">           &#123;&#123;blog.content | snippet&#125;&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>私有过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ShowBlogs.vue </span></span><br><span class="line"><span class="comment">//方法私有化 过滤器私有化</span></span><br><span class="line">filters:&#123;</span><br><span class="line">    <span class="comment">//   "to-uppercase":function (value) &#123;</span></span><br><span class="line">    <span class="comment">//       return value.toUpperCase();</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">//添加私有过滤器</span></span><br><span class="line">    toUppercase (value) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>全局过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义过滤器 实现标题都变为大写  实现全局搜索功能 </span></span><br><span class="line"><span class="comment">// Vue.filter("to-uppercase", function (value) &#123;//形参接收管道左边的值</span></span><br><span class="line"><span class="comment">//   return value.toUpperCase();//标题变为大写</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//自定义过滤器  实现文章内容部分展示功能</span></span><br><span class="line">Vue.filter(<span class="string">"snippet"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.slice(<span class="number">0</span>,<span class="number">100</span>) + <span class="string">"..."</span>;<span class="comment">//实现截取文章展示</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本次项目实现是由vue脚手架构建的，并且vue已升级为3.5.5版本。完整项目可参见github源码展示，项目结构在代码中均有详细说明，&lt;a href=&quot;https://github.com/Annecoding/vue-myblog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-myblog传送门&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://annecoding.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://annecoding.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js路由组件学习</title>
    <link href="https://annecoding.github.io/2019/04/16/vue%E8%B7%AF%E7%94%B1/"/>
    <id>https://annecoding.github.io/2019/04/16/vue路由/</id>
    <published>2019-04-16T07:34:12.000Z</published>
    <updated>2019-05-20T03:21:50.200Z</updated>
    
    <content type="html"><![CDATA[<p>vue.js路由的使用</p><p><strong>router-link</strong> 组件支持用户在具有路由功能的应用中 (点击) 导航。通过 to 属性指定目标地址，默认渲染成带有正确链接的 <code>a</code>标签，可以通过配置 tag 属性生成别的标签。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。<strong>router-view</strong>组件是一个 functional 组件，渲染路径匹配到的视图组件。<strong>router-view</strong>渲染的组件还可以内嵌自己的 <strong>router-view</strong>，根据嵌套路径，渲染嵌套组件。<br><a id="more"></a></p><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'home' &#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h3><p>很多时候，每个路由的数据都是包含在路由参数中。因为它也是个组件，所以可以配合 <transition> 和 <keep-alive> 使用。如果两个结合一起用，要确保在内层使用 <keep-alive><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></keep-alive></keep-alive></transition></p><h3 id="官方实例"><a href="#官方实例" class="headerlink" title="官方实例"></a>官方实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NotFound = &#123; <span class="attr">template</span>: <span class="string">'&lt;p&gt;Page not found&lt;/p&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Home = &#123; <span class="attr">template</span>: <span class="string">'&lt;p&gt;home page&lt;/p&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> About = &#123; <span class="attr">template</span>: <span class="string">'&lt;p&gt;about page&lt;/p&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = &#123;</span><br><span class="line">  <span class="string">'/'</span>: Home,</span><br><span class="line">  <span class="string">'/about'</span>: About</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentRoute: <span class="built_in">window</span>.location.pathname</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ViewComponent () &#123;</span><br><span class="line">      <span class="keyword">return</span> routes[<span class="keyword">this</span>.currentRoute] || NotFound</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123; <span class="keyword">return</span> h(<span class="keyword">this</span>.ViewComponent) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实例一-基础使用"><a href="#实例一-基础使用" class="headerlink" title="实例一  基础使用"></a>实例一  基础使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//引入路由模块</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//以基于全局的Vue对象使用http</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)  <span class="comment">//使用路由</span></span><br><span class="line">Vue.use(VueResource)  <span class="comment">//可以在任何一个组件中使用http</span></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: Home &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/helloworld'</span>, <span class="attr">component</span>: HelloWorld &#125;</span><br><span class="line">    ],</span><br><span class="line">    mode:<span class="string">'history'</span><span class="comment">//去掉路径的#/</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,<span class="comment">//调用router对象</span></span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span>h(App)</span><br><span class="line">  )&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接，相当于&lt;a&gt;的href. --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/helloworld"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例二-实现vue-myblog路由链接-其中router-js导出"><a href="#实例二-实现vue-myblog路由链接-其中router-js导出" class="headerlink" title="实例二  实现vue-myblog路由链接 其中router.js导出"></a>实例二  实现vue-myblog路由链接 其中router.js导出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> Routes <span class="keyword">from</span> <span class="string">'./routes'</span> <span class="comment">//引入新建的routes.js</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueResource)</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由并调用路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:Routes, <span class="comment">//使用路由--&gt;router.js</span></span><br><span class="line">  mode:<span class="string">"history"</span> <span class="comment">//去掉路径的#</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  router:router,<span class="comment">//最大的一层容器里面去使用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//routes.js</span></span><br><span class="line"><span class="keyword">import</span> ShowBlogs <span class="keyword">from</span> <span class="string">'./components/ShowBlogs.vue'</span></span><br><span class="line"><span class="keyword">import</span> AddBlog <span class="keyword">from</span> <span class="string">'./components/AddBlog.vue'</span> </span><br><span class="line"><span class="keyword">import</span> SingleBlog <span class="keyword">from</span> <span class="string">'./components/SingleBlog.vue'</span></span><br><span class="line"><span class="keyword">import</span> EditBlog <span class="keyword">from</span> <span class="string">'./components/EditBlog.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>[</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/"</span>,<span class="attr">component</span>:ShowBlogs&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/add"</span>,<span class="attr">component</span>:AddBlog&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/blog/:id"</span>,<span class="attr">component</span>:SingleBlog&#125;,<span class="comment">//路由的实现   根据id展示对应内容</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/edit/:id"</span>,<span class="attr">component</span>:EditBlog&#125;<span class="comment">//路由参数:id  根据一套模板跳转到某个位置  执行某个组件</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//BlogHeader.vue</span><br><span class="line">//路由的链接组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">exact</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/add"</span> <span class="attr">exact</span>&gt;</span>添加博客<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//ShowBlogs.vue</span><br><span class="line"><span class="comment">&lt;!-- 遍历出所有的博客内容 filterBlogs --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- key值只能是string、number，不能是对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"blog in filteredBlogs"</span> <span class="attr">class</span>=<span class="string">"single-blog"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义指令v-rainbow使用  让标题改变颜色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据值都变成大写  过滤器实现 左边为拿到的值 用value接收--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击标跳转（router-link -- a标签），路由跳转--router.js--到单个的blog，顺便传过去id   v-bind绑定数据为变量 showblog:id--singleblog:id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'/blog/' + blog.id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-rainbow</span>&gt;</span>&#123;&#123;blog.title | to-uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文章内容太长  点击详情再全部展示内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &#123;&#123;blog.body | snippet&#125;&#125; --&gt;</span></span><br><span class="line">       &#123;&#123;blog.content | snippet&#125;&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//SingleBlog.vue</span><br><span class="line"><span class="comment">&lt;!-- 编辑-根据id编辑哪个博客 /edit/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>= <span class="string">"'/edit/' + id"</span>&gt;</span>编辑博客</span><br><span class="line">  <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例二完整项目可参见github源码展示，项目结构在代码中均有详细说明，<strong><a href="https://github.com/Annecoding/vue-myblog" target="_blank" rel="noopener">vue-myblog传送门</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue.js路由的使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;router-link&lt;/strong&gt; 组件支持用户在具有路由功能的应用中 (点击) 导航。通过 to 属性指定目标地址，默认渲染成带有正确链接的 &lt;code&gt;a&lt;/code&gt;标签，可以通过配置 tag 属性生成别的标签。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。&lt;strong&gt;router-view&lt;/strong&gt;组件是一个 functional 组件，渲染路径匹配到的视图组件。&lt;strong&gt;router-view&lt;/strong&gt;渲染的组件还可以内嵌自己的 &lt;strong&gt;router-view&lt;/strong&gt;，根据嵌套路径，渲染嵌套组件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://annecoding.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://annecoding.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js中组件的使用</title>
    <link href="https://annecoding.github.io/2019/04/16/vue%E7%BB%84%E4%BB%B6/"/>
    <id>https://annecoding.github.io/2019/04/16/vue组件/</id>
    <published>2019-04-16T06:16:32.000Z</published>
    <updated>2019-05-20T03:21:41.740Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"><br>在<strong>vue.js</strong>之中，组件分为<strong>全局注册</strong>和<strong>局部注册</strong>组件，由模板、行为、样式组成。为了在模板中使用，组件要先注册后才能被调用。要注意的是，一个组件的 <strong>data 选项</strong>必须是一个<strong>函数</strong>。<br><a id="more"></a><br>组件的存在方便了开发使用，通常一个应用会以一棵嵌套的组件树的形式来组织。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g24ghhdi33j30vg0aw74t.jpg" alt></p><h3 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;</span><br><span class="line">  <span class="comment">// ... options ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"components-demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#components-demo'</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="局部注册组件"><a href="#局部注册组件" class="headerlink" title="局部注册组件"></a>局部注册组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件调用   绑定子组件的事件  并且在父组件定义实现方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">v-bind:title1</span>=<span class="string">"title1"</span> <span class="attr">v-on:titleChanged</span>=<span class="string">"updateTitle($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件绑定子组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-users</span> <span class="attr">v-bind:users</span>=<span class="string">"users"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-users</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;app-users v-bind:users="users"&gt;&lt;/app-users&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-footer</span> <span class="attr">v-bind:title1</span>=<span class="string">"title1"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./Header'</span>;</span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer'</span>;</span><br><span class="line"><span class="keyword">import</span> Users  <span class="keyword">from</span> <span class="string">'./Users'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;!--行为--&gt;</span></span><br><span class="line"><span class="comment">// &lt;!--</span></span><br><span class="line"><span class="comment">// 传值   String number boolean </span></span><br><span class="line"><span class="comment">// 传引用 Array Object 一个地方变化 其他的也变化</span></span><br><span class="line"><span class="comment">// --&gt;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'users'</span>,</span><br><span class="line">  <span class="comment">//props:["users"],从父组件向子组件进行属性传值</span></span><br><span class="line">  props:&#123;</span><br><span class="line">      users:&#123;</span><br><span class="line">          type:<span class="built_in">Array</span>,</span><br><span class="line">          required:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">   methods:&#123;</span><br><span class="line">     updateTitle:<span class="function"><span class="keyword">function</span>(<span class="params">title1</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.title1=title1;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      users:[],</span><br><span class="line">      title:<span class="string">"传递是一个值"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//注册组件</span></span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">'app-header'</span>:Header,</span><br><span class="line">    <span class="string">'app-footer'</span>:Footer,</span><br><span class="line">    <span class="string">'app-users'</span>:Users</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;<span class="comment">//组件实例化之前去请求到数据</span></span><br><span class="line">    <span class="keyword">this</span>.$http.get(<span class="string">"https://jsonplaceholder.typicode.com/users"</span>)</span><br><span class="line">              .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//  console.log(data);</span></span><br><span class="line">                <span class="keyword">this</span>.users = data.body;</span><br><span class="line">              &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line"><span class="comment">/* &lt;!--样式   scoped 控制不同组件不同样式  会添加唯一匹配的id --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#users</span>&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;<span class="comment">/* 告诉浏览器去理解你设置的边框和内边距的值是包含在width内的。</span></span><br><span class="line"><span class="comment">    也就是说，如果你将一个元素的width设为100px,那么这100px会包含其它的border和padding。*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;<span class="comment">/*让元素在必要的时候拆行*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;<span class="comment">/*属性用于设置或检索弹性盒子的扩展比率*/</span></span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">300px</span>;<span class="comment">/*属性用于设置或检索弹性盒伸缩基准值 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#000</span>;<span class="comment">/*字体颜色*/</span></span><br><span class="line">    <span class="attribute">cursor</span>: pointer;<span class="comment">/*鼠标以手显示*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在组件进行实例化之前请求数据，把数据传给users。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g24bv9wll6j30ug09e3zw.jpg" alt><br>关于所请求的数据如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g24br2er54j30vu0q4q71.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;br&gt;在&lt;strong&gt;vue.js&lt;/strong&gt;之中，组件分为&lt;strong&gt;全局注册&lt;/strong&gt;和&lt;strong&gt;局部注册&lt;/strong&gt;组件，由模板、行为、样式组成。为了在模板中使用，组件要先注册后才能被调用。要注意的是，一个组件的 &lt;strong&gt;data 选项&lt;/strong&gt;必须是一个&lt;strong&gt;函数&lt;/strong&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://annecoding.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://annecoding.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统常用命令整理（精选）</title>
    <link href="https://annecoding.github.io/2019/03/27/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://annecoding.github.io/2019/03/27/linux常用命令/</id>
    <published>2019-03-27T06:52:47.000Z</published>
    <updated>2019-08-19T00:45:48.873Z</updated>
    
    <content type="html"><![CDATA[<p>linux常用命令整理。经常用起来的命令也可能随时忘记。将持续更新ing~<br><a id="more"></a></p><h3 id="查看linux的版本"><a href="#查看linux的版本" class="headerlink" title="查看linux的版本"></a>查看linux的版本</h3><h4 id="查看版本号32位还是64位"><a href="#查看版本号32位还是64位" class="headerlink" title="查看版本号32位还是64位"></a>查看版本号32位还是64位</h4><p>方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# uname -a</span><br><span class="line">Linux localhost 3.10.0-862.14.4.el7.x86_64 #1 SMP Wed Sep 26 15:12:11 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# file /bin/ls</span><br><span class="line">/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=c5ad78cfc1de12b9bb6829207cececb990b3e987, stripped</span><br></pre></td></tr></table></figure></p><p>方法三<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /proc/version</span><br><span class="line">Linux version 3.10.0-862.14.4.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) ) #1 SMP Wed Sep 26 15:12:11 UTC 2018</span><br></pre></td></tr></table></figure></p><p>方法四<br>32位的系统中int类型和long类型一般都是4字节。<br>64位的系统中int类型还是4字节的，但是long已变成了8字节。linux系统中可用”getconf WORD_BIT”和”getconf LONG_BIT”获得word和long的位数。<br>64位系统中应该分别得到32和64。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# getconf LONG_BIT</span><br><span class="line">64</span><br><span class="line">[root@localhost ~]# getconf WORD_BIT</span><br><span class="line">32</span><br></pre></td></tr></table></figure></p><h4 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h4><p>方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# lsb_release -a</span><br><span class="line">LSB Version:    :core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID: CentOS</span><br><span class="line">Description:    CentOS Linux release 7.5.1804 (Core) </span><br><span class="line">Release:        7.5.1804</span><br><span class="line">Codename:       Core</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/os-release</span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;7 (Core)&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;7&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;</span><br><span class="line">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;</span><br></pre></td></tr></table></figure></p><p>方法三<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br></pre></td></tr></table></figure></p><p>方法四<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -q centos-release</span><br><span class="line">centos-release-7-5.1804.5.el7.centos.x86_64</span><br></pre></td></tr></table></figure></p><h4 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h4><p>方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /proc/version </span><br><span class="line">Linux version 3.10.0-862.14.4.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) ) #1 SMP Wed Sep 26 15:12:11 UTC 2018</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# uname -a </span><br><span class="line">Linux localhost 3.10.0-862.14.4.el7.x86_64 #1 SMP Wed Sep 26 15:12:11 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><h3 id="查询磁盘使用情况"><a href="#查询磁盘使用情况" class="headerlink" title="查询磁盘使用情况"></a>查询磁盘使用情况</h3><h4 id="目录使用状况"><a href="#目录使用状况" class="headerlink" title="目录使用状况"></a>目录使用状况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G  7.0G   31G  19% /</span><br><span class="line">devtmpfs        909M     0  909M   0% /dev</span><br><span class="line">tmpfs           920M     0  920M   0% /dev/shm</span><br><span class="line">tmpfs           920M  536K  919M   1% /run</span><br><span class="line">tmpfs           920M     0  920M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           184M     0  184M   0% /run/user/0</span><br></pre></td></tr></table></figure><p>其中，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a：显示所有文件系统的磁盘使用情况，包括0块（block）的文件系统，如/proc文件系统。</span><br><span class="line">-k：以k字节为单位显示。</span><br><span class="line">-i：显示i节点信息，而不是磁盘块。</span><br><span class="line">-t：显示各指定类型的文件系统的磁盘空间使用情况。</span><br><span class="line">-x：列出不是某一指定类型文件系统的磁盘空间使用情况（与t选项相反）。</span><br><span class="line">-T：显示文件系统类型。</span><br></pre></td></tr></table></figure></p><h4 id="单独文件夹使用状况"><a href="#单独文件夹使用状况" class="headerlink" title="单独文件夹使用状况"></a>单独文件夹使用状况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# du -sh /etc/</span><br><span class="line">38M     /etc/</span><br></pre></td></tr></table></figure><p>其中，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-s：对每个Names参数只给出占用的数据块总数。</span><br><span class="line">-a：递归地显示指定目录中各文件及子目录中各文件占用的数据块数。若既不指定-s，也不指定-a，则只显示Names中的每一个目录及其中的各子目录所占的磁盘块数。</span><br><span class="line">-b：以字节为单位列出磁盘空间使用情况（系统默认以k字节为单位）。</span><br><span class="line">-k：以1024字节为单位列出磁盘空间使用情况。</span><br><span class="line">-c：最后再加上一个总计（系统默认设置）。</span><br><span class="line">-l：计算所有的文件大小，对硬链接文件，则计算多次。</span><br><span class="line">-x：跳过在不同文件系统上的目录不予统计。</span><br></pre></td></tr></table></figure></p><h3 id="查询内存状况"><a href="#查询内存状况" class="headerlink" title="查询内存状况"></a>查询内存状况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.8G         71M        1.2G        612K        533M        1.6G</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><p>对于OS来说，buffers+cached已用。<br>对应用程序来说，可用内存=free memory+buffers+cached。</p><h3 id="查询cpu"><a href="#查询cpu" class="headerlink" title="查询cpu"></a>查询cpu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# top</span><br><span class="line">top - 16:23:00 up  1:35,  4 users,  load average: 0.00, 0.01, 0.05</span><br><span class="line">Tasks:  76 total,   1 running,  75 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  1882740 total,  1262492 free,    74040 used,   546208 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  1655412 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                         </span><br><span class="line">    1 root      20   0   43384   3724   2556 S  0.0  0.2   0:01.34 systemd                                                         </span><br><span class="line">    2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd                                                        </span><br><span class="line">    3 root      20   0       0      0      0 S  0.0  0.0   0:00.01 ksoftirqd/0                                                     </span><br><span class="line">    4 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0                                                     </span><br><span class="line">    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H                                                    </span><br><span class="line">    6 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kworker/u2:0                                                    </span><br><span class="line">    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0</span><br></pre></td></tr></table></figure><ul><li><p>第一行信息（top）：<br>“16:23:00”为系统当前时刻；<br>“1:39”为系统启动后到现在的运作时间；<br>“4 users”为当前登录到系统的用户，更确切的说是登录到用户的终端数 – 同一个用户同一时间对系统多个终端的连接将被视为多个用户连接到系统，这里的用户数也将表现为终端的数目；<br>“load average”为当前系统负载的平均值，后面的三个值分别为1分钟前、5分钟前、15分钟前进程的平均数，一般的可以认为这个数值超过 CPU 数目时，CPU 将比较吃力的负载当前系统所包含的进程；</p></li><li><p>第二行信息（Tasks）：<br>“76 total”为当前系统进程总数；<br>“1 running”为当前运行中的进程数；<br>“75 sleeping”为当前处于等待状态中的进程数；<br>“0 stoped”为被停止的系统进程数；<br>“0 zombie”为被复原的进程数；</p></li><li><p>第三行（Cpus）：<br>分别表示了 CPU 当前的使用率；</p></li><li><p>第四行（Mem）：<br>分别表示了内存总量、当前使用量、空闲内存量、以及缓冲使用中的内存量；</p></li><li><p>第五行（Swap）：<br>表示类别同第四行（Mem），但此处反映着交换分区（Swap）的使用情况。通常，交换分区（Swap）被频繁使用的情况，将被视作物理内存不足而造成的。　　　　</p></li></ul><p>正文内容解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PID：进程的ID</span><br><span class="line">USER：进程所有者</span><br><span class="line">PR：进程的优先级别，越小越优先被执行</span><br><span class="line">NInice：值</span><br><span class="line">VIRT：进程占用的虚拟内存</span><br><span class="line">RES：进程占用的物理内存</span><br><span class="line">SHR：进程使用的共享内存</span><br><span class="line">S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数</span><br><span class="line">%CPU：进程占用CPU的使用率</span><br><span class="line">%MEM：进程使用的物理内存和总内存的百分比</span><br><span class="line">TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。</span><br><span class="line">COMMAND：进程启动命令名称</span><br></pre></td></tr></table></figure></p><h3 id="查询Linux系统网络信息"><a href="#查询Linux系统网络信息" class="headerlink" title="查询Linux系统网络信息"></a>查询Linux系统网络信息</h3><h4 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要安装yum install net-tools</span></span><br><span class="line">ifconfig  </span><br><span class="line"><span class="comment">#或者 </span></span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure><p><code>netstat</code>属于<code>net-tools</code>工具集，而<code>ss</code>属于<code>iproute</code>。其命令对应如下，是时候和net-tools说Bye了。</p><table><thead><tr><th>用途</th><th>net-tools</th><th>iproute</th></tr></thead><tbody><tr><td>统计</td><td>ifconfig</td><td>ss</td></tr><tr><td>地址</td><td>netstat</td><td>ip addr</td></tr><tr><td>路由</td><td>route</td><td>ip route</td></tr><tr><td>邻居</td><td>arp</td><td>ip neigh</td></tr><tr><td>VPN</td><td>iptunnel</td><td>ip tunnel</td></tr><tr><td>VLAN</td><td>vconfig</td><td>ip link</td></tr><tr><td>组播</td><td>ipmaddr</td><td>ip maddr</td></tr></tbody></table><h4 id="查看网络端口状态"><a href="#查看网络端口状态" class="headerlink" title="查看网络端口状态"></a>查看网络端口状态</h4><h5 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h5><p><strong>netstat命令</strong>用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</p><p>常用参数</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-a</code></td><td>显示所有连线中的Socket</td></tr><tr><td><code>-n</code></td><td>直接使用ip地址，而不通过域名服务器</td></tr><tr><td><code>-t</code></td><td>显示TCP传输协议的连线状况</td></tr><tr><td><code>-u</code></td><td>显示UDP传输协议的连线状况</td></tr><tr><td><code>-l</code></td><td>显示监控中的服务器的Socket</td></tr><tr><td><code>-p</code></td><td>显示正在使用Socket的程序识别码和程序名称</td></tr><tr><td><code>-r</code></td><td>显示Routing Table</td></tr></tbody></table><p>使用方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有tcp端口状态信息</span></span><br><span class="line">$ netstat -ntlp</span><br><span class="line"><span class="comment"># 查看所有tcp和udp端口状态信息</span></span><br><span class="line">$ netstat -ntulp</span><br></pre></td></tr></table></figure></p><p>🌟 高级操作</p><p>查看连接本机最多的前10个ip地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -antp | awk <span class="string">'&#123;print $4&#125;'</span> | cut -d <span class="string">':'</span> -f1 | sort | uniq -c  | sort -n -k1 -r | head -n 10</span><br></pre></td></tr></table></figure></p><h5 id="ss命令"><a href="#ss命令" class="headerlink" title="ss命令"></a>ss命令</h5><p><strong>ss命令</strong>用来显示处于活动状态的套接字信息。</p><p>当服务器的socket连接数量变得非常大时，无论是使用<code>netstat</code>命令还是直接<code>cat /proc/net/tcp</code>，执行速度都会很慢。</p><p>天下武功唯快不破。<strong>ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。</strong></p><p>常用参数</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-a</code></td><td>显示所有套接字（sockets）</td></tr><tr><td><code>-n</code></td><td>不解析服务名称</td></tr><tr><td><code>-t</code></td><td>仅显示 TCP套接字（sockets）</td></tr><tr><td><code>-u</code></td><td>仅显示 UCP套接字（sockets）</td></tr><tr><td><code>-l</code></td><td>显示监听状态的套接字（sockets）</td></tr><tr><td><code>-p</code></td><td>显示使用套接字（socket）的进程</td></tr><tr><td><code>-r</code></td><td>解析主机名</td></tr></tbody></table><p>使用方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看连接的tcp端口</span></span><br><span class="line">$ ss -ntlp</span><br><span class="line"><span class="comment"># 查看连接的udp和tcp端口</span></span><br><span class="line">$ ss -ntulp</span><br><span class="line"><span class="comment"># 出所有端口为 22（ssh）的连接</span></span><br><span class="line">$ ss state all sport = :ssh</span><br></pre></td></tr></table></figure></p><p>💡 看起来都差不多吧，但是，为什么要用ss替代netstat呢，因为对于1w以上连接数，速度都可以秒netstat，可以使用<code>time</code>命令查看执行时间。</p><h3 id="查看dns信息"><a href="#查看dns信息" class="headerlink" title="查看dns信息"></a>查看dns信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/resolv.conf</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a><strong>cat</strong></h4><p>最常用的就是<code>cat</code>命令了，注意，如果文件很大的话，cat命令的输出结果会疯狂在终端上输出，可以多次按<code>ctrl+c</code>终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看文件大小</span></span><br><span class="line">$ du -h file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件内容</span></span><br><span class="line">$ cat file</span><br></pre></td></tr></table></figure><h4 id="sort-排序命令"><a href="#sort-排序命令" class="headerlink" title="sort 排序命令"></a>sort 排序命令</h4><p>将输入按照一定方式排序，然后再输出,它支持的排序有按字典排序,数字排序，按月份排序，随机排序，反转排序，指定特定字段进行排序等等。<br>默认为字典排序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/passwd | sort</span><br></pre></td></tr></table></figure><p>反转排序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/passwd | sort -r</span><br></pre></td></tr></table></figure><p>按特定字段排序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/passwd | sort -t<span class="string">':'</span> -k 3</span><br></pre></td></tr></table></figure><p>上面的<code>-t</code>参数用于指定字段的分隔符，这里是以<code>:</code>作为分隔符；<code>-k</code> 字段号用于指定对哪一个字段进行排序。这里<code>/etc/passwd</code>文件的第三个字段为数字，默认情况下是以字典序排序的，如果要按照数字排序就要加上<code>-n</code>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/passwd | sort -t<span class="string">':'</span> -k 3 -n</span><br></pre></td></tr></table></figure><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>既然cat有这个问题，针对比较大的文件，我们就可以使用<code>less</code>命令打开某个文件。 类似vim，less可以在输入<code>/</code>后进入查找模式，然后按<code>n</code>(N)向下(上)查找。<br>有许多操作，都和vim类似，你可以类比看下。</p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a><strong>tail</strong></h4><p>大多数做服务端开发的同学，都了解这么命令。比如，查看nginx的滚动日志。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f access.log</span><br></pre></td></tr></table></figure><p>tail命令可以静态的查看某个文件的最后n行，与之对应的，head命令查看文件头n行。但head没有滚动功能，就像尾巴是往外长的，不会反着往里长。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tail -n100 access.log</span><br><span class="line">$ head -n100 access.log</span><br></pre></td></tr></table></figure><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a><strong>crontab</strong></h4><p>这就是linux本地的job工具。不是分布式的，你要不是运维，就不要用了。比如，每10分钟提醒喝茶上厕所。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/10 * * * * /home/xjj/wc10min</span><br></pre></td></tr></table></figure><h4 id="date"><a href="#date" class="headerlink" title="date"></a><strong>date</strong></h4><p>date命令用来输出当前的系统时间，可以使用-s参数指定输出格式。但设置时间涉及到设置硬件，所以有另外一个命令叫做<code>hwclock</code>。</p><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a><strong>xargs</strong></h4><p>xargs读取输入源，然后逐行处理。这个命令非常有用。举个栗子，删除目录中的所有class文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find . | grep .class$ | xargs rm -rvf</span><br><span class="line"></span><br><span class="line"><span class="comment">#把所有的rmvb文件拷贝到目录</span></span><br><span class="line">ls *.rmvb | xargs -n1 -i cp &#123;&#125; /mount/xiaodianying</span><br></pre></td></tr></table></figure><h3 id="cut命令"><a href="#cut命令" class="headerlink" title="cut命令"></a>cut命令</h3><p>cut是一个选取命令，就是将一段数据经过分析，取出我们想要的。一般来说，选取信息通常是针对“行”来进行分析的，并不是整篇信息分析的。</p><p><strong>命令原型</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut [选项]… [文件]…</span><br></pre></td></tr></table></figure><p><strong>使用说明</strong></p><p>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。<br>如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p><p><strong>主要参数</strong></p><p><strong>-b ：</strong>以字节字节（bytes）为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。<br><strong>-c ：</strong>以字符（characters）为单位进行分割。<br><strong>-d ：</strong>自定义分隔符，默认为制表符。<br><strong>-f ：</strong>与-d一起使用，指定显示哪个区域（fields）。<br><strong>-n ：</strong>取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除。</p><table><thead><tr><th style="text-align:left">范围</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>a-b</code></td><td style="text-align:left">a 和 b 之间的范围（闭区间）</td></tr><tr><td style="text-align:left"><code>a</code></td><td style="text-align:left">与范围 <code>a-a</code> 等价</td></tr><tr><td style="text-align:left"><code>-b</code></td><td style="text-align:left">与范围 <code>1-a</code> 等价</td></tr><tr><td style="text-align:left"><code>b-</code></td><td style="text-align:left">与范围 <code>b-∞</code> 等价</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ who</span><br><span class="line">rocrocket :0           2009-01-08 11:07</span><br><span class="line">rocrocket pts/0        2009-01-08 11:23 (:0.0)</span><br><span class="line">rocrocket pts/1        2009-01-08 14:15 (:0.0)</span><br><span class="line"><span class="comment"># 选取第1到第3个字节</span></span><br><span class="line">$ who | cut -b -3</span><br><span class="line">roc</span><br><span class="line">roc</span><br><span class="line">roc</span><br><span class="line"><span class="comment"># 选取第3个字节到行尾</span></span><br><span class="line">$ who | cut -b 3-</span><br><span class="line">crocket :0           2009-01-08 11:07</span><br><span class="line">crocket pts/0        2009-01-08 11:23 (:0.0)</span><br><span class="line">crocket pts/1        2009-01-08 14:15 (:0.0)</span><br><span class="line"><span class="comment"># 用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域</span></span><br><span class="line"><span class="comment"># 取第1，3，4，5段</span></span><br><span class="line">$ cat /etc/passwd | head -n 5 | cut -d : -f 1,3-5</span><br><span class="line">root:0:0:root</span><br><span class="line">bin:1:1:bin</span><br><span class="line">daemon:2:2:daemon</span><br><span class="line">adm:3:4:adm</span><br><span class="line">lp:4:7:lp</span><br><span class="line"><span class="comment"># 取第1，3，4，5，7段</span></span><br><span class="line">$ cat /etc/passwd|head -n 5 | cut -d : -f 1,3-5,7</span><br><span class="line">root:0:0:root:/bin/bash</span><br><span class="line">bin:1:1:bin:/sbin/nologin</span><br><span class="line">daemon:2:2:daemon:/sbin/nologin</span><br><span class="line">adm:3:4:adm:/sbin/nologin</span><br><span class="line">lp:4:7:lp:/sbin/nologin</span><br><span class="line"><span class="comment"># 取第1，2段</span></span><br><span class="line">$ cat /etc/passwd|head -n 5 | cut -d : -f -2</span><br><span class="line">root:x</span><br><span class="line">bin:x</span><br><span class="line">daemon:x</span><br><span class="line">adm:x</span><br><span class="line">lp:x</span><br><span class="line"><span class="comment"># 用空格切割后的第1,2个元素</span></span><br><span class="line">$ ll | cut -d <span class="string">' '</span> -f 1,2 </span><br><span class="line">total 252</span><br><span class="line">-rw-r--r-- 1</span><br><span class="line">drwxrwxr-x 4</span><br><span class="line">-rw-r--r-- 1</span><br><span class="line">drwxr-xr-x 2</span><br><span class="line">-rw-r--r-- 1</span><br><span class="line">-rw-r--r-- 1</span><br><span class="line">-rw-r--r-- 1</span><br></pre></td></tr></table></figure><p>💡 <strong>cut有哪些缺陷和不足？</strong></p><p>猜出来了吧？对，就是在处理多空格时。<br>如果文件里面的某些域是由若干个空格来间隔的，那么用cut就有点麻烦了，<strong>因为cut只擅长处理“以一个字符间隔”</strong>。</p><h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a><strong>grep命令</strong></h3><p><code>grep</code>按行检索输入的每一行，如果输入行包含模式<code>PATTERN</code>，则输出这一行。</p><p>1.输出文件<code>/etc/passwd</code>中包含<code>root</code>的行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ grep root /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"><span class="comment"># 从标准输入获得</span></span><br><span class="line">$ cat /etc/passwd | grep root</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure><p>🌟 需要注意的地方是：当grep的输入既来自文件也来自标准输入时，grep将忽略标准输入的内容不做处理，除非使用符号<code>-</code>来代表标准输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/passwd | grep root /etc/passwd -</span><br><span class="line">/etc/passwd:root:x:0:0:root:/root:/bin/bash</span><br><span class="line">/etc/passwd:operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">(standard input):root:x:0:0:root:/root:/bin/bash</span><br><span class="line">(standard input):operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure><p>此时，grep会标明哪些结果来自于文件哪些来自于标准输入。</p><p>2.输出文件/etc/passwd和文件/etc/group中以root开头的行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep <span class="string">"^root"</span> /etc/passwd /etc/group</span><br><span class="line">/etc/passwd:root:x:0:0:root:/root:/bin/bash</span><br><span class="line">/etc/group:root:x:0:</span><br></pre></td></tr></table></figure><p>3.输出文件/etc/passwd中以/bin/bash结尾的行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep <span class="string">"/bin/bash$"</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">learner:x:1000:1000::/home/learner:/bin/bash</span><br></pre></td></tr></table></figure><p>🌟 注意以上两个例子中<code>PATTERN</code>被双引号引用起来以防止被shell解析。</p><p>4.输出文件/etc/passwd中不以a-s中任何一个字母开头的行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep <span class="string">"^[^a-s]"</span> /etc/passwd </span><br><span class="line">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">tcpdump:x:72:72::/:/sbin/nologin</span><br></pre></td></tr></table></figure><p>这里需要理解两个<code>^</code>间不同的含义，第一个<code>^</code>表示行首，第二个在<code>[]</code>内部的首个字符<code>^</code>表示取反。</p><p>5.输出文件/etc/passwd中字符<code>0</code>连续出现3次及以上的行(注意转义字符’\’)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep <span class="string">"0\&#123;3,\&#125;"</span> /etc/passwd</span><br><span class="line">learner:x:1000:1000::/home/learner:/bin/bash</span><br></pre></td></tr></table></figure><p>6.输出文件/etc/passwd中以字符<code>r</code>或<code>l</code>开头的行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ grep <span class="string">"^[rl]"</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">learner:x:1000:1000::/home/learner:/bin/bash</span><br></pre></td></tr></table></figure><p>7.选项<code>-i</code>使grep在匹配模式时忽略大小写⭐️：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep -i abcd file </span><br><span class="line">ABCD</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">abcd</span></span>() &#123;</span><br></pre></td></tr></table></figure><p>8.选项<code>-o</code>表示只输出匹配的字符⭐️，而不是整行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep -oi abcd file </span><br><span class="line">ABCD</span><br><span class="line">abcd</span><br></pre></td></tr></table></figure><p>9.选项<code>-c</code>统计匹配的行数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep -oic abcd file</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>💡 在这里值得一提的是，<code>wc -l</code>命令也可以用来统计行数，且比<code>grep -c</code>命令更为高效。也可以用<code>time</code>命令来测试哈。</p><p>10.选项<code>-v</code>表示取反匹配⭐️，如输出/etc/passwd中不以/sbin/nologin结尾的行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ grep -v <span class="string">"/sbin/nologin$"</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">learner:x:1000:1000::/home/learner:/bin/bash</span><br></pre></td></tr></table></figure><p>11.选项<code>-E</code>可以使用扩展的正则表达式，如同执行<code>egrep</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ egrep <span class="string">"^root|^learner"</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">learner:x:1000:1000::/home/learner:/bin/bash</span><br></pre></td></tr></table></figure><p>⭐️ 使用扩展正则表达式意味着不需要转义就能表示字符的特殊含义，包括<code>?</code>,<code>+</code>,<code>{</code>,<code>|</code>,<code>(</code>和<code>)</code>。</p><p>选项<code>-P</code>表示使用perl的正则表达式进行匹配<br>如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"helloworld123456"</span>| grep -oP <span class="string">"\d+"</span></span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>perl正则中”\d”表示数字，<code>+</code>表示匹配一到多次(同vim)。</p><p>选项<code>-a</code>将二进制文件当成文本文件处理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep -a online /usr/bin/ls</span><br><span class="line">%s online <span class="built_in">help</span>: &lt;%s&gt;</span><br></pre></td></tr></table></figure><p>💡 <strong>高级玩法</strong></p><p>1.grep用来对内容进行过滤，带上<code>--color</code>参数，可以在支持的终端可以打印彩色，参数<code>n</code>则输出具体的行数，用来快速定位。<br>比如：查看nginx日志中的POST请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -rn --color POST access.log</span><br></pre></td></tr></table></figure><p>推荐每次都使用这样的参数。</p><p>2.如果我想要看某个异常前后相关的内容，就可以使用ABC参数。它们是几个单词的缩写，经常被使用。 <strong>A</strong>  after  内容后n行 <strong>B</strong>  before  内容前n行 <strong>C</strong>  count?  内容前后n行<br>就像是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -rn --color Exception -A10 -B2   error.log</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：<br><a href="https://segmentfault.com/a/1190000007416745" target="_blank" rel="noopener">linux基础命令介绍五：文本过滤 grep</a><br><a href="https://juejin.im/post/5d134fbfe51d4510727c80d1" target="_blank" rel="noopener">Linux上，最常用的一批命令解析(十年精选)</a><br><a href="https://juejin.im/post/5c272ec66fb9a049e93ccffe" target="_blank" rel="noopener">Linux之《荒岛余生》（五）网络篇</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux常用命令整理。经常用起来的命令也可能随时忘记。将持续更新ing~&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Centos" scheme="https://annecoding.github.io/tags/Centos/"/>
    
      <category term="grep" scheme="https://annecoding.github.io/tags/grep/"/>
    
      <category term="cut" scheme="https://annecoding.github.io/tags/cut/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="https://annecoding.github.io/2019/03/25/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://annecoding.github.io/2019/03/25/Linux学习笔记/</id>
    <published>2019-03-25T02:20:24.000Z</published>
    <updated>2019-07-28T01:44:06.493Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>如果你以前从未接触过Linux，可能就不清楚为什么会有这么多不同的Linux发行版。在查看Linux软件包时，你肯定被发行版、LiveCD和GNU之类的术语搞晕过。那，我也不会讲给你听。🤣<br><a id="more"></a></p><h3 id="基本的bash命令"><a href="#基本的bash命令" class="headerlink" title="基本的bash命令"></a>基本的bash命令</h3><p><strong>处理文件</strong> </p><ul><li><p>链接文件,如需要在系统上维护同一文件的两份或多份副本，除了保存多份单独的物理文件副本之外，还可以采用保存一份物理文件副本和多个虚拟副本的方<br>法。</p><ul><li><p>软链接（符号链接），通过符号链接在一起的文件，彼此的内容并不相同。可用inode查看文件是否为独立文件<code>ls -i *data_file</code>。可用<code>ln -s 源文件 链接文件</code>创建符号链接文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s data_file sl_data_file</span><br></pre></td></tr></table></figure></li><li><p>硬链接，引用硬链接文件等同于引用了源文件，只能对处于同一存储媒体的文件创建硬链接。可用<code>ln 源文件 链接文件</code>来创建硬链接文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln code_file hl_code_file</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>复制文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -i 源文件 目的文件</span><br></pre></td></tr></table></figure></li><li><p><code>i</code>询问是否覆盖</p></li><li><p>移动文件，也可➕<code>i</code>参数询问是否移动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv 源文件 目的文件</span><br></pre></td></tr></table></figure></li></ul><p><strong>处理目录</strong></p><ul><li>删除目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -R,递归删除目录</span></span><br><span class="line">rm -r xxx</span><br><span class="line"><span class="comment"># 递归强制删除目录，不提示，慎用</span></span><br><span class="line">rm -rf xxx</span><br><span class="line"><span class="comment"># rmdir,只能删除空目录</span></span><br><span class="line">rmdir xxx</span><br></pre></td></tr></table></figure></li></ul><p><strong>查看文件</strong></p><ul><li><p>file,查看文件类型及编码方式，查看是否有相关链接等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# file passwd </span><br><span class="line">passwd: ASCII text</span><br></pre></td></tr></table></figure></li><li><p>cat</p><ul><li>cat -n 添加行号</li><li>cat -b 只给有内容的数据添加行号</li><li>cat -T 可去掉文件中的制表符</li></ul></li><li><p>more，显示每页数据，可以按需切换，man more<br>只支持文本文件中的基本移动</p></li><li><p>less(less is more),more升级，能识别上下键及翻页键</p></li><li><p>tail，查寻文件最后十行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看最后两行</span><br><span class="line">tail -n 2 test.txt</span><br></pre></td></tr></table></figure></li><li><p>其中常用的是，动态的追踪最后十行日志等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f test.txt</span><br></pre></td></tr></table></figure></li><li><p>head，查询文件的前十行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询文件的前5行</span><br><span class="line">head -5 test.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="监测程序"><a href="#监测程序" class="headerlink" title="监测程序"></a>监测程序</h3><ul><li>ps，常用<code>ps -ef</code><ul><li><code>e</code>显示所有的进程</li><li><code>f</code>显示完整格式输出</li><li><code>UID</code>启动这些进程的用户</li><li><code>PID</code>进程ID</li><li><code>PPID</code>父进程的进程号</li><li><code>C</code>进程生命周期中的CPU利用率</li><li><code>STIME</code>进程启动的系统时间</li><li><code>TTY</code>终端设备</li><li><code>TIME</code>运行进程需要的累计CPU时间</li><li><code>CMD</code>启动的程序名称</li></ul></li><li><p><code>ps -l</code>可查看更多信息</p><ul><li><code>F</code>内核分配给进程的系统标记</li><li><code>S</code>进程的状态（O代表正在运行；S代表在休眠；R代表可运行，正等待运行；Z代表僵化，进程已结束但父进程已不存在；T代表停止）</li><li><code>PRI</code>进程的优先级（越大的数字代表越低的优先级）</li><li><code>NI</code>谦让度值用来参与决定优先级</li><li><code>ADDR</code>进程的内存地址</li><li><code>SZ</code>假如进程被换出，所需交换空间的大致大小</li><li><code>WCHAN</code>进程休眠的内核函数的地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ps -l</span><br><span class="line">F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</span><br><span class="line">4 S     0 27869 27867  0  80   0 - 28891 do_wai pts/0    00:00:00 bash</span><br><span class="line">0 R     0 27888 27869  0  80   0 - 38300 -      pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure></li></ul></li><li><p>top，实时监测进程</p><ul><li><code>PR</code>进程优先级</li><li><code>VIRT</code>虚拟内存总量</li><li><code>RES</code>物理内存总量</li><li><code>SHR</code>进程和其他进程的内存总量</li><li><code>TIME+</code>时间总量</li></ul></li><li><p>kill，强制终止进程，<code>s</code>可指定其他参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill PID</span><br><span class="line">kill -s HUP 3940</span><br></pre></td></tr></table></figure></li><li><p>killall，支持通过进程名来结束进程，<strong>通配符等命令慎用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall http*</span><br></pre></td></tr></table></figure></li></ul><h3 id="监测磁盘空间"><a href="#监测磁盘空间" class="headerlink" title="监测磁盘空间"></a>监测磁盘空间</h3><ul><li>mount，挂载存储媒体</li><li><p>该命令包含的四部分如下</p><ul><li>媒体的设备文件名</li><li>媒体挂载到虚拟目录的挂载点</li><li>文件系统类型</li><li>已挂载媒体的访问状态</li></ul></li><li><p>在虚拟目录中手动挂载设备，需要以root用户登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -t type device directory </span><br><span class="line"># 将U盘/dev/sdb1 挂载到/media/disk</span><br><span class="line">mount -t vfat /dev/sdb1 /media/disk</span><br></pre></td></tr></table></figure></li><li><p>type参数指定了磁盘被格式化的类型，一般是vfat（大多数U盘和软盘）、ntfs、iso9660(数据CD)</p></li><li><p>umount，从linux中移除一个设备时，不能直接从系统上移除，应该先卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 要退出挂载的目录，避免命令提示符正在使用的情况</span><br><span class="line">[root@testbox mnt]# cd /home/rich</span><br><span class="line">[root@testbox rich]# umount /home/rich/mnt</span><br></pre></td></tr></table></figure></li><li><p>df命令，查看某个设备还有多少磁盘空间</p></li><li><p>df -hT<br><code>h</code>以1024进制，也就是M显示。<br><code>H</code>为1000进制。<br><code>T</code>显示文件系统类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# df -hT</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1      ext4       40G  7.1G   31G  19% /</span><br><span class="line">devtmpfs       devtmpfs  909M     0  909M   0% /dev</span><br><span class="line">tmpfs          tmpfs     920M     0  920M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     920M  500K  919M   1% /run</span><br><span class="line">tmpfs          tmpfs     920M     0  920M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs          tmpfs     184M     0  184M   0% /run/user/0</span><br></pre></td></tr></table></figure></li><li><p>df -hT -t ext4<br><code>t</code>只匹配ext4类型的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# df -hT -t ext4</span><br><span class="line">Filesystem     Type  Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1      ext4   40G  7.1G   31G  19% /</span><br></pre></td></tr></table></figure></li><li><p>df -hT  -x ext4<br><code>x</code>参数匹配所有非ext4类型的文件目录(反向匹配)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# df -hT -x ext4</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs  909M     0  909M   0% /dev</span><br><span class="line">tmpfs          tmpfs     920M     0  920M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     920M  500K  919M   1% /run</span><br><span class="line">tmpfs          tmpfs     920M     0  920M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs          tmpfs     184M     0  184M   0% /run/user/0</span><br></pre></td></tr></table></figure></li><li><p>du，显示某个特定目录的磁盘使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">du -sh *.sh</span><br><span class="line">du -sH *.sh</span><br></pre></td></tr></table></figure></li></ul><h3 id="处理数据文件"><a href="#处理数据文件" class="headerlink" title="处理数据文件"></a>处理数据文件</h3><ul><li><p>sort，可对数据文件以一定的顺序排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort file.txt</span><br></pre></td></tr></table></figure></li><li><p><code>sort -n file.txt</code>可按数字排序</p></li><li><code>sort -M file.txt</code>可按月份排序（英文，可简写）</li><li><p><code>-k</code>和<code>-t</code>参数在对按字段分隔的数据进行排序时非常有用，例如/etc/passwd文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sort -t &apos;:&apos; -k 3 -n /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p><code>-n</code>参数在排序数值时非常有用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ du -sh * | sort -nr</span><br><span class="line">1008k mrtg-2.9.29.tar.gz</span><br><span class="line">972k bldg1</span><br><span class="line">888k fbs2.pdf</span><br><span class="line">760k Printtest</span><br><span class="line">680k rsync-2.6.6.tar.gz</span><br></pre></td></tr></table></figure></li><li><p><code>-r</code>参数将结果按降序输出</p></li><li><p>grep，搜索匹配模式的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grep three file1</span><br><span class="line"><span class="comment"># 反向搜索（输出不匹配该模式的行）</span></span><br><span class="line">grep -v t file1</span><br><span class="line"><span class="comment"># 显示所在行号 </span></span><br><span class="line">grep -n t file1 </span><br><span class="line"><span class="comment"># 显示有多少行匹配</span></span><br><span class="line">grep -c t file1 </span><br><span class="line"><span class="comment"># 指定多个匹配模式，`-t`参数</span></span><br><span class="line">grep -e t -e f file1</span><br></pre></td></tr></table></figure></li><li><p>egrep命令是grep的一个衍生，支持POSIX扩展正则表达式。</p></li></ul><h3 id="压缩数据"><a href="#压缩数据" class="headerlink" title="压缩数据"></a>压缩数据</h3><ul><li><p>gzip软件包</p><ul><li>gzip：用来压缩文件。</li><li>gzcat：用来查看压缩过的文本文件的内容。</li><li>gunzip：用来解压文件。</li></ul></li><li><p>tar，归档数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="keyword">function</span> [options] object1 object2 ... </span><br><span class="line"><span class="comment"># 创建归档文件</span></span><br><span class="line">tar -cvf test.tar <span class="built_in">test</span>/ test2/ </span><br><span class="line"><span class="comment"># 列出归档文件内容</span></span><br><span class="line">tar -tf test.tar </span><br><span class="line"><span class="comment"># 提取归档文件到当前目录</span></span><br><span class="line">tar -xvf test.tar</span><br></pre></td></tr></table></figure></li><li><p>其中，下载了开源软件之后，你会经常看到文件名以.tgz结尾。这些是gzip压缩过的tar文件，可以用命令<code>tar -zxvf filename.tgz</code>来解压。</p></li></ul><h3 id="linux操作文件系统"><a href="#linux操作文件系统" class="headerlink" title="linux操作文件系统"></a>linux操作文件系统</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g324grqio9j31ak0o847j.jpg" alt="01"></p><p>扩展分区必须挂载才能使用</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g324knbtzdj30tm08qq7z.jpg" alt="02"></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g324l0wbovj30um070gom.jpg" alt="03"></p><p><strong>创建MBR分区</strong></p><ul><li><p>fdisk，硬盘分区工具，管理安装在系统上的任何存储设备上的分区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure></li><li><p>进入分区模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure></li></ul><p>可输入<strong>m</strong>查看帮助信息</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g324ogbq41j316y0ag4ak.jpg" alt="04"></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g324oslnktj30ny0lw4dn.jpg" alt="05"></p><p>输入<strong>n</strong>，创建新分区</p><p><strong>p</strong>，主分区</p><p><strong>e</strong>，扩展分区</p><p>默认主分区，输入<strong>p</strong>，</p><p>分区号，<strong>默认</strong>为1，</p><p>扇区开始位置，终止位置<strong>+3000M</strong>，默认为剩下整个分区，</p><p>可输入<strong>p</strong>查看已经添加的分区</p><p>添加扩展分区，</p><p>输入<strong>e</strong>,</p><p>分区号2，可<strong>默认</strong></p><p>起始扇区，<strong>默认</strong></p><p>结束扇区，<strong>默认</strong>全部剩下的存储空间都为扩展分区</p><p>扩展分区不可以直接使用</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g337sd4zj3j31380i8air.jpg" alt="06"></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g337t74x4zj310805kte0.jpg" alt="07"></p><p>GPT不支持32操作系统，使用fdisk只能创建MBR分区。</p><p><strong>创建GPT分区</strong></p><p>使用<strong>parted</strong>分区工具，既可创建GPT分区，也可创建MBR分区</p><p>可使用<strong>help</strong>查看帮助</p><p>切换目标硬盘，<strong>select  /dev/sdc</strong></p><p>给目标硬盘指定目标分区表类型，使用<strong>mklabel</strong>工具，</p><p>指定MBR分区，mklabel mados</p><p>指定GPT分区，mklabel gpt，</p><p>输入<strong>print</strong>，查看当前硬盘分区详情</p><p>输入<strong>print all</strong>，可以看到所有的分区表详情。</p><p><strong>给目标硬盘添加分区</strong></p><p>gpt交互模式，创建分区，<strong>mkpart</strong></p><p>名称？<strong>imooc</strong>，可回车。</p><p>文件系统类型，<strong>默认</strong>ext2，后续可格式化，</p><p>开始位置，fdisk扇区数据块编号，在这里是第几个分区，输入<strong>0</strong></p><p>结束，<strong>2000M</strong></p><p>第0M—第2000M</p><p>数据块没有对齐，<strong>cancel</strong></p><p><strong>第1M-第2000M</strong></p><p>不提示数据块未对齐</p><p>输入<strong>print</strong>，查看目前分区状况</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g338aajtm0j30nq0c2age.jpg" alt="08"></p><ul><li>gpt命令模式分区，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkpart  分区名称  分区开始位置  分区结束位置</span><br><span class="line">mkpart test 2000 3000</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g338bhjnsfj30ne08itdt.jpg" alt="09"></p><p>如果分区和指定的重叠，如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g338ctrd3cj30nk0e6ajl.jpg" alt="10"></p><p>删除分区3，<strong>rm 3</strong></p><p>没有主分区，逻辑分区，扩展分区概念，</p><p>以上都是以M为单位分区，如果要以GB为单位分区，可输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unit  GB</span><br></pre></td></tr></table></figure><p>如果已经指定完成分区，输入<strong>quit</strong>，退出。和fdisk不同的是，不用<strong>w</strong>写入硬盘。</p><hr><p><strong>分区格式化工具mkfs</strong></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g338i57j6rj30xe0gwmz2.jpg" alt="11"><br>列出设备类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev/sdb*</span><br></pre></td></tr></table></figure></p><p>将设备格式化为ext3系统，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext3  /dev/sdb1</span><br></pre></td></tr></table></figure></p><p>第二种写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs -t ext4 /dev/sdb2</span><br></pre></td></tr></table></figure></p><p>注意：在MBR分区中，扩展分区不可格式化，只有主分区，逻辑分区才可格式化。</p><p>GBT，要使用<strong>parted</strong>工具，输入<strong>print</strong>，查看硬盘分区表状况。</p><hr><p><strong>挂载分区</strong></p><p>未挂载分区无法使用，而且必须挂载到存在的挂载点<img src="https://ws1.sinaimg.cn/large/006tNc79ly1g338o4moq5j30j403c40d.jpg" alt="12"></p><p>创建挂载点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/imooc</span><br></pre></td></tr></table></figure></p><p>挂载分区，重启失效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdb1 /mnt/imooc</span><br></pre></td></tr></table></figure></p><p>手动挂载不具有永久性，想要在重启后生效，自动挂载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/ fstab</span><br></pre></td></tr></table></figure></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g338sw4wnqj30ws082gry.jpg" alt="13"></p><p>卸载掉挂载的分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /mnt/imooc</span><br></pre></td></tr></table></figure></p><hr><p><strong>swap分区</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g338v4l18jj30hg0aydki.jpg" alt="14"></p><ul><li>建立分区<code>/dev/sdb6</code></li><li><p>进入分区模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb6</span><br></pre></td></tr></table></figure></li><li><p>修改分区，输入<strong>t</strong>，</p></li><li>输入<strong>6</strong>，</li><li>输入<strong>L</strong>，查看<strong>编码列表82，linux swap</strong></li><li>输入<strong>82</strong>，</li><li><p>输入<strong>w</strong>，保存</p></li><li><p>格式化交换分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/sdb6</span><br></pre></td></tr></table></figure></li><li><p>启用交换分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /dev/sdb6</span><br></pre></td></tr></table></figure></li><li><p>查看swap加载状况，<strong>free</strong></p></li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g33904tw12j30u004k41u.jpg" alt="15"></p><ul><li>停用swap分区<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff /dev/sdb6</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="用户和用户组操作文件"><a href="#用户和用户组操作文件" class="headerlink" title="用户和用户组操作文件"></a>用户和用户组操作文件</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g3396ibbg4j30o204mdhp.jpg" alt="16"></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g33981em34j30t8066whp.jpg" alt="17"></p><p>root,组编号为0。</p><p>1-499,安装给这个系统的软件和用户。</p><p>500+，用户手动创建的用户。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g339bc0uf1j30u605oq69.jpg" alt="18"></p><p>*和！  组密码为空</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g339ch65qdj30zq044adz.jpg" alt="19"></p><p>每一行对应一个用户信息。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g339elju9dj30ug04c0v5.jpg" alt="20"></p><hr><h4 id="用户和用户组基本命令"><a href="#用户和用户组基本命令" class="headerlink" title="用户和用户组基本命令"></a>用户和用户组基本命令</h4><p>新建用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd sexy</span><br></pre></td></tr></table></figure></p><p>修改用户组名称，新的组名称在前面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod  -n market sexy</span><br></pre></td></tr></table></figure></p><p>可通过<code>cat /etc/group</code>查看。</p><p>修改用户组编号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -g 668 market</span><br></pre></td></tr></table></figure></p><p>创建用户组并添加编号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 888 boss</span><br></pre></td></tr></table></figure></p><p>删除用户组，首先应该先删除用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel market</span><br></pre></td></tr></table></figure></p><p>创建用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd sexy</span><br></pre></td></tr></table></figure></p><p>给用户组添加用户，-g参数可以指定用户组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -g sexy serven</span><br><span class="line">useradd -g sexy jzmb</span><br></pre></td></tr></table></figure></p><p>使用<code>-d</code>创建用户指定个人文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d  /home/xxx imooc</span><br></pre></td></tr></table></figure></p><p>imooc未指明用户组，系统会默认创建同名的用户组</p><p>给用户添加备注<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -c shiqi serven</span><br></pre></td></tr></table></figure></p><p>修改用户名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -l qiqi serven</span><br></pre></td></tr></table></figure></p><p>修改用户文件路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -d /home/qiqi qiqi</span><br></pre></td></tr></table></figure></p><p>修改用户所属用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g sexy imooc</span><br></pre></td></tr></table></figure></p><p>删除用户，并不会删除个人文件夹的文件，可以 r 参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel jzmb</span><br></pre></td></tr></table></figure></p><p>禁止除了root用户以外的普通用户登录系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/nologin</span><br></pre></td></tr></table></figure></p><hr><p>锁定账户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -l qiqi</span><br></pre></td></tr></table></figure></p><p>解锁账户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -u qiqi</span><br></pre></td></tr></table></figure></p><p>清除账户密码，可无密码登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -d qiqi</span><br></pre></td></tr></table></figure></p><hr><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g349lemddgj30wg0kwdmd.jpg" alt="21"></p><p>给用户添加附属组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a qiqi boss</span><br></pre></td></tr></table></figure></p><p>当一个用户有多个附属组，默认文件在主要组。需要可切换至附属组中<br>需要用户自己执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp boss</span><br></pre></td></tr></table></figure></p><p>给用户删除附属组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a qiqi boss</span><br></pre></td></tr></table></figure></p><p>创建用户既指定主要组，又指定附属组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -g group1 -G group1,group2,group3...</span><br></pre></td></tr></table></figure></p><p>给用户组设置组密码,输入两次密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd imooc</span><br></pre></td></tr></table></figure></p><hr><p>切换用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su username</span><br></pre></td></tr></table></figure></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g349shs8pmj30s80gu447.jpg" alt="22"></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g349taxxlwj30la07ujtl.jpg" alt="23"></p><blockquote><p>部分瞻仰大佬笔记📒<br><a href="https://www.imooc.com/learn/111" target="_blank" rel="noopener">https://www.imooc.com/learn/111</a><br>linux硬盘分区等知识优秀笔记📒<br>LVM扩容文档:<a href="https://blog.51cto.com/11601346/1831795" target="_blank" rel="noopener">https://blog.51cto.com/11601346/1831795</a><br>Linux LVM简明教程:<a href="https://linux.cn/article-3218-1.html" target="_blank" rel="noopener">https://linux.cn/article-3218-1.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;如果你以前从未接触过Linux，可能就不清楚为什么会有这么多不同的Linux发行版。在查看Linux软件包时，你肯定被发行版、LiveCD和GNU之类的术语搞晕过。那，我也不会讲给你听。🤣&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Centos" scheme="https://annecoding.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>rpm命令使用</title>
    <link href="https://annecoding.github.io/2019/03/23/rpm%E5%91%BD%E4%BB%A4/"/>
    <id>https://annecoding.github.io/2019/03/23/rpm命令/</id>
    <published>2019-03-23T05:31:03.000Z</published>
    <updated>2019-08-14T05:38:36.583Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p><strong>rpm命令</strong>是RPM软件包的管理工具。rpm原本是Red Hat Linux发行版专门用来管理Linux各项套件的程序，由于它遵循GPL规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM套件管理方式的出现，让Linux易于安装，升级，间接提升了Linux的适用度。</p><a id="more"></a><p><strong>常见参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">用法: rpm [选项...]</span><br><span class="line">-a：查询所有已经安装的软件包；</span><br><span class="line">-b&lt;完成阶段&gt;&lt;套件档&gt;+或-t &lt;完成阶段&gt;&lt;套件档&gt;+：设置包装套件的完成阶段，并指定套件档的文件名称；</span><br><span class="line">-c：只列出组态配置文件，本参数需配合<span class="string">"-l"</span>参数使用；</span><br><span class="line">-d：只列出文本文件，本参数需配合<span class="string">"-l"</span>参数使用；</span><br><span class="line">-e&lt;套件档&gt;或--erase&lt;套件档&gt;：删除指定的套件；</span><br><span class="line">-f&lt;文件&gt;+：查询文件所属于的软件包；</span><br><span class="line">-h或--<span class="built_in">hash</span>：套件安装时列出标记；</span><br><span class="line">-i：显示套件的相关信息；</span><br><span class="line">-i&lt;套件档&gt;或--install&lt;套件档&gt;：安装指定的软件包；</span><br><span class="line">-l：显示套件的文件列表；</span><br><span class="line">-p&lt;套件档&gt;+：查询指定的RPM套件档；</span><br><span class="line">-q：是查询一个包是否安装；</span><br><span class="line">-R：显示套件的关联性信息；</span><br><span class="line">-s：显示文件状态，本参数需配合<span class="string">"-l"</span>参数使用；</span><br><span class="line">-U&lt;套件档&gt;或--upgrade&lt;套件档&gt;：升级指定的套件档；</span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-vv：详细显示指令执行过程，便于排错。</span><br></pre></td></tr></table></figure><p><strong>如何安装rpm软件包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接安装</span></span><br><span class="line">$ rpm -ivh your-package                </span><br><span class="line"><span class="comment"># 忽略报错，强制安装</span></span><br><span class="line">$ rpm --force -ivh your-package.rpm</span><br></pre></td></tr></table></figure><p><strong>查询软件包位置及卸载rpm软件包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询tree安装在哪</span></span><br><span class="line">$ rpm -ql tree</span><br><span class="line">/usr/bin/tree</span><br><span class="line">/usr/share/doc/tree-1.6.0</span><br><span class="line">/usr/share/doc/tree-1.6.0/LICENSE</span><br><span class="line">/usr/share/doc/tree-1.6.0/README</span><br><span class="line">/usr/share/man/man1/tree.1.gz</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">$ rpm -e tree</span><br></pre></td></tr></table></figure><p><strong>列出所有安装过的包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa</span><br></pre></td></tr></table></figure><p><strong>获取某个安装包全名</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -q tree</span><br><span class="line">tree-1.6.0-10.el7.x86_64</span><br><span class="line"><span class="comment"># tree    1         6        10        el7      x86         64</span></span><br><span class="line"><span class="comment"># 软件名   主版本号   次版本号   修订号     RHEL7    CPU架构平台  支持系统位数</span></span><br></pre></td></tr></table></figure><p><strong>查询软件包的安装信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qi tree</span><br><span class="line">Name        : tree</span><br><span class="line">Version     : 1.6.0</span><br><span class="line">Release     : 10.el7</span><br><span class="line">Architecture: x86_64</span><br><span class="line">Install Date: Wed 03 Jul 2019 05:14:23 PM CST</span><br><span class="line">Group       : Applications/File</span><br><span class="line">Size        : 89505</span><br><span class="line">License     : GPLv2+</span><br><span class="line">Signature   : RSA/SHA256, Fri 04 Jul 2014 01:36:46 PM CST, Key ID 24c6a8a7f4a80eb5</span><br><span class="line">Source RPM  : tree-1.6.0-10.el7.src.rpm</span><br><span class="line">Build Date  : Tue 10 Jun 2014 03:28:53 AM CST</span><br><span class="line">Build Host  : worker1.bsys.centos.org</span><br><span class="line">Relocations : (not relocatable)</span><br><span class="line">Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</span><br><span class="line">Vendor      : CentOS</span><br><span class="line">URL         : http://mama.indstate.edu/users/ice/tree/</span><br><span class="line">Summary     : File system tree viewer</span><br><span class="line">Description :</span><br><span class="line">The tree utility recursively displays the contents of directories <span class="keyword">in</span> a</span><br><span class="line">tree-like format.  Tree is basically a UNIX port of the DOS tree</span><br><span class="line">utility.</span><br></pre></td></tr></table></figure><p><strong>查看哪个软件包含这个程序</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qf `<span class="built_in">which</span> 程序名`    <span class="comment">#返回软件包的全名</span></span><br><span class="line">$ rpm -qif `<span class="built_in">which</span> 程序名`   <span class="comment">#返回软件包的有关信息</span></span><br><span class="line">$ rpm -qlf `<span class="built_in">which</span> 程序名`   <span class="comment">#返回软件包的文件列表</span></span><br></pre></td></tr></table></figure><p><strong>查询ssh的软件包全名</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qf `<span class="built_in">which</span> sshd`</span><br><span class="line">openssh-server-6.6.1p1-35.el7_3.x86_64</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;&lt;strong&gt;rpm命令&lt;/strong&gt;是RPM软件包的管理工具。rpm原本是Red Hat Linux发行版专门用来管理Linux各项套件的程序，由于它遵循GPL规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM套件管理方式的出现，让Linux易于安装，升级，间接提升了Linux的适用度。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="rpm" scheme="https://annecoding.github.io/tags/rpm/"/>
    
  </entry>
  
</feed>
