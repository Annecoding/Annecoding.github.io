<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://annecoding.github.io/"/>
  <updated>2019-07-20T11:14:35.905Z</updated>
  <id>https://annecoding.github.io/</id>
  
  <author>
    <name>Annecoding&#39;s</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux安装hping添加环境变量</title>
    <link href="https://annecoding.github.io/2019/07/20/linux%E5%AE%89%E8%A3%85hping%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://annecoding.github.io/2019/07/20/linux安装hping添加环境变量/</id>
    <published>2019-07-20T11:06:59.000Z</published>
    <updated>2019-07-20T11:14:35.905Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p>当我试图去安装hping的时候，出现了一些些问题，明明已经安装，但是却不能使用，后来发现是环境变量没有配置上。<br><a id="more"></a></p><p>在mac下通过brew安装hping<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install hping</span><br></pre></td></tr></table></figure></p><p>查看已安装列表…找到如下一列<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew list</span><br><span class="line">.... ... .... hping ... .... ...</span><br></pre></td></tr></table></figure></p><p>然而,当我运行hping时…<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hping</span><br><span class="line">zsh: <span class="built_in">command</span> not found: hping</span><br></pre></td></tr></table></figure></p><p>再次查看安装信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew info hping</span><br><span class="line">hping: stable 3.20051105</span><br><span class="line">http://www.hping.org/</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/hping/3.20051105 (9 files, 196K) *</span><br><span class="line">  Built from <span class="built_in">source</span></span><br><span class="line">From: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/hping.rb</span><br></pre></td></tr></table></figure></p><p>emmm…得出结论，安装了hping却不能使用<br>将<code>/usr/local/sbin</code>添加到<code>$PATH</code>,<br>因为hping二进制文件安装在<code>/usr/local/sbin</code>中,而不是安装在<code>/usr/local/bin</code>中。</p><p><strong>解决方案</strong></p><p>在终端中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/sbin</span><br></pre></td></tr></table></figure></p><p>哦对了 等号之间不能有空格</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;当我试图去安装hping的时候，出现了一些些问题，明明已经安装，但是却不能使用，后来发现是环境变量没有配置上。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="hping" scheme="https://annecoding.github.io/tags/hping/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu修改IP地址</title>
    <link href="https://annecoding.github.io/2019/07/20/ubuntu%E4%BF%AE%E6%94%B9IP%E5%9C%B0%E5%9D%80/"/>
    <id>https://annecoding.github.io/2019/07/20/ubuntu修改IP地址/</id>
    <published>2019-07-20T10:59:03.000Z</published>
    <updated>2019-07-20T11:14:41.119Z</updated>
    
    <content type="html"><![CDATA[<!-- <meta name="referrer" content="no-referrer" /> --><p>ubuntu修改静态ip地址需要单独设置DNS，这个要注意一下哦。<br><a id="more"></a></p><h4 id="ubuntu修改ip地址"><a href="#ubuntu修改ip地址" class="headerlink" title="ubuntu修改ip地址"></a>ubuntu修改ip地址</h4><h5 id="ubuntu16-04修改IP地址"><a href="#ubuntu16-04修改IP地址" class="headerlink" title="ubuntu16.04修改IP地址"></a>ubuntu16.04修改IP地址</h5><p>1、修改网卡配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sudo  vi /etc/network/interfaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到其中以下几行进行修改</span></span><br><span class="line">auto ens123</span><br><span class="line">iface ens123 inet static</span><br><span class="line">        address 10.10.133.233</span><br><span class="line">        netmask 255.255.255.0</span><br><span class="line">        network 10.10.133.0</span><br><span class="line">        broadcast 10.10.133.255</span><br><span class="line">        gateway 10.10.133.254</span><br><span class="line">        <span class="comment"># dns-* options are implemented by the resolvconf package, if installed</span></span><br><span class="line">        dns-nameservers 8.8.8.8</span><br></pre></td></tr></table></figure><p>2、修改DNS配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi + /etc/resolvconf/resolv.conf.d/head</span><br><span class="line"><span class="comment"># 在文件最后添加一句话</span></span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>3、重启网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><h5 id="ubuntu18-04修改ip地址"><a href="#ubuntu18-04修改ip地址" class="headerlink" title="ubuntu18.04修改ip地址"></a>ubuntu18.04修改ip地址</h5><p>1、修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/netplan/50-cloud-init.yaml</span><br><span class="line"><span class="comment"># 修改以下内容</span></span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        eth0:</span><br><span class="line">            addresses:</span><br><span class="line">            - 192.168.15.72/20</span><br><span class="line">            gateway4: 192.168.12.2</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses:</span><br><span class="line">                - 223.5.5.5</span><br><span class="line">                search: []</span><br><span class="line">            optional: <span class="literal">true</span></span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><p>2、使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netplan apply</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; --&gt;
&lt;p&gt;ubuntu修改静态ip地址需要单独设置DNS，这个要注意一下哦。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://annecoding.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>linux系统扫描命令和安全防范笔记</title>
    <link href="https://annecoding.github.io/2019/07/20/linux%E7%B3%BB%E7%BB%9F%E6%89%AB%E6%8F%8F%E5%91%BD%E4%BB%A4%E5%92%8C%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83%E7%AC%94%E8%AE%B0/"/>
    <id>https://annecoding.github.io/2019/07/20/linux系统扫描命令和安全防范笔记/</id>
    <published>2019-07-20T09:21:31.000Z</published>
    <updated>2019-07-20T11:37:46.346Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>本文主要介绍了一些常用的网络扫描工具以及安全防范，了解更多命令的使用。<br><a id="more"></a></p><h4 id="linux系统扫描命令和安全防范笔记"><a href="#linux系统扫描命令和安全防范笔记" class="headerlink" title="linux系统扫描命令和安全防范笔记"></a><strong>linux系统扫描命令和安全防范笔记</strong></h4><p>通过网络入侵来窃取敏感信息</p><p>通过网络扫描获取运营商核心设备的管理权限</p><h4 id="网络入侵方式"><a href="#网络入侵方式" class="headerlink" title="网络入侵方式"></a><strong>网络入侵方式</strong></h4><p>踩点-网络扫描-差点-提权</p><p><strong>常用命令</strong></p><p>tracert/traceroute、namp、nc</p><h4 id="主机扫描命令fping"><a href="#主机扫描命令fping" class="headerlink" title="主机扫描命令fping"></a><strong>主机扫描命令fping</strong></h4><p>批量的给目标主机发送ping请求，测试主机的存活情况。</p><p>特点：并行发送，结果易读</p><p><strong>源码包编译过程</strong></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g54yozizhcj30yg0lign8.jpg" alt="image-20190719105646797"></p><p>fping编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget https://fping.org/dist/fping-4.2.tar.gz</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -xvf fping-4.2.tar.gz </span></span><br><span class="line">[root@localhost fping-4.2]<span class="comment"># ./configure &amp; make &amp; make install</span></span><br><span class="line">[root@localhost fping-4.2]<span class="comment"># fping -h  #查看帮助命令</span></span><br><span class="line">[root@localhost fping-4.2]<span class="comment"># fping -v</span></span><br><span class="line">fping: Version 4.2</span><br><span class="line">fping: comments to david@schweikert.ch</span><br></pre></td></tr></table></figure><h5 id="fping参数介绍"><a href="#fping参数介绍" class="headerlink" title="fping参数介绍"></a><strong>fping参数介绍</strong></h5><p>命令参数man、-h方式</p><p>常用参数：</p><p>-a 只显示出存活的主机(相反参数-u)</p><p>-l 循环ping</p><p>1、通过标准输入方式fping+IP1+IP2</p><p>-g 支持主机段的方式 192.168.1.1 192.168.1.255 192.168.1.0/24</p><p>2、通过读取一个文件中的IP内容</p><p>方式：fping -f filename</p><p>3、fping使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找存货的主机</span></span><br><span class="line">fping -a 10.10.163.233</span><br><span class="line"><span class="comment"># 可以查找某个网段内存活的主机</span></span><br><span class="line">fping  -g -a 10.10.163.1 10.10.163.254</span><br><span class="line"><span class="comment"># 查找某个网段内存活主机第二种写法</span></span><br><span class="line">fping -a -g 10.10.163.233/24</span><br></pre></td></tr></table></figure><h4 id="主机扫描命令hping"><a href="#主机扫描命令hping" class="headerlink" title="主机扫描命令hping"></a><strong>主机扫描命令hping</strong></h4><p>支持使用tcp/ip数据包组装、分析工具</p><p>linux下编译安装</p><p>如果遇到如下错误</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g556megt3vj30oi04et9c.jpg" alt="image-20190719153110732"></p><p>可通过安装下面库解决</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g556sceynmj30ji09274q.jpg" alt="image-20190719153652881"></p><p><a href="http://rpmfind.net/" target="_blank" rel="noopener">http://rpmfind.net/</a></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g556pk21f9j30xy082do7.jpg" alt="image-20190719153414670"></p><h5 id="hping常用参数"><a href="#hping常用参数" class="headerlink" title="hping常用参数"></a><strong>hping常用参数</strong></h5><p>1、对特定的目标发起tcp探测（规避运营商防火墙、主机等对icmp包屏蔽）</p><p>-p 端口tcp</p><p>-S 设置TCP模式SYN包</p><p>2、伪造来源IP，模拟Ddos攻击</p><p>-a 伪造IP地址</p><p>3、hping使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hping -p 22 -S 10.10.163.233</span><br><span class="line"></span><br><span class="line">sudo hping -p 22 -S 10.10.163.233 -a 10.10.163.235</span><br></pre></td></tr></table></figure><p> centos拒绝掉icmp包设置</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g56489gypsj30kg01mwei.jpg" alt="image-20190720105353473"></p><h4 id="路由扫描"><a href="#路由扫描" class="headerlink" title="路由扫描"></a><strong>路由扫描</strong></h4><p>作用：查询一个主机经过的路由的跳数、及数据延迟情况</p><p>常用工具：traceroute、mtr</p><p>mtr特点：能测出主机到每一个路由间的联通性。</p><p>traceroute连接原理。</p><p>linux下发送udp包（&gt;30000端口），windows发送icmp包。</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g564xl90vhj30pk0i23zb.jpg" alt="image-20190720111813791"></p><p>TTL，生存时间的值。发给第一跳，ttl-1=0，返回udp数据包。</p><p>扫描到几个路由器，发送几个ttl数据包。</p><h5 id="traceroute参数的使用"><a href="#traceroute参数的使用" class="headerlink" title="traceroute参数的使用"></a><strong>traceroute参数的使用</strong></h5><p> linux一般默认有，如果没有安装方式</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5657hwwdpj30mi03gjru.jpg" alt="image-20190720112746947"></p><p>1、默认使用的是udp协议(30000以上的端口)</p><p>2、支持使用TCP协议 -T(发送tcp协议) -p(基于tcp什么端口)</p><p>3、使用ICMP协议介绍 -I </p><p>4、traceroute使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">traceroute www.baidu.com</span><br><span class="line"><span class="comment"># -n 去掉解析</span></span><br><span class="line">traceroute -n www.baidu.com </span><br><span class="line"><span class="comment"># 使用icmp，window默认使用</span></span><br><span class="line">traceroute -In  www.imooc.com</span><br><span class="line"><span class="comment"># 使用tcp才能检测到最终跳数(一般会屏蔽icmp协议)</span></span><br><span class="line">traceroute -T -p 80 -n www.imooc.com</span><br></pre></td></tr></table></figure><h5 id="mtr使用"><a href="#mtr使用" class="headerlink" title="mtr使用"></a>mtr使用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install mtr -y</span><br><span class="line"><span class="comment"># 使用，原理和traceroute一样，可以看到到哪一跳丢包率更为严重</span></span><br><span class="line">mtr www.baidu.com</span><br></pre></td></tr></table></figure><h4 id="批量主机扫描"><a href="#批量主机扫描" class="headerlink" title="批量主机扫描"></a><strong>批量主机扫描</strong></h4><p>目的：</p><p>1、批量主机存活扫描</p><p>2、针对主机服务扫描</p><p>作用：</p><p>1、能快捷的获取主机的存活状态</p><p>2、能更加细致、只能获取主机服务侦查情况</p><p><strong>典型命令</strong></p><p>1、nmap 基于端口扫描，特别强大</p><p>2、ncat 瑞士军刀</p><h5 id="nmap使用"><a href="#nmap使用" class="headerlink" title="nmap使用"></a><strong>nmap使用</strong></h5><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56dmqgtktj30v60f8dhb.jpg" alt="image-20190720161913675"></p><p>tcp半开放，不建立完整的tcp，未建立完整的三次握手。</p><p>1、主机存活扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫描主机存活状态,s检测用什么协议做侦测</span></span><br><span class="line">namp -sP 10.10.140.0/24</span><br></pre></td></tr></table></figure><p>2、主机端口开放扫描，默认扫描范围1-1024，以及一些常用的服务端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namp -sS 10.10.10.163.233</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56dzj5o2kj30mq0ae400.jpg" alt="image-20190720163117782"></p><p>3、半开放指定端口扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namp -sS -p 0-30000 10.10.163.233</span><br></pre></td></tr></table></figure><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g56e6peru2j30nw0a0t9w.jpg" alt="image-20190720163823202"></p><p>4、全开放连接参数，建立一次全握手，时间长</p><p>建立全握手，可以模拟用户的真实操作请求，需要服务端能检测到相关的日志，打印出相关记录信息。</p><p>建议日常使用半扫描模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -p 0-30000 10.10.163.233</span><br></pre></td></tr></table></figure><p> 5、udp协议扫描方式</p><p>扫描udp，响应比较慢、可能特别慢。会限制icmp不可达返回的次数。不建议使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sU 10.10.163.233</span><br></pre></td></tr></table></figure><h5 id="ncat使用"><a href="#ncat使用" class="headerlink" title="ncat使用"></a><strong>ncat使用</strong></h5><p>查看某个路由开放哪些端口80 23</p><p>通过shell交互更改数据 ，可进行任意操作</p><p>nc -lvp 2005 监听端口</p><p><strong>nc好处</strong></p><p>1、不会频繁通过界面登录留下痕迹</p><p>2、登录非常方便</p><p>3、不会被侦测设备侦测到</p><p>-w 设置的超市时间</p><p>-z 一个输入输出模式</p><p>-v 显示命令执行过程</p><p>1、基于tcp协议(默认)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看22端口开放情况</span></span><br><span class="line">nc -zv 10.10.163.233 22</span><br><span class="line"><span class="comment"># 查看一些端口开放 超时2s</span></span><br><span class="line">nc -zv -w2 10.10.163.233 1-50</span><br></pre></td></tr></table></figure><p>2、基于udp协议 -u  </p><p>回应时间长，不建议使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看一些端口开放 超时2s</span></span><br><span class="line">nc -zv -u -w2 10.10.163.233 1-50</span><br></pre></td></tr></table></figure><h4 id="预防策略"><a href="#预防策略" class="headerlink" title="预防策略"></a><strong>预防策略</strong></h4><p>在linux进行防御。</p><p>常见攻击方法：</p><p>1、SYN攻击</p><p>2、DDoS攻击</p><p>3、恶意扫描</p><p>什么是SYN攻击？</p><p>利用TCP协议缺陷进行，导致系统服务停止响应，网络带宽跑满或者响应缓慢。</p><p>什么是DDoS攻击？</p><p>分布式拒绝访问服务攻击。</p><p>正常服务在同一时间接到了很多个类似于正常服务的请求，也有可能是完全正常的请求，导致服务响应不过来。</p><p>SYN攻击一般会伴随着DDoS攻击进行</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g56eutfdydj30qq0ikgmc.jpg" alt="image-20190720170129641"></p><p>SYN攻击原理，eg可以利用hping伪造源ip，发送给假的主机，得不到第三次请求。目标机器不断发送重试，不停回应包，就会导致网络带宽占满。</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56f1z4xe1j30og0iuq3m.jpg" alt="image-20190720170357218"></p><ul><li><p>减少重试次数</p></li><li><p>可以增加backlog</p></li><li><p>禁止三次握手，SYN cookies技术</p></li></ul><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56f1r9lamj30m40c40x8.jpg" alt="image-20190720170816652"></p><p>linux下其他预防策略</p><p>1、防火墙上面做相关设置</p><p>2、linux下面可以关闭icmp协议请求</p><p>3、通过iptables防止扫描</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g56f53ibkej30xc0bqmyd.jpg" alt="image-20190720171122849"></p><blockquote><p>学习笔记整理自慕课网以下课程:<br>linux系统扫描命令和安全防范笔记</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;本文主要介绍了一些常用的网络扫描工具以及安全防范，了解更多命令的使用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="hping" scheme="https://annecoding.github.io/tags/hping/"/>
    
      <category term="traceroute" scheme="https://annecoding.github.io/tags/traceroute/"/>
    
      <category term="Nmap" scheme="https://annecoding.github.io/tags/Nmap/"/>
    
      <category term="Ncap" scheme="https://annecoding.github.io/tags/Ncap/"/>
    
      <category term="fping" scheme="https://annecoding.github.io/tags/fping/"/>
    
  </entry>
  
  <entry>
    <title>hexo图片显示问题</title>
    <link href="https://annecoding.github.io/2019/05/20/hexo%20img%20403/"/>
    <id>https://annecoding.github.io/2019/05/20/hexo img 403/</id>
    <published>2019-05-20T03:19:37.000Z</published>
    <updated>2019-05-20T08:39:06.131Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>解决markdown图片不显示，返回403 forbidden。</p><a id="more"></a><p>在文章中引用外链图片时不显示，但是本身外链（图床）图片又是可以打开的，错误如下图所示：<br><img src="http://images2015.cnblogs.com/blog/415042/201604/415042-20160419175110210-69232656.png" alt></p><p><img src="http://www.manongjc.com/images/cnblogs/153579233815357B3A9v2338.png" alt><br>只需要在文件头部添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>关于meta referrer，有如下可设置的值：<br><img src="https://images2017.cnblogs.com/blog/985078/201802/985078-20180208084932873-358057556.png" alt><br>参考链接如下：<br>关于hexo-asset-image：<a href="https://github.com/xcodebuild/hexo-asset-image" target="_blank" rel="noopener">https://github.com/xcodebuild/hexo-asset-image</a><br>hexo图片不显示：<a href="http://www.manongjc.com/article/9294.html" target="_blank" rel="noopener">http://www.manongjc.com/article/9294.html</a><br>img标签forbidden问题：<a href="https://www.cnblogs.com/awzf/p/9811386.html" target="_blank" rel="noopener">https://www.cnblogs.com/awzf/p/9811386.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;解决markdown图片不显示，返回403 forbidden。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://annecoding.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://annecoding.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>linux下项目上线流程</title>
    <link href="https://annecoding.github.io/2019/05/15/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/"/>
    <id>https://annecoding.github.io/2019/05/15/项目上线流程/</id>
    <published>2019-05-15T07:48:23.317Z</published>
    <updated>2019-05-15T08:04:53.688Z</updated>
    
    <content type="html"><![CDATA[<p>项目上线流程</p><p>1.选择服务器，比如CentOS、ubuntu等。</p><p>2.选择Web服务器，比如Nginx、Apache、Tomcat等。</p><p>3.独立域名购买，比如阿里云、腾讯云等。<br><a id="more"></a></p><h4 id="web服务器构建"><a href="#web服务器构建" class="headerlink" title="web服务器构建"></a>web服务器构建</h4><p>linux下安装nginx，yum下没有nginx源，在epel-release下有<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装epel-release源</span></span><br><span class="line">yum install epel-release</span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></p><p>可输入下面命令查看是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure></p><p>安装编辑器vim<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim</span><br></pre></td></tr></table></figure></p><p>安装scp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssh-client</span><br></pre></td></tr></table></figure></p><h4 id="网站上传到服务器"><a href="#网站上传到服务器" class="headerlink" title="网站上传到服务器"></a>网站上传到服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local_dir为本地目录数据</span></span><br><span class="line">scp -r local_dir user@ip:/remote_dir</span><br><span class="line"><span class="comment"># 示例如下  当下目录所有数据上传到远程目录/root/www</span></span><br><span class="line">scp -r ./* root@ip:/root/www</span><br></pre></td></tr></table></figure><h4 id="域名购买及解析-阿里云直接用新手引导"><a href="#域名购买及解析-阿里云直接用新手引导" class="headerlink" title="域名购买及解析(阿里云直接用新手引导)"></a>域名购买及解析(阿里云直接用新手引导)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加www和@记录</span><br><span class="line"></span><br><span class="line">记录值：公网IP地址</span><br></pre></td></tr></table></figure><p>如以上操作步骤无误，便可根据购买的域名访问相关网站。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目上线流程&lt;/p&gt;
&lt;p&gt;1.选择服务器，比如CentOS、ubuntu等。&lt;/p&gt;
&lt;p&gt;2.选择Web服务器，比如Nginx、Apache、Tomcat等。&lt;/p&gt;
&lt;p&gt;3.独立域名购买，比如阿里云、腾讯云等。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Centos" scheme="https://annecoding.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本练习</title>
    <link href="https://annecoding.github.io/2019/05/15/shell%E8%84%9A%E6%9C%AC%E7%BB%83%E4%B9%A0/"/>
    <id>https://annecoding.github.io/2019/05/15/shell脚本练习/</id>
    <published>2019-05-15T01:23:41.000Z</published>
    <updated>2019-05-15T07:57:16.005Z</updated>
    
    <content type="html"><![CDATA[<h4 id="读取有效的电话号码"><a href="#读取有效的电话号码" class="headerlink" title="读取有效的电话号码"></a>读取有效的电话号码</h4><p>给定一个包含电话号码列表（一行一个电话号码）的文本文件 <code>file.txt</code>，写一个 bash 脚本输出所有有效的电话号码。<br><a id="more"></a><br>你可以假设一个有效的电话号码必须满足以下两种格式： (xxx) xxx-xxxx 或 xxx-xxx-xxxx。（x 表示一个数字）</p><p>你也可以假设每行前后没有多余的空格字符。</p><p><strong>示例:</strong></p><p>假设 <code>file.txt</code> 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">987-123-4567</span><br><span class="line">123 456 7890</span><br><span class="line">(123) 456-7890</span><br></pre></td></tr></table></figure><p>你的脚本应当输出下列有效的电话号码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">987-123-4567</span><br><span class="line">(123) 456-7890</span><br></pre></td></tr></table></figure><p>实现脚本如下：</p><p>方法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n -r <span class="string">'/^([0-9]&#123;3&#125;-|\([0-9]&#123;3&#125;\) )[0-9]&#123;3&#125;-[0-9]&#123;4&#125;$/p'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -P <span class="string">'^(\d&#123;3&#125;-|\(\d&#123;3&#125;\) )\d&#123;3&#125;-\d&#123;4&#125;$'</span> file.txt</span><br><span class="line"><span class="comment"># \d 等价于 [0-9]  试验结果[0-9]更快</span></span><br><span class="line">grep -P <span class="string">'^([0-9]&#123;3&#125;-|\([0-9]&#123;3&#125;\) )[0-9]&#123;3&#125;-[0-9]&#123;4&#125;$'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法三<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/^([0-9]&#123;3&#125;-|\([0-9]&#123;3&#125;\) )[0-9]&#123;3&#125;-[0-9]&#123;4&#125;$/'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>关于正则其他参考：<a href="https://blog.csdn.net/yufenghyc/article/details/51078107" target="_blank" rel="noopener">https://blog.csdn.net/yufenghyc/article/details/51078107</a></p><h4 id="打印文件第十行"><a href="#打印文件第十行" class="headerlink" title="打印文件第十行"></a>打印文件第十行</h4><p>给定一个文本文件 <code>file.txt</code>，请只打印这个文件中的第十行。</p><p><strong>示例:</strong></p><p>假设 <code>file.txt</code> 有如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Line 1</span><br><span class="line">Line 2</span><br><span class="line">Line 3</span><br><span class="line">Line 4</span><br><span class="line">Line 5</span><br><span class="line">Line 6</span><br><span class="line">Line 7</span><br><span class="line">Line 8</span><br><span class="line">Line 9</span><br><span class="line">Line 10</span><br></pre></td></tr></table></figure><p>你的脚本应当显示第十行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Line 10</span><br></pre></td></tr></table></figure><p>实现脚本如下：<br>方法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read from the file file.txt and output the tenth line to stdout.</span></span><br><span class="line">sed -n <span class="string">'10p'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'10&#123;p;q&#125;'</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法三：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">"NR==10"</span> file.txt</span><br></pre></td></tr></table></figure></p><p>方法四：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt | awk <span class="string">'NR==10'</span></span><br></pre></td></tr></table></figure></p><p>方法五:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt | head -10 | tail -1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;读取有效的电话号码&quot;&gt;&lt;a href=&quot;#读取有效的电话号码&quot; class=&quot;headerlink&quot; title=&quot;读取有效的电话号码&quot;&gt;&lt;/a&gt;读取有效的电话号码&lt;/h4&gt;&lt;p&gt;给定一个包含电话号码列表（一行一个电话号码）的文本文件 &lt;code&gt;file.txt&lt;/code&gt;，写一个 bash 脚本输出所有有效的电话号码。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="https://annecoding.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Vue后台用户管理系统</title>
    <link href="https://annecoding.github.io/2019/04/25/vcustomers_demo/"/>
    <id>https://annecoding.github.io/2019/04/25/vcustomers_demo/</id>
    <published>2019-04-25T05:35:18.000Z</published>
    <updated>2019-05-20T03:21:06.180Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>本系统为一个简单的后台用户管理系统，主要是进一步掌握vue的指令和熟练使用。本系统结合vue语法实现对数据的增删改查和全局搜索功能。并实现在本地搭建json服务器，对数据操作等。<a href="https://github.com/Annecoding/vcustomers/" target="_blank" rel="noopener">github传送门</a><br><a id="more"></a></p><h3 id="Vue实战二-用户管理系统"><a href="#Vue实战二-用户管理系统" class="headerlink" title="Vue实战二  用户管理系统"></a>Vue实战二  用户管理系统</h3><h4 id="json-server本地搭建"><a href="#json-server本地搭建" class="headerlink" title="json-server本地搭建"></a>json-server本地搭建</h4><p>全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure><p>进入项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Projects/JSONSERVER</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm init --yes //也可以这样</span><br></pre></td></tr></table></figure><p>安装到本地项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install json-server --save</span><br></pre></td></tr></table></figure><p>修改package.json文件，设置启动项，并在目录下新建db.json文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "json:server": "json-server --watch db.json",</span><br><span class="line">    "json:server:remote": "json-server http://jsonplaceholder.typicode.com/db"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run json:server</span><br></pre></td></tr></table></figure><p>json-server传送门：<a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">https://github.com/typicode/json-server</a></p><h4 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="comment"># 本人在使用过程中，安装路由以后都是no</span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── About.vue    //关于</span><br><span class="line">│   │   ├── Add.vue            //添加用户</span><br><span class="line">│   │   ├── Alert.vue        //警告⚠️弹框</span><br><span class="line">│   │   ├── CustomerDetails.vue //用户详情信息</span><br><span class="line">│   │   ├── Customers.vue    //用户主页</span><br><span class="line">│   │   ├── Edit.vue    //编辑用户</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   └── main.js</span><br><span class="line">└── static</span><br></pre></td></tr></table></figure><h4 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h4><p>本项目是一个简单的基于vue.js学习而所做的个人博客的简单实现，已实现的功能如下：</p><ul><li>用户列表 😇</li><li>添加用户 😀</li><li>用户详情 🤗</li><li>编辑用户😊</li><li>删除用户 😏</li><li>全局搜索 🔍 用户</li><li>相应信息未添加完全弹窗  ⚠️</li></ul><h4 id="项目技术分析"><a href="#项目技术分析" class="headerlink" title="项目技术分析"></a>项目技术分析</h4><h5 id="用户列表"><a href="#用户列表" class="headerlink" title="用户列表"></a>用户列表</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- filterInput 应该遍历搜索的方法  根据名字匹配 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;tr v-for="customer in customers"&gt; --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"customer in filterBy(customers,filterInput)"</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;customer.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;customer.phone&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;customer.email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">v-bind:to</span>=<span class="string">"'/customer/'+customer.id"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  fetchCustmoers()&#123;</span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="string">"http://localhost:3000/users"</span>)</span><br><span class="line">                  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                      <span class="comment">//  console.log(response);</span></span><br><span class="line">                      <span class="keyword">this</span>.customers = response.body;</span><br><span class="line">                  &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line">updated () &#123;<span class="comment">//更新的时候也刷新列表</span></span><br><span class="line">    <span class="keyword">this</span>.fetchCustmoers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2ewzbeyvij31sa0u0n1l.jpg" alt></p><h5 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 触发自己所写的submit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit</span>=<span class="string">"addCustomer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span> <span class="attr">v-model</span>=<span class="string">"customer.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"phone"</span> <span class="attr">v-model</span>=<span class="string">"customer.phone"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"email"</span> <span class="attr">v-model</span>=<span class="string">"customer.email"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>学历<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"education"</span> <span class="attr">v-model</span>=<span class="string">"customer.education"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>毕业学校<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"graduationschool"</span> <span class="attr">v-model</span>=<span class="string">"customer.graduationschool"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"profession"</span> <span class="attr">v-model</span>=<span class="string">"customer.profession"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>个人简介<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input type="text" class="form-control" placeholder="profile" v-model="customer.profile"&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">v-model</span>=<span class="string">"customer.profile"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">      addCustomer(e)&#123;</span><br><span class="line">        <span class="comment">// console.log(123);</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.customer.name || !<span class="keyword">this</span>.customer.phone || !<span class="keyword">this</span>.customer.email ) &#123;</span><br><span class="line">            <span class="comment">// console.log("请添加相应的信息");</span></span><br><span class="line">            <span class="keyword">this</span>.alert = <span class="string">"请添加相应的信息!"</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> newCustomer = &#123;</span><br><span class="line">                name:<span class="keyword">this</span>.customer.name,</span><br><span class="line">                phone:<span class="keyword">this</span>.customer.phone,</span><br><span class="line">                email:<span class="keyword">this</span>.customer.email,</span><br><span class="line">                education:<span class="keyword">this</span>.customer.education,</span><br><span class="line">                graduationschool:<span class="keyword">this</span>.customer.graduationschool,</span><br><span class="line">                profession:<span class="keyword">this</span>.customer.profession,</span><br><span class="line">                profile:<span class="keyword">this</span>.customer.phone,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.$http.post(<span class="string">"http://localhost:3000/users"</span>,newCustomer)</span><br><span class="line">                      .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;<span class="comment">//回调事件</span></span><br><span class="line">                        <span class="comment">// console.log(response); response.body为所填写的信息</span></span><br><span class="line">                       <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"/"</span>,</span><br><span class="line">                                          query:&#123;</span><br><span class="line">                                                    alert:<span class="string">"用户信息添加成功!"</span><span class="comment">//添加成功后显示在主页面</span></span><br><span class="line">                                                &#125;</span><br><span class="line">                                          &#125;)<span class="comment">// 添加成功之后  跳转到主页面展示所有信息</span></span><br><span class="line">            &#125;)</span><br><span class="line">            e.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">        &#125;</span><br><span class="line">        e.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2ex11omh9j31cj0u078u.jpg" alt></p><h5 id="用户详情"><a href="#用户详情" class="headerlink" title="用户详情"></a>用户详情</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">v-bind:to</span>=<span class="string">"'/customer/'+customer.id"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  fetchCustmoers(id)&#123;<span class="comment">//根据id查询详情</span></span><br><span class="line">    <span class="keyword">this</span>.$http.get(<span class="string">"http://localhost:3000/users/"</span> + id)</span><br><span class="line">              .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(response);</span><br><span class="line">                  <span class="keyword">this</span>.customer = response.body;</span><br><span class="line">              &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2ex08kjqnj32au0qgad6.jpg" alt></p><h5 id="编辑用户"><a href="#编辑用户" class="headerlink" title="编辑用户"></a>编辑用户</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 触发自己所写的submit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit</span>=<span class="string">"updateCustomer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"name"</span> <span class="attr">v-model</span>=<span class="string">"customer.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"phone"</span> <span class="attr">v-model</span>=<span class="string">"customer.phone"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"email"</span> <span class="attr">v-model</span>=<span class="string">"customer.email"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>学历<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"education"</span> <span class="attr">v-model</span>=<span class="string">"customer.education"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>毕业学校<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"graduationschool"</span> <span class="attr">v-model</span>=<span class="string">"customer.graduationschool"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"profession"</span> <span class="attr">v-model</span>=<span class="string">"customer.profession"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>个人简介<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input type="text" class="form-control" placeholder="profile" v-model="customer.profile"&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">v-model</span>=<span class="string">"customer.profile"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  <span class="comment">// 来到这个页面根据id 获取到数据回显 fetchCustomer()  </span></span><br><span class="line">    fetchCustomer(id)&#123;</span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="string">"http://localhost:3000/users/"</span>+id)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response); </span><br><span class="line">            <span class="keyword">this</span>.customer = response.body;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    updateCustomer(e)&#123;</span><br><span class="line">      <span class="comment">// console.log(123);</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.customer.name || !<span class="keyword">this</span>.customer.phone || !<span class="keyword">this</span>.customer.email ) &#123;</span><br><span class="line">          <span class="comment">// console.log("请添加相应的信息");</span></span><br><span class="line">          <span class="keyword">this</span>.alert = <span class="string">"请添加对应的信息!"</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">let</span> updateCustomer = &#123;</span><br><span class="line">              name:<span class="keyword">this</span>.customer.name,</span><br><span class="line">              phone:<span class="keyword">this</span>.customer.phone,</span><br><span class="line">              email:<span class="keyword">this</span>.customer.email,</span><br><span class="line">              education:<span class="keyword">this</span>.customer.education,</span><br><span class="line">              graduationschool:<span class="keyword">this</span>.customer.graduationschool,</span><br><span class="line">              profession:<span class="keyword">this</span>.customer.profession,</span><br><span class="line">              profile:<span class="keyword">this</span>.customer.phone,</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//根据所传的id来更新  点击编辑的时候  触发此方法</span></span><br><span class="line">          <span class="keyword">this</span>.$http.put(<span class="string">"http://localhost:3000/users/"</span>+<span class="keyword">this</span>.$route.params.id,updateCustomer)</span><br><span class="line">                    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;<span class="comment">//回调事件</span></span><br><span class="line">                      <span class="comment">// console.log(response); response.body为所填写的信息</span></span><br><span class="line">                     <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"/"</span>,</span><br><span class="line">                                        query:&#123;</span><br><span class="line">                                                  alert:<span class="string">"用户信息更新成功!"</span><span class="comment">//添加成功后显示在主页面</span></span><br><span class="line">                                              &#125;</span><br><span class="line">                                        &#125;)<span class="comment">// 添加成功之后  跳转到主页面展示所有信息</span></span><br><span class="line">          &#125;)</span><br><span class="line">          e.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">      &#125;</span><br><span class="line">      e.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g2ex1kc8lvj31cg0u0q7g.jpg" alt></p><h5 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"搜索 🔍 "</span> <span class="attr">v-model</span>=<span class="string">"filterInput"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        customers:[],</span><br><span class="line">        alert:<span class="string">""</span>,</span><br><span class="line">        filterInput:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    filterBy(customers,value)&#123;<span class="comment">//value为input的值  filter会遍历数组的所有内容  根据匹配的名称返回整个对象</span></span><br><span class="line">      <span class="keyword">return</span> customers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">customer</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer.name.match(value);<span class="comment">//match方法匹配</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g2ex2jgkw0j32ao0isaca.jpg" alt></p><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><p>template部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">v-on:click</span>=<span class="string">"deleteCustomer(customer.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  deleteCustomer(id) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$http.delete(<span class="string">"http://localhost:3000/users/"</span> + id)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.$router.push(&#123;<span class="comment">//删除成功跳转到主页面</span></span><br><span class="line">              path:<span class="string">"/"</span>,</span><br><span class="line">              query:&#123;</span><br><span class="line">                  alert:<span class="string">"用户删除成功！"</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2ex3528zuj31sk0u0jw4.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;本系统为一个简单的后台用户管理系统，主要是进一步掌握vue的指令和熟练使用。本系统结合vue语法实现对数据的增删改查和全局搜索功能。并实现在本地搭建json服务器，对数据操作等。&lt;a href=&quot;https://github.com/Annecoding/vcustomers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github传送门&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://annecoding.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://annecoding.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-myblog项目实现</title>
    <link href="https://annecoding.github.io/2019/04/17/vue-blog%E9%A1%B9%E7%9B%AE/"/>
    <id>https://annecoding.github.io/2019/04/17/vue-blog项目/</id>
    <published>2019-04-17T01:34:10.000Z</published>
    <updated>2019-04-25T09:20:32.822Z</updated>
    
    <content type="html"><![CDATA[<p>本次项目实现是由vue脚手架构建的，并且vue已升级为3.5.5版本。完整项目可参见github源码展示，项目结构在代码中均有详细说明，<a href="https://github.com/Annecoding/vue-myblog" target="_blank" rel="noopener">vue-myblog传送门</a><br><a id="more"></a></p><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="comment"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">vue init webpack my-project</span><br><span class="line"><span class="comment"># 本人在使用过程中，安装路由以后都是no</span></span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── build                          //项目构建webpack相关代码</span><br><span class="line">│   ├── build.js//生产环境构建代码</span><br><span class="line">│   ├── check-versions.js        //检查node、npm等版本</span><br><span class="line">│   ├── logo.png</span><br><span class="line">│   ├── utils.js//构建工具相关</span><br><span class="line">│   ├── vue-loader.conf.js</span><br><span class="line">│   ├── webpack.base.conf.js//webpack基础配置</span><br><span class="line">│   ├── webpack.dev.conf.js        //webpack开发环境配置</span><br><span class="line">│   └── webpack.prod.conf.js//webpack生产环境配置</span><br><span class="line">├── config        //构建配置目录</span><br><span class="line">│   ├── dev.env.js//开发环境变量</span><br><span class="line">│   ├── index.js            //项目一些配置变量，比如路径和端口的修改</span><br><span class="line">│   └── prod.env.js//生产环境变量</span><br><span class="line">├── index.html               //项目入口文件</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json   //项目基本信息</span><br><span class="line">├── src                                      //源码目录</span><br><span class="line">│   ├── App.vue     //页面级vue组件，页面入口文件</span><br><span class="line">│   ├── assets        //资源目录</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── axios-auth.js //axios.auth自定义url请求头配置</span><br><span class="line">│   ├── components    //组件目录</span><br><span class="line">│   │   ├── AddBlog.vue//添加博客</span><br><span class="line">│   │   ├── BlogHeader.vue//博客header</span><br><span class="line">│   │   ├── EditBlog.vue//编辑博客</span><br><span class="line">│   │   ├── Hello.vue    //hello基础组件  暂未使用</span><br><span class="line">│   │   ├── ShowBlogs.vue//主页的博客列表</span><br><span class="line">│   │   └── SingleBlog.vue//点击标题进入某个博客的页面展示</span><br><span class="line">│   ├── main.js     //程序入口文件，加载各种公共组件，页面入口js文件</span><br><span class="line">│   └── routes.js    //路由模块</span><br><span class="line">└── static//静态文件目录，一些图片，json数据等</span><br><span class="line">    └── posts.json//请求本地的json文件</span><br></pre></td></tr></table></figure><p>关于项目具体结构分析可参见：<a href="https://segmentfault.com/a/1190000007880723" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007880723</a></p><h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>本项目是一个简单的基于vue.js学习而所做的个人博客的简单实现，已实现的功能如下：</p><ul><li>博客列表 😇</li><li>添加博客 😀</li><li>全局搜索 🔍博客</li><li>编辑博客 😊</li><li>删除博客 😏</li></ul><p>使用到的技术栈如下：</p><ul><li>vue-router</li><li>vue-resource，官方已停止更新</li><li>使用axios替换vue-resource，实现异步请求处理等~</li><li>本地存储postes.json数据，在static项目下面</li><li>firebase数据库(基于google，需要翻墙)</li><li>野狗数据(注册账号未成功，国内的平台，使用和firebase无异)</li></ul><h3 id="项目部分技术分析"><a href="#项目部分技术分析" class="headerlink" title="项目部分技术分析"></a>项目部分技术分析</h3><h4 id="vue自定义指令"><a href="#vue自定义指令" class="headerlink" title="vue自定义指令"></a>vue自定义指令</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//ShowBlogs.vue </span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-rainbow</span>&gt;</span>&#123;&#123;blog.title | to-uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指令私有化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ShowBlogs.vue</span></span><br><span class="line"><span class="comment">//指令私有化方式 local Api 改变h2标签颜色</span></span><br><span class="line">  directives: &#123;</span><br><span class="line">      <span class="string">'rainbow'</span>:&#123;<span class="comment">//对象</span></span><br><span class="line">        bind (el,binding,vnode)&#123;</span><br><span class="line">            el.style.color = <span class="string">"#"</span> + <span class="built_in">Math</span>.random().toString(<span class="number">16</span>).slice(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>全局指令API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//全局API</span></span><br><span class="line"><span class="comment">//v-rainbow  自定义指令使用  改变h2标题标签颜色</span></span><br><span class="line">Vue.directive(<span class="string">'rainbow'</span>, &#123;</span><br><span class="line">  bind(el,binding,vnode)&#123;</span><br><span class="line">    <span class="comment">//彩虹色 #+六位数字</span></span><br><span class="line">    el.style.color = <span class="string">"#"</span> + <span class="built_in">Math</span>.random().toString().slice(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>全局指令API + 参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//ShowBlogs.vue</span><br><span class="line"><span class="comment">&lt;!-- 双引号传值应该是字符串  字符串是要用引号引起来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-theme:column</span>=<span class="string">"'wide'"</span> <span class="attr">id</span>=<span class="string">"show-blogs"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//v-theme 自定义参数使用  改变宽度</span></span><br><span class="line">Vue.directive(<span class="string">'theme'</span>,&#123;</span><br><span class="line">  bind(el,binding,vnode)&#123;</span><br><span class="line">    <span class="keyword">if</span> (binding.value == <span class="string">'wide'</span>) &#123;<span class="comment">//所传值为wide</span></span><br><span class="line">      el.style.maxWidth = <span class="string">"1260px"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(binding.value == <span class="string">"narrow"</span>)&#123;<span class="comment">//所传值为narrow</span></span><br><span class="line">      el.style.minWidth == <span class="string">"560px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(binding.arg == <span class="string">'column'</span>)&#123;<span class="comment">//v-theme自定义参数传值，如果为column,则给其一个背景和padding</span></span><br><span class="line">      el.style.background = <span class="string">"cornflowerblue"</span>;</span><br><span class="line">      el.style.padding = <span class="string">'20px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vue过滤器"><a href="#vue过滤器" class="headerlink" title="vue过滤器"></a>vue过滤器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//ShowBlogs.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"blog in filteredBlogs"</span> <span class="attr">class</span>=<span class="string">"single-blog"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义指令v-rainbow使用  让标题改变颜色 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据值都变成大写  过滤器实现 左边为拿到的值 用value接收--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 点击标跳转（router-link -- a标签），路由跳转--router.js--到单个的blog，顺便传过去id   v-bind绑定数据为变量 showblog:id--singleblog:id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'/blog/' + blog.id"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-rainbow</span>&gt;</span>&#123;&#123;blog.title | to-uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文章内容太长  点击详情再全部展示内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &#123;&#123;blog.body | snippet&#125;&#125; --&gt;</span></span><br><span class="line">           &#123;&#123;blog.content | snippet&#125;&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>私有过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ShowBlogs.vue </span></span><br><span class="line"><span class="comment">//方法私有化 过滤器私有化</span></span><br><span class="line">filters:&#123;</span><br><span class="line">    <span class="comment">//   "to-uppercase":function (value) &#123;</span></span><br><span class="line">    <span class="comment">//       return value.toUpperCase();</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">//添加私有过滤器</span></span><br><span class="line">    toUppercase (value) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>全局过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义过滤器 实现标题都变为大写  实现全局搜索功能 </span></span><br><span class="line"><span class="comment">// Vue.filter("to-uppercase", function (value) &#123;//形参接收管道左边的值</span></span><br><span class="line"><span class="comment">//   return value.toUpperCase();//标题变为大写</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//自定义过滤器  实现文章内容部分展示功能</span></span><br><span class="line">Vue.filter(<span class="string">"snippet"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.slice(<span class="number">0</span>,<span class="number">100</span>) + <span class="string">"..."</span>;<span class="comment">//实现截取文章展示</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本次项目实现是由vue脚手架构建的，并且vue已升级为3.5.5版本。完整项目可参见github源码展示，项目结构在代码中均有详细说明，&lt;a href=&quot;https://github.com/Annecoding/vue-myblog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-myblog传送门&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://annecoding.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://annecoding.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js路由组件学习</title>
    <link href="https://annecoding.github.io/2019/04/16/vue%E8%B7%AF%E7%94%B1/"/>
    <id>https://annecoding.github.io/2019/04/16/vue路由/</id>
    <published>2019-04-16T07:34:12.000Z</published>
    <updated>2019-05-20T03:21:50.200Z</updated>
    
    <content type="html"><![CDATA[<p>vue.js路由的使用</p><p><strong>router-link</strong> 组件支持用户在具有路由功能的应用中 (点击) 导航。通过 to 属性指定目标地址，默认渲染成带有正确链接的 <code>a</code>标签，可以通过配置 tag 属性生成别的标签。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。<strong>router-view</strong>组件是一个 functional 组件，渲染路径匹配到的视图组件。<strong>router-view</strong>渲染的组件还可以内嵌自己的 <strong>router-view</strong>，根据嵌套路径，渲染嵌套组件。<br><a id="more"></a></p><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'home' &#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h3><p>很多时候，每个路由的数据都是包含在路由参数中。因为它也是个组件，所以可以配合 <transition> 和 <keep-alive> 使用。如果两个结合一起用，要确保在内层使用 <keep-alive><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></keep-alive></keep-alive></transition></p><h3 id="官方实例"><a href="#官方实例" class="headerlink" title="官方实例"></a>官方实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NotFound = &#123; <span class="attr">template</span>: <span class="string">'&lt;p&gt;Page not found&lt;/p&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Home = &#123; <span class="attr">template</span>: <span class="string">'&lt;p&gt;home page&lt;/p&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> About = &#123; <span class="attr">template</span>: <span class="string">'&lt;p&gt;about page&lt;/p&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = &#123;</span><br><span class="line">  <span class="string">'/'</span>: Home,</span><br><span class="line">  <span class="string">'/about'</span>: About</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentRoute: <span class="built_in">window</span>.location.pathname</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ViewComponent () &#123;</span><br><span class="line">      <span class="keyword">return</span> routes[<span class="keyword">this</span>.currentRoute] || NotFound</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123; <span class="keyword">return</span> h(<span class="keyword">this</span>.ViewComponent) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="实例一-基础使用"><a href="#实例一-基础使用" class="headerlink" title="实例一  基础使用"></a>实例一  基础使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//引入路由模块</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//以基于全局的Vue对象使用http</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)  <span class="comment">//使用路由</span></span><br><span class="line">Vue.use(VueResource)  <span class="comment">//可以在任何一个组件中使用http</span></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: Home &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/helloworld'</span>, <span class="attr">component</span>: HelloWorld &#125;</span><br><span class="line">    ],</span><br><span class="line">    mode:<span class="string">'history'</span><span class="comment">//去掉路径的#/</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,<span class="comment">//调用router对象</span></span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span>h(App)</span><br><span class="line">  )&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接，相当于&lt;a&gt;的href. --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/helloworld"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例二-实现vue-myblog路由链接-其中router-js导出"><a href="#实例二-实现vue-myblog路由链接-其中router-js导出" class="headerlink" title="实例二  实现vue-myblog路由链接 其中router.js导出"></a>实例二  实现vue-myblog路由链接 其中router.js导出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> Routes <span class="keyword">from</span> <span class="string">'./routes'</span> <span class="comment">//引入新建的routes.js</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueResource)</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由并调用路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:Routes, <span class="comment">//使用路由--&gt;router.js</span></span><br><span class="line">  mode:<span class="string">"history"</span> <span class="comment">//去掉路径的#</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  router:router,<span class="comment">//最大的一层容器里面去使用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//routes.js</span></span><br><span class="line"><span class="keyword">import</span> ShowBlogs <span class="keyword">from</span> <span class="string">'./components/ShowBlogs.vue'</span></span><br><span class="line"><span class="keyword">import</span> AddBlog <span class="keyword">from</span> <span class="string">'./components/AddBlog.vue'</span> </span><br><span class="line"><span class="keyword">import</span> SingleBlog <span class="keyword">from</span> <span class="string">'./components/SingleBlog.vue'</span></span><br><span class="line"><span class="keyword">import</span> EditBlog <span class="keyword">from</span> <span class="string">'./components/EditBlog.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>[</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/"</span>,<span class="attr">component</span>:ShowBlogs&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/add"</span>,<span class="attr">component</span>:AddBlog&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/blog/:id"</span>,<span class="attr">component</span>:SingleBlog&#125;,<span class="comment">//路由的实现   根据id展示对应内容</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/edit/:id"</span>,<span class="attr">component</span>:EditBlog&#125;<span class="comment">//路由参数:id  根据一套模板跳转到某个位置  执行某个组件</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//BlogHeader.vue</span><br><span class="line">//路由的链接组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">exact</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/add"</span> <span class="attr">exact</span>&gt;</span>添加博客<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//ShowBlogs.vue</span><br><span class="line"><span class="comment">&lt;!-- 遍历出所有的博客内容 filterBlogs --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- key值只能是string、number，不能是对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"blog in filteredBlogs"</span> <span class="attr">class</span>=<span class="string">"single-blog"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义指令v-rainbow使用  让标题改变颜色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据值都变成大写  过滤器实现 左边为拿到的值 用value接收--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击标跳转（router-link -- a标签），路由跳转--router.js--到单个的blog，顺便传过去id   v-bind绑定数据为变量 showblog:id--singleblog:id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'/blog/' + blog.id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-rainbow</span>&gt;</span>&#123;&#123;blog.title | to-uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文章内容太长  点击详情再全部展示内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &#123;&#123;blog.body | snippet&#125;&#125; --&gt;</span></span><br><span class="line">       &#123;&#123;blog.content | snippet&#125;&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//SingleBlog.vue</span><br><span class="line"><span class="comment">&lt;!-- 编辑-根据id编辑哪个博客 /edit/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>= <span class="string">"'/edit/' + id"</span>&gt;</span>编辑博客</span><br><span class="line">  <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例二完整项目可参见github源码展示，项目结构在代码中均有详细说明，<strong><a href="https://github.com/Annecoding/vue-myblog" target="_blank" rel="noopener">vue-myblog传送门</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue.js路由的使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;router-link&lt;/strong&gt; 组件支持用户在具有路由功能的应用中 (点击) 导航。通过 to 属性指定目标地址，默认渲染成带有正确链接的 &lt;code&gt;a&lt;/code&gt;标签，可以通过配置 tag 属性生成别的标签。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。&lt;strong&gt;router-view&lt;/strong&gt;组件是一个 functional 组件，渲染路径匹配到的视图组件。&lt;strong&gt;router-view&lt;/strong&gt;渲染的组件还可以内嵌自己的 &lt;strong&gt;router-view&lt;/strong&gt;，根据嵌套路径，渲染嵌套组件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://annecoding.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://annecoding.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js中组件的使用</title>
    <link href="https://annecoding.github.io/2019/04/16/vue%E7%BB%84%E4%BB%B6/"/>
    <id>https://annecoding.github.io/2019/04/16/vue组件/</id>
    <published>2019-04-16T06:16:32.000Z</published>
    <updated>2019-05-20T03:21:41.740Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"><br>在<strong>vue.js</strong>之中，组件分为<strong>全局注册</strong>和<strong>局部注册</strong>组件，由模板、行为、样式组成。为了在模板中使用，组件要先注册后才能被调用。要注意的是，一个组件的 <strong>data 选项</strong>必须是一个<strong>函数</strong>。<br><a id="more"></a><br>组件的存在方便了开发使用，通常一个应用会以一棵嵌套的组件树的形式来组织。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g24ghhdi33j30vg0aw74t.jpg" alt></p><h3 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;</span><br><span class="line">  <span class="comment">// ... options ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"components-demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#components-demo'</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="局部注册组件"><a href="#局部注册组件" class="headerlink" title="局部注册组件"></a>局部注册组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件调用   绑定子组件的事件  并且在父组件定义实现方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">v-bind:title1</span>=<span class="string">"title1"</span> <span class="attr">v-on:titleChanged</span>=<span class="string">"updateTitle($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件绑定子组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-users</span> <span class="attr">v-bind:users</span>=<span class="string">"users"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-users</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;app-users v-bind:users="users"&gt;&lt;/app-users&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-footer</span> <span class="attr">v-bind:title1</span>=<span class="string">"title1"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./Header'</span>;</span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer'</span>;</span><br><span class="line"><span class="keyword">import</span> Users  <span class="keyword">from</span> <span class="string">'./Users'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;!--行为--&gt;</span></span><br><span class="line"><span class="comment">// &lt;!--</span></span><br><span class="line"><span class="comment">// 传值   String number boolean </span></span><br><span class="line"><span class="comment">// 传引用 Array Object 一个地方变化 其他的也变化</span></span><br><span class="line"><span class="comment">// --&gt;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'users'</span>,</span><br><span class="line">  <span class="comment">//props:["users"],从父组件向子组件进行属性传值</span></span><br><span class="line">  props:&#123;</span><br><span class="line">      users:&#123;</span><br><span class="line">          type:<span class="built_in">Array</span>,</span><br><span class="line">          required:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">   methods:&#123;</span><br><span class="line">     updateTitle:<span class="function"><span class="keyword">function</span>(<span class="params">title1</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.title1=title1;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      users:[],</span><br><span class="line">      title:<span class="string">"传递是一个值"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//注册组件</span></span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">'app-header'</span>:Header,</span><br><span class="line">    <span class="string">'app-footer'</span>:Footer,</span><br><span class="line">    <span class="string">'app-users'</span>:Users</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;<span class="comment">//组件实例化之前去请求到数据</span></span><br><span class="line">    <span class="keyword">this</span>.$http.get(<span class="string">"https://jsonplaceholder.typicode.com/users"</span>)</span><br><span class="line">              .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//  console.log(data);</span></span><br><span class="line">                <span class="keyword">this</span>.users = data.body;</span><br><span class="line">              &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line"><span class="comment">/* &lt;!--样式   scoped 控制不同组件不同样式  会添加唯一匹配的id --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#users</span>&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;<span class="comment">/* 告诉浏览器去理解你设置的边框和内边距的值是包含在width内的。</span></span><br><span class="line"><span class="comment">    也就是说，如果你将一个元素的width设为100px,那么这100px会包含其它的border和padding。*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;<span class="comment">/*让元素在必要的时候拆行*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;<span class="comment">/*属性用于设置或检索弹性盒子的扩展比率*/</span></span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">300px</span>;<span class="comment">/*属性用于设置或检索弹性盒伸缩基准值 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#000</span>;<span class="comment">/*字体颜色*/</span></span><br><span class="line">    <span class="attribute">cursor</span>: pointer;<span class="comment">/*鼠标以手显示*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在组件进行实例化之前请求数据，把数据传给users。<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g24bv9wll6j30ug09e3zw.jpg" alt><br>关于所请求的数据如下：<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g24br2er54j30vu0q4q71.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;br&gt;在&lt;strong&gt;vue.js&lt;/strong&gt;之中，组件分为&lt;strong&gt;全局注册&lt;/strong&gt;和&lt;strong&gt;局部注册&lt;/strong&gt;组件，由模板、行为、样式组成。为了在模板中使用，组件要先注册后才能被调用。要注意的是，一个组件的 &lt;strong&gt;data 选项&lt;/strong&gt;必须是一个&lt;strong&gt;函数&lt;/strong&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://annecoding.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://annecoding.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统常用命令整理</title>
    <link href="https://annecoding.github.io/2019/03/27/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://annecoding.github.io/2019/03/27/linux常用命令/</id>
    <published>2019-03-27T06:52:47.000Z</published>
    <updated>2019-04-29T01:23:15.062Z</updated>
    
    <content type="html"><![CDATA[<p>linux常用命令整理。经常用起来的命令也可能随时忘记。将持续更新ing~<br><a id="more"></a></p><h3 id="查看linux的版本"><a href="#查看linux的版本" class="headerlink" title="查看linux的版本"></a>查看linux的版本</h3><h4 id="查看版本号32位还是64位"><a href="#查看版本号32位还是64位" class="headerlink" title="查看版本号32位还是64位"></a>查看版本号32位还是64位</h4><p>方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# uname -a</span><br><span class="line">Linux localhost 3.10.0-862.14.4.el7.x86_64 #1 SMP Wed Sep 26 15:12:11 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# file /bin/ls</span><br><span class="line">/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=c5ad78cfc1de12b9bb6829207cececb990b3e987, stripped</span><br></pre></td></tr></table></figure></p><p>方法三<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /proc/version</span><br><span class="line">Linux version 3.10.0-862.14.4.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) ) #1 SMP Wed Sep 26 15:12:11 UTC 2018</span><br></pre></td></tr></table></figure></p><p>方法四<br>32位的系统中int类型和long类型一般都是4字节。<br>64位的系统中int类型还是4字节的，但是long已变成了8字节。linux系统中可用”getconf WORD_BIT”和”getconf LONG_BIT”获得word和long的位数。<br>64位系统中应该分别得到32和64。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# getconf LONG_BIT</span><br><span class="line">64</span><br><span class="line">[root@localhost ~]# getconf WORD_BIT</span><br><span class="line">32</span><br></pre></td></tr></table></figure></p><h4 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h4><p>方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# lsb_release -a</span><br><span class="line">LSB Version:    :core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID: CentOS</span><br><span class="line">Description:    CentOS Linux release 7.5.1804 (Core) </span><br><span class="line">Release:        7.5.1804</span><br><span class="line">Codename:       Core</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/os-release</span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;7 (Core)&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;7&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;</span><br><span class="line">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;</span><br></pre></td></tr></table></figure></p><p>方法三<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br></pre></td></tr></table></figure></p><p>方法四<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -q centos-release</span><br><span class="line">centos-release-7-5.1804.5.el7.centos.x86_64</span><br></pre></td></tr></table></figure></p><h4 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h4><p>方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /proc/version </span><br><span class="line">Linux version 3.10.0-862.14.4.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) ) #1 SMP Wed Sep 26 15:12:11 UTC 2018</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# uname -a </span><br><span class="line">Linux localhost 3.10.0-862.14.4.el7.x86_64 #1 SMP Wed Sep 26 15:12:11 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><h3 id="查询磁盘使用情况"><a href="#查询磁盘使用情况" class="headerlink" title="查询磁盘使用情况"></a>查询磁盘使用情况</h3><h4 id="目录使用状况"><a href="#目录使用状况" class="headerlink" title="目录使用状况"></a>目录使用状况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G  7.0G   31G  19% /</span><br><span class="line">devtmpfs        909M     0  909M   0% /dev</span><br><span class="line">tmpfs           920M     0  920M   0% /dev/shm</span><br><span class="line">tmpfs           920M  536K  919M   1% /run</span><br><span class="line">tmpfs           920M     0  920M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs           184M     0  184M   0% /run/user/0</span><br></pre></td></tr></table></figure><p>其中，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a：显示所有文件系统的磁盘使用情况，包括0块（block）的文件系统，如/proc文件系统。</span><br><span class="line">-k：以k字节为单位显示。</span><br><span class="line">-i：显示i节点信息，而不是磁盘块。</span><br><span class="line">-t：显示各指定类型的文件系统的磁盘空间使用情况。</span><br><span class="line">-x：列出不是某一指定类型文件系统的磁盘空间使用情况（与t选项相反）。</span><br><span class="line">-T：显示文件系统类型。</span><br></pre></td></tr></table></figure></p><h4 id="单独文件夹使用状况"><a href="#单独文件夹使用状况" class="headerlink" title="单独文件夹使用状况"></a>单独文件夹使用状况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# du -sh /etc/</span><br><span class="line">38M     /etc/</span><br></pre></td></tr></table></figure><p>其中，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-s：对每个Names参数只给出占用的数据块总数。</span><br><span class="line">-a：递归地显示指定目录中各文件及子目录中各文件占用的数据块数。若既不指定-s，也不指定-a，则只显示Names中的每一个目录及其中的各子目录所占的磁盘块数。</span><br><span class="line">-b：以字节为单位列出磁盘空间使用情况（系统默认以k字节为单位）。</span><br><span class="line">-k：以1024字节为单位列出磁盘空间使用情况。</span><br><span class="line">-c：最后再加上一个总计（系统默认设置）。</span><br><span class="line">-l：计算所有的文件大小，对硬链接文件，则计算多次。</span><br><span class="line">-x：跳过在不同文件系统上的目录不予统计。</span><br></pre></td></tr></table></figure></p><h3 id="查询内存状况"><a href="#查询内存状况" class="headerlink" title="查询内存状况"></a>查询内存状况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1.8G         71M        1.2G        612K        533M        1.6G</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><p>对于OS来说，buffers+cached已用。<br>对应用程序来说，可用内存=free memory+buffers+cached。</p><h3 id="查询cpu"><a href="#查询cpu" class="headerlink" title="查询cpu"></a>查询cpu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# top</span><br><span class="line">top - 16:23:00 up  1:35,  4 users,  load average: 0.00, 0.01, 0.05</span><br><span class="line">Tasks:  76 total,   1 running,  75 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  1882740 total,  1262492 free,    74040 used,   546208 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  1655412 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                         </span><br><span class="line">    1 root      20   0   43384   3724   2556 S  0.0  0.2   0:01.34 systemd                                                         </span><br><span class="line">    2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd                                                        </span><br><span class="line">    3 root      20   0       0      0      0 S  0.0  0.0   0:00.01 ksoftirqd/0                                                     </span><br><span class="line">    4 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0                                                     </span><br><span class="line">    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H                                                    </span><br><span class="line">    6 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kworker/u2:0                                                    </span><br><span class="line">    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0</span><br></pre></td></tr></table></figure><ul><li><p>第一行信息（top）：<br>“16:23:00”为系统当前时刻；<br>“1:39”为系统启动后到现在的运作时间；<br>“4 users”为当前登录到系统的用户，更确切的说是登录到用户的终端数 – 同一个用户同一时间对系统多个终端的连接将被视为多个用户连接到系统，这里的用户数也将表现为终端的数目；<br>“load average”为当前系统负载的平均值，后面的三个值分别为1分钟前、5分钟前、15分钟前进程的平均数，一般的可以认为这个数值超过 CPU 数目时，CPU 将比较吃力的负载当前系统所包含的进程；</p></li><li><p>第二行信息（Tasks）：<br>“76 total”为当前系统进程总数；<br>“1 running”为当前运行中的进程数；<br>“75 sleeping”为当前处于等待状态中的进程数；<br>“0 stoped”为被停止的系统进程数；<br>“0 zombie”为被复原的进程数；</p></li><li><p>第三行（Cpus）：<br>分别表示了 CPU 当前的使用率；</p></li><li><p>第四行（Mem）：<br>分别表示了内存总量、当前使用量、空闲内存量、以及缓冲使用中的内存量；</p></li><li><p>第五行（Swap）：<br>表示类别同第四行（Mem），但此处反映着交换分区（Swap）的使用情况。通常，交换分区（Swap）被频繁使用的情况，将被视作物理内存不足而造成的。　　　　</p></li></ul><p>正文内容解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PID：进程的ID</span><br><span class="line">USER：进程所有者</span><br><span class="line">PR：进程的优先级别，越小越优先被执行</span><br><span class="line">NInice：值</span><br><span class="line">VIRT：进程占用的虚拟内存</span><br><span class="line">RES：进程占用的物理内存</span><br><span class="line">SHR：进程使用的共享内存</span><br><span class="line">S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数</span><br><span class="line">%CPU：进程占用CPU的使用率</span><br><span class="line">%MEM：进程使用的物理内存和总内存的百分比</span><br><span class="line">TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。</span><br><span class="line">COMMAND：进程启动命令名称</span><br></pre></td></tr></table></figure></p><h3 id="查询网络信息等"><a href="#查询网络信息等" class="headerlink" title="查询网络信息等"></a>查询网络信息等</h3><h4 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig  #需要安装yum install net-tools</span><br><span class="line">#或者 </span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure><h4 id="查看dns信息"><a href="#查看dns信息" class="headerlink" title="查看dns信息"></a>查看dns信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/resolv.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux常用命令整理。经常用起来的命令也可能随时忘记。将持续更新ing~&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Centos" scheme="https://annecoding.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="https://annecoding.github.io/2019/03/25/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://annecoding.github.io/2019/03/25/Linux学习笔记/</id>
    <published>2019-03-25T02:20:24.000Z</published>
    <updated>2019-05-27T07:32:14.180Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>如果你以前从未接触过Linux，可能就不清楚为什么会有这么多不同的Linux发行版。在查看Linux软件包时，你肯定被发行版、LiveCD和GNU之类的术语搞晕过。那，我也不会讲给你听。🤣<br><a id="more"></a></p><h4 id="基本的bash命令"><a href="#基本的bash命令" class="headerlink" title="基本的bash命令"></a>基本的bash命令</h4><p><strong>处理文件</strong> </p><ul><li><p>链接文件,如需要在系统上维护同一文件的两份或多份副本，除了保存多份单独的物理文件副本之外，还可以采用保存一份物理文件副本和多个虚拟副本的方<br>法。</p><ul><li><p>软链接（符号链接），通过符号链接在一起的文件，彼此的内容并不相同。可用inode查看文件是否为独立文件<code>ls -i *data_file</code>。可用<code>ln -s 源文件 链接文件</code>创建符号链接文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s data_file sl_data_file</span><br></pre></td></tr></table></figure></li><li><p>硬链接，引用硬链接文件等同于引用了源文件，只能对处于同一存储媒体的文件创建硬链接。可用<code>ln 源文件 链接文件</code>来创建硬链接文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln code_file hl_code_file</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>复制文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -i 源文件 目的文件</span><br></pre></td></tr></table></figure></li><li><p><code>i</code>询问是否覆盖</p></li><li><p>移动文件，也可➕<code>i</code>参数询问是否移动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv 源文件 目的文件</span><br></pre></td></tr></table></figure></li></ul><p><strong>处理目录</strong></p><ul><li>删除目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -R,递归删除目录</span></span><br><span class="line">rm -r xxx</span><br><span class="line"><span class="comment"># 递归强制删除目录，不提示，慎用</span></span><br><span class="line">rm -rf xxx</span><br><span class="line"><span class="comment"># rmdir,只能删除空目录</span></span><br><span class="line">rmdir xxx</span><br></pre></td></tr></table></figure></li></ul><p><strong>查看文件</strong></p><ul><li><p>file,查看文件类型及编码方式，查看是否有相关链接等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# file passwd </span><br><span class="line">passwd: ASCII text</span><br></pre></td></tr></table></figure></li><li><p>cat</p><ul><li>cat -n 添加行号</li><li>cat -b 只给有内容的数据添加行号</li><li>cat -T 可去掉文件中的制表符</li></ul></li><li><p>more，显示每页数据，可以按需切换，man more<br>只支持文本文件中的基本移动</p></li><li><p>less(less is more),more升级，能识别上下键及翻页键</p></li><li><p>tail，查寻文件最后十行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看最后两行</span><br><span class="line">tail -n 2 test.txt</span><br></pre></td></tr></table></figure></li><li><p>其中常用的是，动态的追踪最后十行日志等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f test.txt</span><br></pre></td></tr></table></figure></li><li><p>head，查询文件的前十行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询文件的前5行</span><br><span class="line">head -5 test.txt</span><br></pre></td></tr></table></figure></li></ul><h4 id="监测程序"><a href="#监测程序" class="headerlink" title="监测程序"></a>监测程序</h4><ul><li>ps，常用<code>ps -ef</code><ul><li><code>e</code>显示所有的进程</li><li><code>f</code>显示完整格式输出</li><li><code>UID</code>启动这些进程的用户</li><li><code>PID</code>进程ID</li><li><code>PPID</code>父进程的进程号</li><li><code>C</code>进程生命周期中的CPU利用率</li><li><code>STIME</code>进程启动的系统时间</li><li><code>TTY</code>终端设备</li><li><code>TIME</code>运行进程需要的累计CPU时间</li><li><code>CMD</code>启动的程序名称</li></ul></li><li><p><code>ps -l</code>可查看更多信息</p><ul><li><code>F</code>内核分配给进程的系统标记</li><li><code>S</code>进程的状态（O代表正在运行；S代表在休眠；R代表可运行，正等待运行；Z代表僵化，进程已结束但父进程已不存在；T代表停止）</li><li><code>PRI</code>进程的优先级（越大的数字代表越低的优先级）</li><li><code>NI</code>谦让度值用来参与决定优先级</li><li><code>ADDR</code>进程的内存地址</li><li><code>SZ</code>假如进程被换出，所需交换空间的大致大小</li><li><code>WCHAN</code>进程休眠的内核函数的地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ps -l</span><br><span class="line">F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</span><br><span class="line">4 S     0 27869 27867  0  80   0 - 28891 do_wai pts/0    00:00:00 bash</span><br><span class="line">0 R     0 27888 27869  0  80   0 - 38300 -      pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure></li></ul></li><li><p>top，实时监测进程</p><ul><li><code>PR</code>进程优先级</li><li><code>VIRT</code>虚拟内存总量</li><li><code>RES</code>物理内存总量</li><li><code>SHR</code>进程和其他进程的内存总量</li><li><code>TIME+</code>时间总量</li></ul></li><li><p>kill，强制终止进程，<code>s</code>可指定其他参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill PID</span><br><span class="line">kill -s HUP 3940</span><br></pre></td></tr></table></figure></li><li><p>killall，支持通过进程名来结束进程，<strong>通配符等命令慎用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall http*</span><br></pre></td></tr></table></figure></li></ul><h4 id="监测磁盘空间"><a href="#监测磁盘空间" class="headerlink" title="监测磁盘空间"></a>监测磁盘空间</h4><ul><li>mount，挂载存储媒体</li><li><p>该命令包含的四部分如下</p><ul><li>媒体的设备文件名</li><li>媒体挂载到虚拟目录的挂载点</li><li>文件系统类型</li><li>已挂载媒体的访问状态</li></ul></li><li><p>在虚拟目录中手动挂载设备，需要以root用户登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -t type device directory </span><br><span class="line"># 将U盘/dev/sdb1 挂载到/media/disk</span><br><span class="line">mount -t vfat /dev/sdb1 /media/disk</span><br></pre></td></tr></table></figure></li><li><p>type参数指定了磁盘被格式化的类型，一般是vfat（大多数U盘和软盘）、ntfs、iso9660(数据CD)</p></li><li><p>umount，从linux中移除一个设备时，不能直接从系统上移除，应该先卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 要退出挂载的目录，避免命令提示符正在使用的情况</span><br><span class="line">[root@testbox mnt]# cd /home/rich</span><br><span class="line">[root@testbox rich]# umount /home/rich/mnt</span><br></pre></td></tr></table></figure></li><li><p>df命令，查看某个设备还有多少磁盘空间</p></li><li><p>df -hT<br><code>h</code>以1024进制，也就是M显示。<br><code>H</code>为1000进制。<br><code>T</code>显示文件系统类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# df -hT</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1      ext4       40G  7.1G   31G  19% /</span><br><span class="line">devtmpfs       devtmpfs  909M     0  909M   0% /dev</span><br><span class="line">tmpfs          tmpfs     920M     0  920M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     920M  500K  919M   1% /run</span><br><span class="line">tmpfs          tmpfs     920M     0  920M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs          tmpfs     184M     0  184M   0% /run/user/0</span><br></pre></td></tr></table></figure></li><li><p>df -hT -t ext4<br><code>t</code>只匹配ext4类型的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# df -hT -t ext4</span><br><span class="line">Filesystem     Type  Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1      ext4   40G  7.1G   31G  19% /</span><br></pre></td></tr></table></figure></li><li><p>df -hT  -x ext4<br><code>x</code>参数匹配所有非ext4类型的文件目录(反向匹配)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# df -hT -x ext4</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs  909M     0  909M   0% /dev</span><br><span class="line">tmpfs          tmpfs     920M     0  920M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     920M  500K  919M   1% /run</span><br><span class="line">tmpfs          tmpfs     920M     0  920M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs          tmpfs     184M     0  184M   0% /run/user/0</span><br></pre></td></tr></table></figure></li><li><p>du，显示某个特定目录的磁盘使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">du -sh *.sh</span><br><span class="line">du -sH *.sh</span><br></pre></td></tr></table></figure></li></ul><h4 id="处理数据文件"><a href="#处理数据文件" class="headerlink" title="处理数据文件"></a>处理数据文件</h4><ul><li><p>sort，可对数据文件以一定的顺序排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort file.txt</span><br></pre></td></tr></table></figure></li><li><p><code>sort -n file.txt</code>可按数字排序</p></li><li><code>sort -M file.txt</code>可按月份排序（英文，可简写）</li><li><p><code>-k</code>和<code>-t</code>参数在对按字段分隔的数据进行排序时非常有用，例如/etc/passwd文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sort -t &apos;:&apos; -k 3 -n /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p><code>-n</code>参数在排序数值时非常有用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ du -sh * | sort -nr</span><br><span class="line">1008k mrtg-2.9.29.tar.gz</span><br><span class="line">972k bldg1</span><br><span class="line">888k fbs2.pdf</span><br><span class="line">760k Printtest</span><br><span class="line">680k rsync-2.6.6.tar.gz</span><br></pre></td></tr></table></figure></li><li><p><code>-r</code>参数将结果按降序输出</p></li><li><p>grep，搜索匹配模式的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grep three file1</span><br><span class="line"><span class="comment"># 反向搜索（输出不匹配该模式的行）</span></span><br><span class="line">grep -v t file1</span><br><span class="line"><span class="comment"># 显示所在行号 </span></span><br><span class="line">grep -n t file1 </span><br><span class="line"><span class="comment"># 显示有多少行匹配</span></span><br><span class="line">grep -c t file1 </span><br><span class="line"><span class="comment"># 指定多个匹配模式，`-t`参数</span></span><br><span class="line">grep -e t -e f file1</span><br></pre></td></tr></table></figure></li><li><p>egrep命令是grep的一个衍生，支持POSIX扩展正则表达式。</p></li></ul><h4 id="压缩数据"><a href="#压缩数据" class="headerlink" title="压缩数据"></a>压缩数据</h4><ul><li><p>gzip软件包</p><ul><li>gzip：用来压缩文件。</li><li>gzcat：用来查看压缩过的文本文件的内容。</li><li>gunzip：用来解压文件。</li></ul></li><li><p>tar，归档数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="keyword">function</span> [options] object1 object2 ... </span><br><span class="line"><span class="comment"># 创建归档文件</span></span><br><span class="line">tar -cvf test.tar <span class="built_in">test</span>/ test2/ </span><br><span class="line"><span class="comment"># 列出归档文件内容</span></span><br><span class="line">tar -tf test.tar </span><br><span class="line"><span class="comment"># 提取归档文件到当前目录</span></span><br><span class="line">tar -xvf test.tar</span><br></pre></td></tr></table></figure></li><li><p>其中，下载了开源软件之后，你会经常看到文件名以.tgz结尾。这些是gzip压缩过的tar文件，可以用命令<code>tar -zxvf filename.tgz</code>来解压。</p></li></ul><h4 id="linux操作文件系统"><a href="#linux操作文件系统" class="headerlink" title="linux操作文件系统"></a>linux操作文件系统</h4><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g324grqio9j31ak0o847j.jpg" alt="01"></p><p>扩展分区必须挂载才能使用</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g324knbtzdj30tm08qq7z.jpg" alt="02"></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g324l0wbovj30um070gom.jpg" alt="03"></p><p><strong>创建MBR分区</strong></p><ul><li><p>fdisk，硬盘分区工具，管理安装在系统上的任何存储设备上的分区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure></li><li><p>进入分区模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure></li></ul><p>可输入<strong>m</strong>查看帮助信息</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g324ogbq41j316y0ag4ak.jpg" alt="04"></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g324oslnktj30ny0lw4dn.jpg" alt="05"></p><p>输入<strong>n</strong>，创建新分区</p><p><strong>p</strong>，主分区</p><p><strong>e</strong>，扩展分区</p><p>默认主分区，输入<strong>p</strong>，</p><p>分区号，<strong>默认</strong>为1，</p><p>扇区开始位置，终止位置<strong>+3000M</strong>，默认为剩下整个分区，</p><p>可输入<strong>p</strong>查看已经添加的分区</p><p>添加扩展分区，</p><p>输入<strong>e</strong>,</p><p>分区号2，可<strong>默认</strong></p><p>起始扇区，<strong>默认</strong></p><p>结束扇区，<strong>默认</strong>全部剩下的存储空间都为扩展分区</p><p>扩展分区不可以直接使用</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g337sd4zj3j31380i8air.jpg" alt="06"></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g337t74x4zj310805kte0.jpg" alt="07"></p><p>GPT不支持32操作系统，使用fdisk只能创建MBR分区。</p><p><strong>创建GPT分区</strong></p><p>使用<strong>parted</strong>分区工具，既可创建GPT分区，也可创建MBR分区</p><p>可使用<strong>help</strong>查看帮助</p><p>切换目标硬盘，<strong>select  /dev/sdc</strong></p><p>给目标硬盘指定目标分区表类型，使用<strong>mklabel</strong>工具，</p><p>指定MBR分区，mklabel mados</p><p>指定GPT分区，mklabel gpt，</p><p>输入<strong>print</strong>，查看当前硬盘分区详情</p><p>输入<strong>print all</strong>，可以看到所有的分区表详情。</p><p><strong>给目标硬盘添加分区</strong></p><p>gpt交互模式，创建分区，<strong>mkpart</strong></p><p>名称？<strong>imooc</strong>，可回车。</p><p>文件系统类型，<strong>默认</strong>ext2，后续可格式化，</p><p>开始位置，fdisk扇区数据块编号，在这里是第几个分区，输入<strong>0</strong></p><p>结束，<strong>2000M</strong></p><p>第0M—第2000M</p><p>数据块没有对齐，<strong>cancel</strong></p><p><strong>第1M-第2000M</strong></p><p>不提示数据块未对齐</p><p>输入<strong>print</strong>，查看目前分区状况</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g338aajtm0j30nq0c2age.jpg" alt="08"></p><ul><li>gpt命令模式分区，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkpart  分区名称  分区开始位置  分区结束位置</span><br><span class="line">mkpart test 2000 3000</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g338bhjnsfj30ne08itdt.jpg" alt="09"></p><p>如果分区和指定的重叠，如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g338ctrd3cj30nk0e6ajl.jpg" alt="10"></p><p>删除分区3，<strong>rm 3</strong></p><p>没有主分区，逻辑分区，扩展分区概念，</p><p>以上都是以M为单位分区，如果要以GB为单位分区，可输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unit  GB</span><br></pre></td></tr></table></figure><p>如果已经指定完成分区，输入<strong>quit</strong>，退出。和fdisk不同的是，不用<strong>w</strong>写入硬盘。</p><hr><p><strong>分区格式化工具mkfs</strong></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g338i57j6rj30xe0gwmz2.jpg" alt="11"><br>列出设备类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev/sdb*</span><br></pre></td></tr></table></figure></p><p>将设备格式化为ext3系统，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext3  /dev/sdb1</span><br></pre></td></tr></table></figure></p><p>第二种写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs -t ext4 /dev/sdb2</span><br></pre></td></tr></table></figure></p><p>注意：在MBR分区中，扩展分区不可格式化，只有主分区，逻辑分区才可格式化。</p><p>GBT，要使用<strong>parted</strong>工具，输入<strong>print</strong>，查看硬盘分区表状况。</p><hr><p><strong>挂载分区</strong></p><p>未挂载分区无法使用，而且必须挂载到存在的挂载点<img src="https://ws1.sinaimg.cn/large/006tNc79ly1g338o4moq5j30j403c40d.jpg" alt="12"></p><p>创建挂载点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/imooc</span><br></pre></td></tr></table></figure></p><p>挂载分区，重启失效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdb1 /mnt/imooc</span><br></pre></td></tr></table></figure></p><p>手动挂载不具有永久性，想要在重启后生效，自动挂载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/ fstab</span><br></pre></td></tr></table></figure></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g338sw4wnqj30ws082gry.jpg" alt="13"></p><p>卸载掉挂载的分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /mnt/imooc</span><br></pre></td></tr></table></figure></p><hr><p><strong>swap分区</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g338v4l18jj30hg0aydki.jpg" alt="14"></p><ul><li>建立分区<code>/dev/sdb6</code></li><li><p>进入分区模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb6</span><br></pre></td></tr></table></figure></li><li><p>修改分区，输入<strong>t</strong>，</p></li><li>输入<strong>6</strong>，</li><li>输入<strong>L</strong>，查看<strong>编码列表82，linux swap</strong></li><li>输入<strong>82</strong>，</li><li><p>输入<strong>w</strong>，保存</p></li><li><p>格式化交换分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /dev/sdb6</span><br></pre></td></tr></table></figure></li><li><p>启用交换分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /dev/sdb6</span><br></pre></td></tr></table></figure></li><li><p>查看swap加载状况，<strong>free</strong></p></li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g33904tw12j30u004k41u.jpg" alt="15"></p><ul><li>停用swap分区<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff /dev/sdb6</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="用户和用户组操作文件"><a href="#用户和用户组操作文件" class="headerlink" title="用户和用户组操作文件"></a>用户和用户组操作文件</h4><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g3396ibbg4j30o204mdhp.jpg" alt="16"></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g33981em34j30t8066whp.jpg" alt="17"></p><p>root,组编号为0。</p><p>1-499,安装给这个系统的软件和用户。</p><p>500+，用户手动创建的用户。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g339bc0uf1j30u605oq69.jpg" alt="18"></p><p>*和！  组密码为空</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g339ch65qdj30zq044adz.jpg" alt="19"></p><p>每一行对应一个用户信息。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g339elju9dj30ug04c0v5.jpg" alt="20"></p><hr><h5 id="用户和用户组基本命令"><a href="#用户和用户组基本命令" class="headerlink" title="用户和用户组基本命令"></a>用户和用户组基本命令</h5><p>新建用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd sexy</span><br></pre></td></tr></table></figure></p><p>修改用户组名称，新的组名称在前面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod  -n market sexy</span><br></pre></td></tr></table></figure></p><p>可通过<code>cat /etc/group</code>查看。</p><p>修改用户组编号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -g 668 market</span><br></pre></td></tr></table></figure></p><p>创建用户组并添加编号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 888 boss</span><br></pre></td></tr></table></figure></p><p>删除用户组，首先应该先删除用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel market</span><br></pre></td></tr></table></figure></p><p>创建用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd sexy</span><br></pre></td></tr></table></figure></p><p>给用户组添加用户，-g参数可以指定用户组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -g sexy serven</span><br><span class="line">useradd -g sexy jzmb</span><br></pre></td></tr></table></figure></p><p>使用<code>-d</code>创建用户指定个人文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d  /home/xxx imooc</span><br></pre></td></tr></table></figure></p><p>imooc未指明用户组，系统会默认创建同名的用户组</p><p>给用户添加备注<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -c shiqi serven</span><br></pre></td></tr></table></figure></p><p>修改用户名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -l qiqi serven</span><br></pre></td></tr></table></figure></p><p>修改用户文件路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -d /home/qiqi qiqi</span><br></pre></td></tr></table></figure></p><p>修改用户所属用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g sexy imooc</span><br></pre></td></tr></table></figure></p><p>删除用户，并不会删除个人文件夹的文件，可以 r 参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel jzmb</span><br></pre></td></tr></table></figure></p><p>禁止除了root用户以外的普通用户登录系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/nologin</span><br></pre></td></tr></table></figure></p><hr><p>锁定账户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -l qiqi</span><br></pre></td></tr></table></figure></p><p>解锁账户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -u qiqi</span><br></pre></td></tr></table></figure></p><p>清除账户密码，可无密码登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -d qiqi</span><br></pre></td></tr></table></figure></p><hr><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1g349lemddgj30wg0kwdmd.jpg" alt="21"></p><p>给用户添加附属组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a qiqi boss</span><br></pre></td></tr></table></figure></p><p>当一个用户有多个附属组，默认文件在主要组。需要可切换至附属组中<br>需要用户自己执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp boss</span><br></pre></td></tr></table></figure></p><p>给用户删除附属组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a qiqi boss</span><br></pre></td></tr></table></figure></p><p>创建用户既指定主要组，又指定附属组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -g group1 -G group1,group2,group3...</span><br></pre></td></tr></table></figure></p><p>给用户组设置组密码,输入两次密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd imooc</span><br></pre></td></tr></table></figure></p><hr><p>切换用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su username</span><br></pre></td></tr></table></figure></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1g349shs8pmj30s80gu447.jpg" alt="22"></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g349taxxlwj30la07ujtl.jpg" alt="23"></p><blockquote><p>部分瞻仰大佬笔记📒<br><a href="https://www.imooc.com/learn/111" target="_blank" rel="noopener">https://www.imooc.com/learn/111</a><br>linux硬盘分区等知识优秀笔记📒<br>LVM扩容文档:<a href="https://blog.51cto.com/11601346/1831795" target="_blank" rel="noopener">https://blog.51cto.com/11601346/1831795</a><br>Linux LVM简明教程:<a href="https://linux.cn/article-3218-1.html" target="_blank" rel="noopener">https://linux.cn/article-3218-1.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;如果你以前从未接触过Linux，可能就不清楚为什么会有这么多不同的Linux发行版。在查看Linux软件包时，你肯定被发行版、LiveCD和GNU之类的术语搞晕过。那，我也不会讲给你听。🤣&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Centos" scheme="https://annecoding.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习</title>
    <link href="https://annecoding.github.io/2019/03/21/vue%E5%AD%A6%E4%B9%A0/"/>
    <id>https://annecoding.github.io/2019/03/21/vue学习/</id>
    <published>2019-03-21T01:46:32.000Z</published>
    <updated>2019-05-22T01:33:20.803Z</updated>
    
    <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><h3 id="VUE是什么"><a href="#VUE是什么" class="headerlink" title="VUE是什么"></a>VUE是什么</h3><p><strong>Vue</strong>是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><a id="more"></a><p><strong>vue官网传送门</strong>：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p><h4 id="入门示例"><a href="#入门示例" class="headerlink" title="入门示例"></a>入门示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>VueJS Tutorials<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- css引入部分 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"styles.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--vue控制区域 view --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue-app"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hey, &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--js引入部分--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#vue-app'</span>,<span class="comment">//element，将实例化后的vue挂载到指定的dom元素中</span></span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">'Anne'</span><span class="comment">//存放el中会用到的数据</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.首先需要引入相关的Vue.js、css等格式文件。<br>2.<code>el</code>:提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。<br>  <code>data</code>:Vue 实例的数据对象，用于给 View 提供数据。<br>3.vue遵循MVVM模型。</p><ul><li>MVVM ===&gt; M / V / VM</li><li>M：model数据模型，data  </li><li>V：view视图，body体、div中要操作的节点</li><li>VM：ViewModel 视图模型，实例化的vue对象，数据之间的调度者</li><li>MVVM通过<strong>数据双向绑定</strong>让数据自动地双向同步<ul><li>V（修改数据） -&gt; M</li><li>M（修改数据） -&gt; V</li><li>数据是核心，让程序员只关注本身的业务逻辑实现<br>4.关于指令 (Directives) : 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</li></ul></li></ul><h4 id="数据方法"><a href="#数据方法" class="headerlink" title="数据方法"></a>数据方法</h4><p>index.html部分:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>VueJS Tutorials<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入css --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"styles.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue-app"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Data Binding<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 更新更新DOM对象的 textContent --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- v-html : 对html语言进行渲染，更新DOM对象的 innerHTML --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"websiteTag"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- v-bind : 当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"website"</span>&gt;</span>This Annecoding's Website<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- name 将不会被识别为变量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>app.js部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#vue-app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">'Anne'</span>,</span><br><span class="line">        job: <span class="string">'web前端工程师'</span>,</span><br><span class="line">        website: <span class="string">'https://annecoding.github.io'</span>,</span><br><span class="line">        websiteTag: <span class="string">'&lt;a href="https://annecoding.github.io"&gt;This is Anne Website&lt;/a&gt;'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Good '</span> + time + <span class="string">', '</span> + <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.使用“Mustache”语法 (双大括号) 的文本插值<br>2.<code>v-cloak</code>,<code>v-text</code>: 更新更新DOM对象的 textContent<br>3.<code>v-html</code>: 双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用<code>v-html</code>更新DOM对象的 innerHTML<br>4.<code>v-bind</code>: 对直接在html中的属性进行变量的识别，确保其会被识别为变量，简写为<code>:</code>，在布尔特性的情况下，它们的存在即暗示为 true<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">"isButtonDisabled"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果 <code>isButtonDisabled</code> 的值是 <code>null</code>、<code>undefined</code> 或 <code>false</code>，则 <code>disabled</code> 特性甚至不会被包含在渲染出来的 <code>&lt;button&gt;</code> 元素中<br>5.结果如下:<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g1jodm075aj30fo0dcdgf.jpg" alt></p><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>index.html部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>VueJS Tutorials<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 引入css --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"styles.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue-app"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Events<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- v-on : vue事件绑定 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-on:click : 单击事件 鼠标单击 加一岁 减一岁 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add(1)"</span>&gt;</span>Add a Year<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"subtract(1)"</span>&gt;</span>Subtract a Year<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-on:dblclick : 双击事件 鼠标双击 加十岁  减十岁 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:dblclick</span>=<span class="string">"add(10)"</span>&gt;</span>Add 10 Years<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:dblclick</span>=<span class="string">"subtract(10)"</span>&gt;</span>Subtract 10 Years<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- v-on:mousemove : 鼠标滑过事件  实现效果：获取鼠标滑过之后的坐标值并停住 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>My age is &#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">v-on:mousemove</span>=<span class="string">"updateXY"</span>&gt;</span>&#123;&#123; x &#125;&#125; , &#123;&#123; y &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 事件修饰符的使用，在事件发生之前阻止 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.prevent</span>=<span class="string">"click"</span> <span class="attr">href</span>=<span class="string">"https://annecoding.github.io"</span>&gt;</span>event prevent<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>app.js部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#vue-app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        age: <span class="number">25</span>,</span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params">inc</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age += inc;</span><br><span class="line">        &#125;,</span><br><span class="line">        subtract: <span class="function"><span class="keyword">function</span>(<span class="params">dec</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age -= dec;</span><br><span class="line">        &#125;,</span><br><span class="line">        updateXY: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = event.offsetX;</span><br><span class="line">            <span class="keyword">this</span>.y = event.offsetY;</span><br><span class="line">        &#125;,</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'确定要访问吗？'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>styles.css部分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#canvas</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">200px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.<code>v-on</code>: 用来绑定一些常用的事件,简写为<code>@</code><br>2.事件修饰符的使用</p><blockquote><p>事件修饰符<br>.stop 阻止冒泡，调用 event.stopPropagation()<br>.prevent 阻止默认行为，调用 event.preventDefault()<br>.capture 添加事件侦听器时使用事件捕获模式<br>.self 只当事件在该元素本身（比如不是子元素）触发时，才会触发事件<br>.once 事件只触发一次</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现效果如下：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g1jpatvyadj31pc0u0ju4.jpg" alt></p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>实现数据双向绑定你可以用。<code>v-model</code>指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>及 <code>&lt;select&gt;</code>元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">v-model</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"搜索"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在data()里面设定，当submmited为true的时候就会提交 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-if</span>=<span class="string">"!submmited"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>博客标题<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"blog.title"</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>博客内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"blog.content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"checkboxes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Vue.js<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"Vue.js"</span> <span class="attr">v-model</span>=<span class="string">"blog.categories"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Node.js<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"Node.js"</span> <span class="attr">v-model</span>=<span class="string">"blog.categories"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>React.js<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"React.js"</span> <span class="attr">v-model</span>=<span class="string">"blog.categories"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Angular4.js<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"Angular4.js"</span> <span class="attr">v-model</span>=<span class="string">"blog.categories"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>作者：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多个数据就放在数组里面 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-model绑定数据是选择了某个人  就放进去数据  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"blog.author"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"author in authors"</span> <span class="attr">:key</span>=<span class="string">"author"</span>&gt;</span></span><br><span class="line">            &#123;&#123;author&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- prevent：阻止页面刷新 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.prevent</span>=<span class="string">"post"</span>&gt;</span>添加博客<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>优秀小伙伴的📒<br>vue.js基础笔记学习：<a href="https://www.cnblogs.com/yueyue-love/p/6215711.html" target="_blank" rel="noopener">https://www.cnblogs.com/yueyue-love/p/6215711.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;VUE是什么&quot;&gt;&lt;a href=&quot;#VUE是什么&quot; class=&quot;headerlink&quot; title=&quot;VUE是什么&quot;&gt;&lt;/a&gt;VUE是什么&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Vue&lt;/strong&gt;是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://annecoding.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://annecoding.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署jenkins详细精简教程</title>
    <link href="https://annecoding.github.io/2019/03/19/docker%E5%AE%89%E8%A3%85jenkins/"/>
    <id>https://annecoding.github.io/2019/03/19/docker安装jenkins/</id>
    <published>2019-03-19T00:45:40.000Z</published>
    <updated>2019-03-23T04:15:24.123Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用Docker来部署jenkins的部署过程"><a href="#利用Docker来部署jenkins的部署过程" class="headerlink" title="利用Docker来部署jenkins的部署过程"></a>利用Docker来部署jenkins的部署过程</h3><a id="more"></a><h3 id="安装Docker的步骤"><a href="#安装Docker的步骤" class="headerlink" title="安装Docker的步骤"></a>安装Docker的步骤</h3><ul><li><p>安装curl工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt install -y curl</span><br></pre></td></tr></table></figure></li><li><p>安装docker脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure></li><li><p>添加 <strong>Docker Hub</strong> 镜像加速<br>您可以通过修改 <code>daemon.json</code> 配置文件来使用 <strong>Docker Hub</strong> 加速服务。<br>创建 daemon.json 文件<br>请在 <code>/etc/docker</code> 目录下创建 daemon.json。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></li><li><p>编辑 daemon.json 文件<br>编辑 <code>/etc/docker/daemon.json</code>，添加镜像服务地址。腾讯云镜像的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: </span><br><span class="line">[&quot;https://mirror.ccs.tencentyun.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新启动 Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h3><p><strong>Jenkins 简介</strong></p><ul><li><p>Jenkins 是一个开源软件项目，是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p></li><li><p>获取 Jenkins 镜像<br>Jenkins 官方镜像主要提供两个版本，分别是 LTS版和每周更新版。本教程使用的是 LTS 版。从docker上获取Jenkins：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure></li><li><p>启动 Jenkins 容器<br>使用 Docker 在宿主主机启动 Jenkins 容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name jenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home --restart always -d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure></li><li><p>docker run 附加参数说明：最多 22 列</p><ul><li>剪切</li><li>复制</li><li>粘贴</li><li>向上插入 1 行</li><li>向下插入 1 行</li><li>向左插入 1 列</li><li>向右插入 1 列</li><li>插入超链接</li><li>合并单元格</li><li>取消合并单元格</li><li>删除列</li><li>删除行</li><li>删除表格</li></ul></li><li><p>附加参数:本教程所使用的值用途</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--name</span><br><span class="line">jenkins</span><br><span class="line">命名</span><br><span class="line"></span><br><span class="line">-p</span><br><span class="line">8080:8080</span><br><span class="line">端口映射</span><br><span class="line"></span><br><span class="line">-v</span><br><span class="line">jenkins_home</span><br><span class="line">数据卷</span><br><span class="line"></span><br><span class="line">--restart</span><br><span class="line">always</span><br><span class="line">重启策略</span><br></pre></td></tr></table></figure></li></ul><p>有关更多配置方法请查看官方 Docker 文档。</p><h3 id="访问-Jenkins-实例"><a href="#访问-Jenkins-实例" class="headerlink" title="访问 Jenkins 实例"></a>访问 Jenkins 实例</h3><ul><li>在浏览器中打开 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 即可浏览之前启动的 Jenkins 实例。</li><li><p>获取初始登录密码<br>回到命令行，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec jenkins \</span><br><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure></li><li><p>从输出结果中<strong>获得的一串 Jenkins 初始密码</strong>，复制密码，回到 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 填入密码。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;利用Docker来部署jenkins的部署过程&quot;&gt;&lt;a href=&quot;#利用Docker来部署jenkins的部署过程&quot; class=&quot;headerlink&quot; title=&quot;利用Docker来部署jenkins的部署过程&quot;&gt;&lt;/a&gt;利用Docker来部署jenkins的部署过程&lt;/h3&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://annecoding.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://annecoding.github.io/tags/Docker/"/>
    
      <category term="Jenkins" scheme="https://annecoding.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统下Nginx安装及反向代理配置</title>
    <link href="https://annecoding.github.io/2019/03/19/nginx%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>https://annecoding.github.io/2019/03/19/nginx安装及配置/</id>
    <published>2019-03-19T00:45:40.000Z</published>
    <updated>2019-05-24T07:40:33.172Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Nginx</strong>是一个高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。<br><strong>反向代理（Reverse Proxy）</strong>方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><a id="more"></a><h3 id="nginx使用yum安装（第一种方式）"><a href="#nginx使用yum安装（第一种方式）" class="headerlink" title="nginx使用yum安装（第一种方式）"></a>nginx使用yum安装（第一种方式）</h3><p>linux下安装nginx，yum下没有nginx源，在epel-release下有。</p><p>1.安装epel-release源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure></p><p>2.安装nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></p><p>3.启动、停止、重新加载Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动Nginx</span><br><span class="line">/usr/sbin/nginx</span><br><span class="line"># 重新加载配置Nginx</span><br><span class="line">/usr/sbin/nginx -s reload</span><br><span class="line"># 停止Nginx</span><br><span class="line">/usr/sbin/nginx -s stop</span><br><span class="line"># 重新加载Nginx</span><br><span class="line">/usr/sbin/nginx -s reopen</span><br></pre></td></tr></table></figure></p><p>4.查看版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure></p><p>5.抓取网页情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i localhost</span><br></pre></td></tr></table></figure></p><h3 id="nginx编译安装（第二种方式）"><a href="#nginx编译安装（第二种方式）" class="headerlink" title="nginx编译安装（第二种方式）"></a>nginx编译安装（第二种方式）</h3><p>1.安装工具包 wget、vim和gcc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget  </span><br><span class="line">yum install -y vim-enhanced  </span><br><span class="line">yum install -y make cmake gcc gcc-c++</span><br></pre></td></tr></table></figure></p><p>2.下载nginx安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure></p><p>3.安装依赖包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></p><p>4.解压nginx-1.12.2.tar.gz到/usr/local/目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.12.2.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure></p><p>5.进行configure配置</p><p>进入nginx-1.12.2目录然后在执行<code>./configure</code>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.12.2]# ./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure></p><p>6.编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.12.2]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>7.启动Nginx，启动完之后检查nginx是否已经正常启动，看到如下信息说明正常启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.12.2]# /usr/local/nginx/sbin/nginx</span><br><span class="line">[root@localhost nginx-1.12.2]# ps -ef | grep nginx</span><br><span class="line">root     24956     1  0 19:41 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nobody   24957 24956  0 19:41 ?        00:00:00 nginx: worker process</span><br><span class="line">root     24959 10533  0 19:41 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure></p><p>如果要关闭nginx，我们可以使用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.12.2]# /usr/local/nginx/sbin/nginx -s stop</span><br></pre></td></tr></table></figure></p><p>如果想要重新热启动nginx，则使用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.12.2]# /usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></p><p>8.配置防火墙,nginx默认的端口是80<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.12.2]# firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@localhost nginx-1.12.2]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure></p><p>9.测试nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过浏览器访问nginx欢迎页，在地址栏输入：http://IP地址/（80端口可以不用输）或http://IP地址:80/，如下图所示。</span><br></pre></td></tr></table></figure></p><p>10:学习nginx配置</p><p>在nginx目录下进入conf目录，该目录下有个<strong>nginx.conf</strong>文件，这是nginx最重要的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vi + /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.test.com; //配置购买的域名</span><br><span class="line">        rewrite ^ https://$http_host$request_uri? permanent; //跳转https</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">             proxy_pass   http://ip地址:8080/web/;  //代理的服务器网址</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   #HTTPS server</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  www.test.com;</span><br><span class="line"> </span><br><span class="line">    ssl_certificate   /usr/local/nginx/cert/214522547140913.pem; //证书配置</span><br><span class="line">    ssl_certificate_key  /usr/local/nginx/cert/214522547140913.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">        location / &#123;</span><br><span class="line">           proxy_pass   http://IP地址:8080/web/;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><h3 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload       #重新载入配置文件</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reopen       # 重启 Nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop         # 停止 Nginx</span><br></pre></td></tr></table></figure><h3 id="备注-nginx错误解决"><a href="#备注-nginx错误解决" class="headerlink" title="备注:nginx错误解决"></a>备注:nginx错误解决</h3><p>centos6.5环境</p><p>修改nginx配置文件后，重启报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [emerg] socket() [::]:80 failed (97: Address family not supported by protocol)</span><br></pre></td></tr></table></figure></p><p>解决办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/default.conf</span><br><span class="line">将</span><br><span class="line">listen       80 default_server;</span><br><span class="line">listen       [::]:80 default_server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">改为：</span><br><span class="line">listen       80;</span><br><span class="line">#listen       [::]:80 default_server;</span><br></pre></td></tr></table></figure></p><p>证书过期之后，修改nginx配置，添加新的证书便可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload       #重新载入配置文件</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reopen       # 重启 Nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt;是一个高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。&lt;br&gt;&lt;strong&gt;反向代理（Reverse Proxy）&lt;/strong&gt;方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://annecoding.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>史上最详细的linux下安装Nodejs</title>
    <link href="https://annecoding.github.io/2019/03/18/linux_nodejs%E5%AE%89%E8%A3%85/"/>
    <id>https://annecoding.github.io/2019/03/18/linux_nodejs安装/</id>
    <published>2019-03-18T09:08:40.000Z</published>
    <updated>2019-03-18T09:13:38.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux安装Nodejs及环境配置"><a href="#Linux安装Nodejs及环境配置" class="headerlink" title="Linux安装Nodejs及环境配置"></a>Linux安装Nodejs及环境配置</h3><a id="more"></a><h3 id="去官网下载和自己系统匹配的文件："><a href="#去官网下载和自己系统匹配的文件：" class="headerlink" title="去官网下载和自己系统匹配的文件："></a>去官网下载和自己系统匹配的文件：</h3><p> 英文网址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br> 中文网址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p> 通过  uname -a  命令查看Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统）</p><h3 id="将下载下来的tar文件上传到服务器并且解压，然后通过建立软连接变为全局"><a href="#将下载下来的tar文件上传到服务器并且解压，然后通过建立软连接变为全局" class="headerlink" title="将下载下来的tar文件上传到服务器并且解压，然后通过建立软连接变为全局"></a>将下载下来的tar文件上传到服务器并且解压，然后通过建立软连接变为全局</h3><p>1）上传服务器可以是自己任意路径，目前我的放置路径为  cd /opt/nodejs</p><p>2）解压上传（解压后的文件我这边将名字改为了nodejs，这个地方自己随意，只要在建立软连接的时候写正确就可以）<br>    ① tar -xvf   node-v8.12.0-linux-x64.tar.xz<br>    ② mv node-v8.12.0-linux-x64  nodejs<br>    ③确认一下nodejs下bin目录是否有node 和npm文件，如果有执行软连接，如果没有重新下载执行上边步骤；</p><p>3）建立软连接，变为全局<br>根据需要是否安装yarn<br><code>npm install -g yarn</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ln -s  /opt/nodejs/bin/npm     /usr/local/bin/</span><br><span class="line">ln -s  /opt/nodejs/bin/node     /usr/local/bin/</span><br><span class="line">ln -s  /opt/nodejs/bin/yarn     /usr/local/bin/</span><br><span class="line"></span><br><span class="line">ln -s /opt/nodejs/node-v8.12.0-linux-x64/bin/yarn  /usr/local/bin/</span><br><span class="line">ln -s /opt/nodejs/node-v8.12.0-linux-x64/bin/yarn  /usr/local/bin/</span><br><span class="line">ln -s /opt/nodejs/node-v8.12.0-linux-x64/bin/cnpm  /usr/local/bin/</span><br><span class="line">ln -s /opt/nodejs/node-v8.12.0-linux-x64/bin/node  /usr/local/bin/</span><br></pre></td></tr></table></figure><p>4）最后一步检验nodejs是否已变为全局<br>在Linux命令行node -v 命令会显示nodejs版本，证明安装成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Linux安装Nodejs及环境配置&quot;&gt;&lt;a href=&quot;#Linux安装Nodejs及环境配置&quot; class=&quot;headerlink&quot; title=&quot;Linux安装Nodejs及环境配置&quot;&gt;&lt;/a&gt;Linux安装Nodejs及环境配置&lt;/h3&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Nodejs" scheme="https://annecoding.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Centos网卡配置</title>
    <link href="https://annecoding.github.io/2019/03/18/linux_centos%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE/"/>
    <id>https://annecoding.github.io/2019/03/18/linux_centos网卡配置/</id>
    <published>2019-03-18T07:20:40.000Z</published>
    <updated>2019-04-26T06:23:13.896Z</updated>
    
    <content type="html"><![CDATA[<p>关于linux系统下网卡的相关配置、启动方式等。<br><a id="more"></a></p><h3 id="centos7网卡配置"><a href="#centos7网卡配置" class="headerlink" title="centos7网卡配置"></a>centos7网卡配置</h3><p>进入网卡目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br></pre></td></tr></table></figure></p><p>修改相关配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ifcfg-eno1212</span><br></pre></td></tr></table></figure></p><p>修改其中的信息如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=static</span><br><span class="line"></span><br><span class="line">IPADDR=192.168.1.116</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">DNS1=8.8.8.8</span><br></pre></td></tr></table></figure></p><h3 id="centos7的网卡重启方法"><a href="#centos7的网卡重启方法" class="headerlink" title="centos7的网卡重启方法"></a>centos7的网卡重启方法</h3><p>1、centos6的网卡重启方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></p><p>centos7的网卡重启方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></p><p>2、DNS配置文件：<code>cat /etc/resolv.conf</code><br>设置主机和IP绑定信息：<code>cat /etc/hosts</code><br>设置主机名：<code>cat /etc/hostname</code></p><p>3、可以使用nmtui文本框方式修改IP</p><p>4、关闭防火墙并设置开机不启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看防火墙状态</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">#开启</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"><span class="comment">#开机自动关闭</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line"><span class="comment">#查看开机是否启动</span></span><br><span class="line">chkconfig --list|grep network(RHLE6)</span><br></pre></td></tr></table></figure></p><p>5、临时和永久关闭Selinux<br>临时关闭：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# getenforce</span><br><span class="line">Enforcing</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">[root@localhost ~]# getenforce</span><br><span class="line">Permissive</span><br></pre></td></tr></table></figure></p><p>永久关闭：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/sysconfig/selinux</span><br><span class="line"></span><br><span class="line">SELINUX=enforcing 改为 SELINUX=disabled</span><br></pre></td></tr></table></figure></p><p>重启服务reboot</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于linux系统下网卡的相关配置、启动方式等。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Centos" scheme="https://annecoding.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Git命令的使用及总结</title>
    <link href="https://annecoding.github.io/2019/03/18/git%E4%BD%BF%E7%94%A8/"/>
    <id>https://annecoding.github.io/2019/03/18/git使用/</id>
    <published>2019-03-18T07:20:40.000Z</published>
    <updated>2019-05-27T08:32:09.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git从分支克隆、通过fetch等更新本地仓库、本地提交查看版本等"><a href="#git从分支克隆、通过fetch等更新本地仓库、本地提交查看版本等" class="headerlink" title="git从分支克隆、通过fetch等更新本地仓库、本地提交查看版本等"></a>git从分支克隆、通过fetch等更新本地仓库、本地提交查看版本等</h3><a id="more"></a><h3 id="从分支克隆"><a href="#从分支克隆" class="headerlink" title="从分支克隆"></a>从分支克隆</h3><p>1.不指定分支克隆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vuejs/vue.git</span><br></pre></td></tr></table></figure></p><p>2.指定分支克隆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b dev https://github.com/vuejs/vue.git</span><br></pre></td></tr></table></figure></p><h3 id="通过fetch更新本地仓库"><a href="#通过fetch更新本地仓库" class="headerlink" title="通过fetch更新本地仓库"></a>通过fetch更新本地仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line">$ git fetch origin master //从远程的origin仓库的master分支下载代码到本地的origin master</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">log</span> -p master.. origin/master//比较本地的仓库和远程参考的区别</span><br><span class="line"></span><br><span class="line">$ git merge origin/master//把远程下载下来的代码合并到本地仓库，远程的和本地的合并</span><br><span class="line"></span><br><span class="line">//方法二</span><br><span class="line">$ git fetch origin master:temp //从远程的origin仓库的master分支下载到本地并新建一个分支temp</span><br><span class="line"></span><br><span class="line">$ git diff temp//比较master分支和temp分支的不同</span><br><span class="line"></span><br><span class="line">$ git merge temp//合并temp分支到master分支</span><br><span class="line"></span><br><span class="line">$ git branch -d temp//删除temp</span><br></pre></td></tr></table></figure><h3 id="git比较本地仓库和远程仓库的差异"><a href="#git比较本地仓库和远程仓库的差异" class="headerlink" title="git比较本地仓库和远程仓库的差异"></a>git比较本地仓库和远程仓库的差异</h3><p>1.更新本地的远程分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure></p><p>2.本地与远程的差集 :（显示远程有而本地没有的commit信息）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log master..origin/master</span><br></pre></td></tr></table></figure></p><p>3.统计文件的改动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git diff &lt;local branch&gt; &lt;remote&gt;/&lt;remote branch&gt;</span><br><span class="line">git diff --stat master origin/master</span><br></pre></td></tr></table></figure></p><h3 id="git本地仓库初始化及提交"><a href="#git本地仓库初始化及提交" class="headerlink" title="git本地仓库初始化及提交"></a>git本地仓库初始化及提交</h3><p>从远程仓库抓取更新到本地。其中第一次需要对本地做<code>git init</code>,然后进.git目录<br>第一次需要将本地库提交到github上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 从远程pull代码</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="comment">#从远程的origin仓库的master分支下载代码到本地的origin master</span></span><br><span class="line">git fetch origin master</span><br><span class="line"><span class="comment">#比较本地的仓库和远程参考的区别</span></span><br><span class="line">git <span class="built_in">log</span> -p master.. origin/master</span><br><span class="line"><span class="comment">#把远程下载下来的代码合并到本地仓库，远程的和本地的合并</span></span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure></p><h3 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h3 id="增加删除文件"><a href="#增加删除文件" class="headerlink" title="增加删除文件"></a>增加删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><hr><blockquote><p>部分笔记参考📒<br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a><br>优秀的笔记📒<br>中文版权威教程Git Pro：<a href="https://gitee.com/progit/" target="_blank" rel="noopener">https://gitee.com/progit/</a><br>简明使用指导：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git从分支克隆、通过fetch等更新本地仓库、本地提交查看版本等&quot;&gt;&lt;a href=&quot;#git从分支克隆、通过fetch等更新本地仓库、本地提交查看版本等&quot; class=&quot;headerlink&quot; title=&quot;git从分支克隆、通过fetch等更新本地仓库、本地提交查看版本等&quot;&gt;&lt;/a&gt;git从分支克隆、通过fetch等更新本地仓库、本地提交查看版本等&lt;/h3&gt;
    
    </summary>
    
      <category term="Git" scheme="https://annecoding.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://annecoding.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统下端口的开放</title>
    <link href="https://annecoding.github.io/2019/03/18/linux%E7%AB%AF%E5%8F%A3%E5%BC%80%E6%94%BE/"/>
    <id>https://annecoding.github.io/2019/03/18/linux端口开放/</id>
    <published>2019-03-18T07:20:40.000Z</published>
    <updated>2019-04-26T06:21:43.427Z</updated>
    
    <content type="html"><![CDATA[<p>在linux系统中，经常会涉及到各种端口的开放问题，这里做个记录。</p><a id="more"></a><h3 id="LINUX-centos-自带防火墙开放端口"><a href="#LINUX-centos-自带防火墙开放端口" class="headerlink" title="LINUX(centos)自带防火墙开放端口"></a>LINUX(centos)自带防火墙开放端口</h3><p>1.查看防火墙状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure></p><p>2.启动防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure></p><p>3.停止防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></p><p>4.开放需要的端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line"></span><br><span class="line">--zone  <span class="comment">#作用域</span></span><br><span class="line">--add-port=80/tcp  <span class="comment">#添加端口，格式为：端口/通讯协议</span></span><br><span class="line">--permanent   <span class="comment">#永久生效，没有此参数重启后失效</span></span><br></pre></td></tr></table></figure></p><p>5.关闭不需要的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure></p><p>6.重新加载防火墙配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>7.查看开放的端口列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="comment"># 查看配置是否生效</span></span><br><span class="line">firewall-cmd --zone= public --query-port=8080/tcp</span><br></pre></td></tr></table></figure></p><p>8.查看监听状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp/-ntlp</span><br></pre></td></tr></table></figure></p><h3 id="CentOS-7、RedHat-7之前的-Linux-发行版防火墙开启和关闭-iptables"><a href="#CentOS-7、RedHat-7之前的-Linux-发行版防火墙开启和关闭-iptables" class="headerlink" title="CentOS 7、RedHat 7之前的 Linux 发行版防火墙开启和关闭( iptables ):"></a>CentOS 7、RedHat 7之前的 Linux 发行版防火墙开启和关闭( iptables ):</h3><p>即时生效，重启失效<br>开启防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables start</span><br></pre></td></tr></table></figure></p><p>关闭防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure></p><p>重启生效<br>开启防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig iptables on</span><br></pre></td></tr></table></figure></p><p>关闭防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure></p><p>端口开放查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure></p><h3 id="CENTOS-7、REDHAT-7-之后的-LINUX-发行版防火墙开启和关闭防火墙"><a href="#CENTOS-7、REDHAT-7-之后的-LINUX-发行版防火墙开启和关闭防火墙" class="headerlink" title="CENTOS 7、REDHAT 7 之后的 LINUX 发行版防火墙开启和关闭防火墙"></a>CENTOS 7、REDHAT 7 之后的 LINUX 发行版防火墙开启和关闭防火墙</h3><p>关闭防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></p><h3 id="CENTOS-7、REDHAT-7-之前的-LINUX-发行版开放端口"><a href="#CENTOS-7、REDHAT-7-之前的-LINUX-发行版开放端口" class="headerlink" title="CENTOS 7、REDHAT 7 之前的 LINUX 发行版开放端口"></a>CENTOS 7、REDHAT 7 之前的 LINUX 发行版开放端口</h3><p>1.命令行方式开放5212端口命令<br>开启5212端口接收数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 5212 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>开启5212端口发送数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I OUTPUT -p tcp --dport 5212 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>保存配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.d/init.d/iptables save</span><br></pre></td></tr></table></figure></p><p>重启防火墙服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.d/init.d/iptables restart</span><br></pre></td></tr></table></figure></p><p>查看是否开启成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/iptables status</span><br></pre></td></tr></table></figure></p><h3 id="Ubuntu开放端口方法"><a href="#Ubuntu开放端口方法" class="headerlink" title="Ubuntu开放端口方法"></a>Ubuntu开放端口方法</h3><p>一般情况下，ubuntu安装好的时候，iptables会被安装上，如果没有的话那就安装上吧</p><p>1.安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install iptables</span><br></pre></td></tr></table></figure></p><p>2.添加规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></p><p>中间的80为所需要开放的端口<br>3.保存规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables-save</span><br></pre></td></tr></table></figure></p><p>完成上述命令我们就完成了开放指定的端口，<strong>但是如果此时服务器重启，上述规则就没有了</strong>，所以我们需要对规则进行一下持续化操作。</p><h3 id="持续化规则"><a href="#持续化规则" class="headerlink" title="持续化规则"></a>持续化规则</h3><p>这里我们需要在安装一下工具来帮我们实现，这里我们使用 <code>iptables-persistent</code><br>1.安装iptables-persistent<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install iptables-persistent</span><br></pre></td></tr></table></figure></p><p>2.持久化规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netfilter-persistent save</span><br><span class="line">$ sudo netfilter-persistent reload</span><br></pre></td></tr></table></figure></p><p>完成上述操作就可以永久打开我们需要的端口了<br>端口开放查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在linux系统中，经常会涉及到各种端口的开放问题，这里做个记录。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://annecoding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://annecoding.github.io/tags/Linux/"/>
    
      <category term="Centos" scheme="https://annecoding.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://annecoding.github.io/2019/03/18/hello-world/"/>
    <id>https://annecoding.github.io/2019/03/18/hello-world/</id>
    <published>2019-03-18T03:35:23.154Z</published>
    <updated>2019-03-18T08:11:07.551Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>!This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;!This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
